Grammar

    0 $accept: program $end

    1 program: CLASS "Program" '{' field_decl method_decl '}'

    2 field_decl: type field_block ';'
    3           | type field_block ',' field_decl

    4 field_block: ID
    5            | ID '[' INT_LITERAL ']' field_block

    6 method_decl: type_decl ID '(' args_decl ')' block
    7            | /* empty */

    8 type_decl: type
    9          | VOID

   10 args_decl: type ID
   11          | type ID ',' args_decl

   12 block: '{' '}'
   13      | '{' statement '}'

   14 type: INT
   15     | BOOLEAN

   16 statement: location ASSIGN_OP expr ';'
   17          | method_call ';'
   18          | IF '(' expr ')' block ELSE block
   19          | IF '(' expr ')' block
   20          | FOR ID '=' expr ',' expr block
   21          | RETURN ';'
   22          | BREAK ';'
   23          | CONTINUE ';'
   24          | block

   25 method_call: method_name '(' ')'
   26            | CALLOUT '(' STRING_LITERAL ',' callout_arg ')'
   27            | CALLOUT '(' STRING_LITERAL ')'

   28 method_name: ID

   29 location: ID
   30         | ID '[' expr ']'

   31 expr: expr ARITH_OP term1
   32     | term1

   33 term1: term1 REL_OP term2
   34      | term2

   35 term2: term2 EQ_OP term3
   36      | term3

   37 term3: term3 COND_OP term4
   38      | term4

   39 term4: location
   40      | method_call
   41      | literal
   42      | '-' term4
   43      | '!' term4
   44      | '(' expr ')'

   45 callout_arg: expr
   46            | STRING_LITERAL

   47 bool_literal: TRUE
   48             | FALSE

   49 literal: INT_LITERAL
   50        | bool_literal


Terminals, with rules where they appear

$end (0) 0
'!' (33) 43
'(' (40) 6 18 19 25 26 27 44
')' (41) 6 18 19 25 26 27 44
',' (44) 3 11 20 26
'-' (45) 42
';' (59) 2 16 17 21 22 23
'=' (61) 20
'[' (91) 5 30
']' (93) 5 30
'{' (123) 1 12 13
'}' (125) 1 12 13
error (256)
INT (258) 14
BOOLEAN (259) 15
IF (260) 18 19
ELSE (261) 18
FOR (262) 20
RETURN (263) 21
BREAK (264) 22
CONTINUE (265) 23
CLASS (266) 1
VOID (267) 9
CALLOUT (268) 26 27
TRUE (269) 47
FALSE (270) 48
ASSIGN_OP (271) 16
ID (272) 4 5 6 10 11 20 28 29 30
STRING_LITERAL (273) 26 27 46
ARITH_OP (274) 31
REL_OP (275) 33
EQ_OP (276) 35
COND_OP (277) 37
INT_LITERAL (278) 5 49
"Program" (279) 1


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
field_decl (38)
    on left: 2 3, on right: 1 3
field_block (39)
    on left: 4 5, on right: 2 3 5
method_decl (40)
    on left: 6 7, on right: 1
type_decl (41)
    on left: 8 9, on right: 6
args_decl (42)
    on left: 10 11, on right: 6 11
block (43)
    on left: 12 13, on right: 6 18 19 20 24
type (44)
    on left: 14 15, on right: 2 3 8 10 11
statement (45)
    on left: 16 17 18 19 20 21 22 23 24, on right: 13
method_call (46)
    on left: 25 26 27, on right: 17 40
method_name (47)
    on left: 28, on right: 25
location (48)
    on left: 29 30, on right: 16 39
expr (49)
    on left: 31 32, on right: 16 18 19 20 30 31 44 45
term1 (50)
    on left: 33 34, on right: 31 32 33
term2 (51)
    on left: 35 36, on right: 33 34 35
term3 (52)
    on left: 37 38, on right: 35 36 37
term4 (53)
    on left: 39 40 41 42 43 44, on right: 37 38 42 43
callout_arg (54)
    on left: 45 46, on right: 26
bool_literal (55)
    on left: 47 48, on right: 50
literal (56)
    on left: 49 50, on right: 41


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . "Program" '{' field_decl method_decl '}'

    "Program"  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS "Program" . '{' field_decl method_decl '}'

    '{'  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS "Program" '{' . field_decl method_decl '}'

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    field_decl  go to state 8
    type        go to state 9


State 6

   14 type: INT .

    $default  reduce using rule 14 (type)


State 7

   15 type: BOOLEAN .

    $default  reduce using rule 15 (type)


State 8

    1 program: CLASS "Program" '{' field_decl . method_decl '}'

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    VOID     shift, and go to state 10

    $default  reduce using rule 7 (method_decl)

    method_decl  go to state 11
    type_decl    go to state 12
    type         go to state 13


State 9

    2 field_decl: type . field_block ';'
    3           | type . field_block ',' field_decl

    ID  shift, and go to state 14

    field_block  go to state 15


State 10

    9 type_decl: VOID .

    $default  reduce using rule 9 (type_decl)


State 11

    1 program: CLASS "Program" '{' field_decl method_decl . '}'

    '}'  shift, and go to state 16


State 12

    6 method_decl: type_decl . ID '(' args_decl ')' block

    ID  shift, and go to state 17


State 13

    8 type_decl: type .

    $default  reduce using rule 8 (type_decl)


State 14

    4 field_block: ID .
    5            | ID . '[' INT_LITERAL ']' field_block

    '['  shift, and go to state 18

    $default  reduce using rule 4 (field_block)


State 15

    2 field_decl: type field_block . ';'
    3           | type field_block . ',' field_decl

    ';'  shift, and go to state 19
    ','  shift, and go to state 20


State 16

    1 program: CLASS "Program" '{' field_decl method_decl '}' .

    $default  reduce using rule 1 (program)


State 17

    6 method_decl: type_decl ID . '(' args_decl ')' block

    '('  shift, and go to state 21


State 18

    5 field_block: ID '[' . INT_LITERAL ']' field_block

    INT_LITERAL  shift, and go to state 22


State 19

    2 field_decl: type field_block ';' .

    $default  reduce using rule 2 (field_decl)


State 20

    3 field_decl: type field_block ',' . field_decl

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    field_decl  go to state 23
    type        go to state 9


State 21

    6 method_decl: type_decl ID '(' . args_decl ')' block

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    args_decl  go to state 24
    type       go to state 25


State 22

    5 field_block: ID '[' INT_LITERAL . ']' field_block

    ']'  shift, and go to state 26


State 23

    3 field_decl: type field_block ',' field_decl .

    $default  reduce using rule 3 (field_decl)


State 24

    6 method_decl: type_decl ID '(' args_decl . ')' block

    ')'  shift, and go to state 27


State 25

   10 args_decl: type . ID
   11          | type . ID ',' args_decl

    ID  shift, and go to state 28


State 26

    5 field_block: ID '[' INT_LITERAL ']' . field_block

    ID  shift, and go to state 14

    field_block  go to state 29


State 27

    6 method_decl: type_decl ID '(' args_decl ')' . block

    '{'  shift, and go to state 30

    block  go to state 31


State 28

   10 args_decl: type ID .
   11          | type ID . ',' args_decl

    ','  shift, and go to state 32

    $default  reduce using rule 10 (args_decl)


State 29

    5 field_block: ID '[' INT_LITERAL ']' field_block .

    $default  reduce using rule 5 (field_block)


State 30

   12 block: '{' . '}'
   13      | '{' . statement '}'

    IF        shift, and go to state 33
    FOR       shift, and go to state 34
    RETURN    shift, and go to state 35
    BREAK     shift, and go to state 36
    CONTINUE  shift, and go to state 37
    CALLOUT   shift, and go to state 38
    ID        shift, and go to state 39
    '{'       shift, and go to state 30
    '}'       shift, and go to state 40

    block        go to state 41
    statement    go to state 42
    method_call  go to state 43
    method_name  go to state 44
    location     go to state 45


State 31

    6 method_decl: type_decl ID '(' args_decl ')' block .

    $default  reduce using rule 6 (method_decl)


State 32

   11 args_decl: type ID ',' . args_decl

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    args_decl  go to state 46
    type       go to state 25


State 33

   18 statement: IF . '(' expr ')' block ELSE block
   19          | IF . '(' expr ')' block

    '('  shift, and go to state 47


State 34

   20 statement: FOR . ID '=' expr ',' expr block

    ID  shift, and go to state 48


State 35

   21 statement: RETURN . ';'

    ';'  shift, and go to state 49


State 36

   22 statement: BREAK . ';'

    ';'  shift, and go to state 50


State 37

   23 statement: CONTINUE . ';'

    ';'  shift, and go to state 51


State 38

   26 method_call: CALLOUT . '(' STRING_LITERAL ',' callout_arg ')'
   27            | CALLOUT . '(' STRING_LITERAL ')'

    '('  shift, and go to state 52


State 39

   28 method_name: ID .
   29 location: ID .
   30         | ID . '[' expr ']'

    '['  shift, and go to state 53

    '('       reduce using rule 28 (method_name)
    $default  reduce using rule 29 (location)


State 40

   12 block: '{' '}' .

    $default  reduce using rule 12 (block)


State 41

   24 statement: block .

    $default  reduce using rule 24 (statement)


State 42

   13 block: '{' statement . '}'

    '}'  shift, and go to state 54


State 43

   17 statement: method_call . ';'

    ';'  shift, and go to state 55


State 44

   25 method_call: method_name . '(' ')'

    '('  shift, and go to state 56


State 45

   16 statement: location . ASSIGN_OP expr ';'

    ASSIGN_OP  shift, and go to state 57


State 46

   11 args_decl: type ID ',' args_decl .

    $default  reduce using rule 11 (args_decl)


State 47

   18 statement: IF '(' . expr ')' block ELSE block
   19          | IF '(' . expr ')' block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 66
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 48

   20 statement: FOR ID . '=' expr ',' expr block

    '='  shift, and go to state 73


State 49

   21 statement: RETURN ';' .

    $default  reduce using rule 21 (statement)


State 50

   22 statement: BREAK ';' .

    $default  reduce using rule 22 (statement)


State 51

   23 statement: CONTINUE ';' .

    $default  reduce using rule 23 (statement)


State 52

   26 method_call: CALLOUT '(' . STRING_LITERAL ',' callout_arg ')'
   27            | CALLOUT '(' . STRING_LITERAL ')'

    STRING_LITERAL  shift, and go to state 74


State 53

   30 location: ID '[' . expr ']'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 75
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 54

   13 block: '{' statement '}' .

    $default  reduce using rule 13 (block)


State 55

   17 statement: method_call ';' .

    $default  reduce using rule 17 (statement)


State 56

   25 method_call: method_name '(' . ')'

    ')'  shift, and go to state 76


State 57

   16 statement: location ASSIGN_OP . expr ';'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 77
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 58

   47 bool_literal: TRUE .

    $default  reduce using rule 47 (bool_literal)


State 59

   48 bool_literal: FALSE .

    $default  reduce using rule 48 (bool_literal)


State 60

   49 literal: INT_LITERAL .

    $default  reduce using rule 49 (literal)


State 61

   42 term4: '-' . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 78
    bool_literal  go to state 71
    literal       go to state 72


State 62

   43 term4: '!' . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 79
    bool_literal  go to state 71
    literal       go to state 72


State 63

   44 term4: '(' . expr ')'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 80
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 64

   40 term4: method_call .

    $default  reduce using rule 40 (term4)


State 65

   39 term4: location .

    $default  reduce using rule 39 (term4)


State 66

   18 statement: IF '(' expr . ')' block ELSE block
   19          | IF '(' expr . ')' block
   31 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ')'       shift, and go to state 82


State 67

   32 expr: term1 .
   33 term1: term1 . REL_OP term2

    REL_OP  shift, and go to state 83

    $default  reduce using rule 32 (expr)


State 68

   34 term1: term2 .
   35 term2: term2 . EQ_OP term3

    EQ_OP  shift, and go to state 84

    $default  reduce using rule 34 (term1)


State 69

   36 term2: term3 .
   37 term3: term3 . COND_OP term4

    COND_OP  shift, and go to state 85

    $default  reduce using rule 36 (term2)


State 70

   38 term3: term4 .

    $default  reduce using rule 38 (term3)


State 71

   50 literal: bool_literal .

    $default  reduce using rule 50 (literal)


State 72

   41 term4: literal .

    $default  reduce using rule 41 (term4)


State 73

   20 statement: FOR ID '=' . expr ',' expr block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 86
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 74

   26 method_call: CALLOUT '(' STRING_LITERAL . ',' callout_arg ')'
   27            | CALLOUT '(' STRING_LITERAL . ')'

    ','  shift, and go to state 87
    ')'  shift, and go to state 88


State 75

   30 location: ID '[' expr . ']'
   31 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ']'       shift, and go to state 89


State 76

   25 method_call: method_name '(' ')' .

    $default  reduce using rule 25 (method_call)


State 77

   16 statement: location ASSIGN_OP expr . ';'
   31 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ';'       shift, and go to state 90


State 78

   42 term4: '-' term4 .

    $default  reduce using rule 42 (term4)


State 79

   43 term4: '!' term4 .

    $default  reduce using rule 43 (term4)


State 80

   31 expr: expr . ARITH_OP term1
   44 term4: '(' expr . ')'

    ARITH_OP  shift, and go to state 81
    ')'       shift, and go to state 91


State 81

   31 expr: expr ARITH_OP . term1

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term1         go to state 92
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 82

   18 statement: IF '(' expr ')' . block ELSE block
   19          | IF '(' expr ')' . block

    '{'  shift, and go to state 30

    block  go to state 93


State 83

   33 term1: term1 REL_OP . term2

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term2         go to state 94
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 84

   35 term2: term2 EQ_OP . term3

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term3         go to state 95
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 85

   37 term3: term3 COND_OP . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 96
    bool_literal  go to state 71
    literal       go to state 72


State 86

   20 statement: FOR ID '=' expr . ',' expr block
   31 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ','       shift, and go to state 97


State 87

   26 method_call: CALLOUT '(' STRING_LITERAL ',' . callout_arg ')'

    CALLOUT         shift, and go to state 38
    TRUE            shift, and go to state 58
    FALSE           shift, and go to state 59
    ID              shift, and go to state 39
    STRING_LITERAL  shift, and go to state 98
    INT_LITERAL     shift, and go to state 60
    '-'             shift, and go to state 61
    '!'             shift, and go to state 62
    '('             shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 99
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    callout_arg   go to state 100
    bool_literal  go to state 71
    literal       go to state 72


State 88

   27 method_call: CALLOUT '(' STRING_LITERAL ')' .

    $default  reduce using rule 27 (method_call)


State 89

   30 location: ID '[' expr ']' .

    $default  reduce using rule 30 (location)


State 90

   16 statement: location ASSIGN_OP expr ';' .

    $default  reduce using rule 16 (statement)


State 91

   44 term4: '(' expr ')' .

    $default  reduce using rule 44 (term4)


State 92

   31 expr: expr ARITH_OP term1 .
   33 term1: term1 . REL_OP term2

    REL_OP  shift, and go to state 83

    $default  reduce using rule 31 (expr)


State 93

   18 statement: IF '(' expr ')' block . ELSE block
   19          | IF '(' expr ')' block .

    ELSE  shift, and go to state 101

    $default  reduce using rule 19 (statement)


State 94

   33 term1: term1 REL_OP term2 .
   35 term2: term2 . EQ_OP term3

    EQ_OP  shift, and go to state 84

    $default  reduce using rule 33 (term1)


State 95

   35 term2: term2 EQ_OP term3 .
   37 term3: term3 . COND_OP term4

    COND_OP  shift, and go to state 85

    $default  reduce using rule 35 (term2)


State 96

   37 term3: term3 COND_OP term4 .

    $default  reduce using rule 37 (term3)


State 97

   20 statement: FOR ID '=' expr ',' . expr block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 102
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 98

   46 callout_arg: STRING_LITERAL .

    $default  reduce using rule 46 (callout_arg)


State 99

   31 expr: expr . ARITH_OP term1
   45 callout_arg: expr .

    ARITH_OP  shift, and go to state 81

    $default  reduce using rule 45 (callout_arg)


State 100

   26 method_call: CALLOUT '(' STRING_LITERAL ',' callout_arg . ')'

    ')'  shift, and go to state 103


State 101

   18 statement: IF '(' expr ')' block ELSE . block

    '{'  shift, and go to state 30

    block  go to state 104


State 102

   20 statement: FOR ID '=' expr ',' expr . block
   31 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    '{'       shift, and go to state 30

    block  go to state 105


State 103

   26 method_call: CALLOUT '(' STRING_LITERAL ',' callout_arg ')' .

    $default  reduce using rule 26 (method_call)


State 104

   18 statement: IF '(' expr ')' block ELSE block .

    $default  reduce using rule 18 (statement)


State 105

   20 statement: FOR ID '=' expr ',' expr block .

    $default  reduce using rule 20 (statement)
