Grammar

    0 $accept: program $end

    1 program: CLASS ID '{' field_decl method_decl '}'

    2 field_decl: type fields ';'

    3 fields: field_block
    4       | field_block ',' field_block

    5 field_block: ID
    6            | ID '[' INT_LITERAL ']'

    7 method_decl: type_decl ID '(' args_decl ')' block
    8            | %empty

    9 type_decl: type
   10          | VOID

   11 args_decl: type ID
   12          | type ID ',' args_decl

   13 block: '{' '}'
   14      | '{' statement '}'

   15 type: INT
   16     | BOOLEAN

   17 statement: location ASSIGN_OP expr ';'
   18          | method_call ';'
   19          | IF '(' expr ')' block ELSE block
   20          | IF '(' expr ')' block
   21          | FOR ID '=' expr ',' expr block
   22          | RETURN ';'
   23          | BREAK ';'
   24          | CONTINUE ';'
   25          | block

   26 method_call: method_name '(' ')'
   27            | CALLOUT '(' STRING_LITERAL ',' callout_arg ')'
   28            | CALLOUT '(' STRING_LITERAL ')'

   29 method_name: ID

   30 location: ID
   31         | ID '[' expr ']'

   32 expr: expr ARITH_OP term1
   33     | term1

   34 term1: term1 REL_OP term2
   35      | term2

   36 term2: term2 EQ_OP term3
   37      | term3

   38 term3: term3 COND_OP term4
   39      | term4

   40 term4: location
   41      | method_call
   42      | literal
   43      | '-' term4
   44      | '!' term4
   45      | '(' expr ')'

   46 callout_arg: expr
   47            | STRING_LITERAL

   48 bool_literal: TRUE
   49             | FALSE

   50 literal: INT_LITERAL
   51        | bool_literal


Terminals, with rules where they appear

$end (0) 0
'!' (33) 44
'(' (40) 7 19 20 26 27 28 45
')' (41) 7 19 20 26 27 28 45
',' (44) 4 12 21 27
'-' (45) 43
';' (59) 2 17 18 22 23 24
'=' (61) 21
'[' (91) 6 31
']' (93) 6 31
'{' (123) 1 13 14
'}' (125) 1 13 14
error (256)
INT (258) 15
BOOLEAN (259) 16
IF (260) 19 20
ELSE (261) 19
FOR (262) 21
RETURN (263) 22
BREAK (264) 23
CONTINUE (265) 24
CLASS (266) 1
VOID (267) 10
CALLOUT (268) 27 28
TRUE (269) 48
FALSE (270) 49
ASSIGN_OP (271) 17
ID (272) 1 5 6 7 11 12 21 29 30 31
STRING_LITERAL (273) 27 28 47
ARITH_OP (274) 32
REL_OP (275) 34
EQ_OP (276) 36
COND_OP (277) 38
INT_LITERAL (278) 6 50


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
field_decl (37)
    on left: 2, on right: 1
fields (38)
    on left: 3 4, on right: 2
field_block (39)
    on left: 5 6, on right: 3 4
method_decl (40)
    on left: 7 8, on right: 1
type_decl (41)
    on left: 9 10, on right: 7
args_decl (42)
    on left: 11 12, on right: 7 12
block (43)
    on left: 13 14, on right: 7 19 20 21 25
type (44)
    on left: 15 16, on right: 2 9 11 12
statement (45)
    on left: 17 18 19 20 21 22 23 24 25, on right: 14
method_call (46)
    on left: 26 27 28, on right: 18 41
method_name (47)
    on left: 29, on right: 26
location (48)
    on left: 30 31, on right: 17 40
expr (49)
    on left: 32 33, on right: 17 19 20 21 31 32 45 46
term1 (50)
    on left: 34 35, on right: 32 33 34
term2 (51)
    on left: 36 37, on right: 34 35 36
term3 (52)
    on left: 38 39, on right: 36 37 38
term4 (53)
    on left: 40 41 42 43 44 45, on right: 38 39 43 44
callout_arg (54)
    on left: 46 47, on right: 27
bool_literal (55)
    on left: 48 49, on right: 51
literal (56)
    on left: 50 51, on right: 42


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . ID '{' field_decl method_decl '}'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS ID . '{' field_decl method_decl '}'

    '{'  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS ID '{' . field_decl method_decl '}'

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    field_decl  go to state 8
    type        go to state 9


State 6

   15 type: INT .

    $default  reduce using rule 15 (type)


State 7

   16 type: BOOLEAN .

    $default  reduce using rule 16 (type)


State 8

    1 program: CLASS ID '{' field_decl . method_decl '}'

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    VOID     shift, and go to state 10

    $default  reduce using rule 8 (method_decl)

    method_decl  go to state 11
    type_decl    go to state 12
    type         go to state 13


State 9

    2 field_decl: type . fields ';'

    ID  shift, and go to state 14

    fields       go to state 15
    field_block  go to state 16


State 10

   10 type_decl: VOID .

    $default  reduce using rule 10 (type_decl)


State 11

    1 program: CLASS ID '{' field_decl method_decl . '}'

    '}'  shift, and go to state 17


State 12

    7 method_decl: type_decl . ID '(' args_decl ')' block

    ID  shift, and go to state 18


State 13

    9 type_decl: type .

    $default  reduce using rule 9 (type_decl)


State 14

    5 field_block: ID .
    6            | ID . '[' INT_LITERAL ']'

    '['  shift, and go to state 19

    $default  reduce using rule 5 (field_block)


State 15

    2 field_decl: type fields . ';'

    ';'  shift, and go to state 20


State 16

    3 fields: field_block .
    4       | field_block . ',' field_block

    ','  shift, and go to state 21

    $default  reduce using rule 3 (fields)


State 17

    1 program: CLASS ID '{' field_decl method_decl '}' .

    $default  reduce using rule 1 (program)


State 18

    7 method_decl: type_decl ID . '(' args_decl ')' block

    '('  shift, and go to state 22


State 19

    6 field_block: ID '[' . INT_LITERAL ']'

    INT_LITERAL  shift, and go to state 23


State 20

    2 field_decl: type fields ';' .

    $default  reduce using rule 2 (field_decl)


State 21

    4 fields: field_block ',' . field_block

    ID  shift, and go to state 14

    field_block  go to state 24


State 22

    7 method_decl: type_decl ID '(' . args_decl ')' block

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    args_decl  go to state 25
    type       go to state 26


State 23

    6 field_block: ID '[' INT_LITERAL . ']'

    ']'  shift, and go to state 27


State 24

    4 fields: field_block ',' field_block .

    $default  reduce using rule 4 (fields)


State 25

    7 method_decl: type_decl ID '(' args_decl . ')' block

    ')'  shift, and go to state 28


State 26

   11 args_decl: type . ID
   12          | type . ID ',' args_decl

    ID  shift, and go to state 29


State 27

    6 field_block: ID '[' INT_LITERAL ']' .

    $default  reduce using rule 6 (field_block)


State 28

    7 method_decl: type_decl ID '(' args_decl ')' . block

    '{'  shift, and go to state 30

    block  go to state 31


State 29

   11 args_decl: type ID .
   12          | type ID . ',' args_decl

    ','  shift, and go to state 32

    $default  reduce using rule 11 (args_decl)


State 30

   13 block: '{' . '}'
   14      | '{' . statement '}'

    IF        shift, and go to state 33
    FOR       shift, and go to state 34
    RETURN    shift, and go to state 35
    BREAK     shift, and go to state 36
    CONTINUE  shift, and go to state 37
    CALLOUT   shift, and go to state 38
    ID        shift, and go to state 39
    '{'       shift, and go to state 30
    '}'       shift, and go to state 40

    block        go to state 41
    statement    go to state 42
    method_call  go to state 43
    method_name  go to state 44
    location     go to state 45


State 31

    7 method_decl: type_decl ID '(' args_decl ')' block .

    $default  reduce using rule 7 (method_decl)


State 32

   12 args_decl: type ID ',' . args_decl

    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7

    args_decl  go to state 46
    type       go to state 26


State 33

   19 statement: IF . '(' expr ')' block ELSE block
   20          | IF . '(' expr ')' block

    '('  shift, and go to state 47


State 34

   21 statement: FOR . ID '=' expr ',' expr block

    ID  shift, and go to state 48


State 35

   22 statement: RETURN . ';'

    ';'  shift, and go to state 49


State 36

   23 statement: BREAK . ';'

    ';'  shift, and go to state 50


State 37

   24 statement: CONTINUE . ';'

    ';'  shift, and go to state 51


State 38

   27 method_call: CALLOUT . '(' STRING_LITERAL ',' callout_arg ')'
   28            | CALLOUT . '(' STRING_LITERAL ')'

    '('  shift, and go to state 52


State 39

   29 method_name: ID .
   30 location: ID .
   31         | ID . '[' expr ']'

    '['  shift, and go to state 53

    '('       reduce using rule 29 (method_name)
    $default  reduce using rule 30 (location)


State 40

   13 block: '{' '}' .

    $default  reduce using rule 13 (block)


State 41

   25 statement: block .

    $default  reduce using rule 25 (statement)


State 42

   14 block: '{' statement . '}'

    '}'  shift, and go to state 54


State 43

   18 statement: method_call . ';'

    ';'  shift, and go to state 55


State 44

   26 method_call: method_name . '(' ')'

    '('  shift, and go to state 56


State 45

   17 statement: location . ASSIGN_OP expr ';'

    ASSIGN_OP  shift, and go to state 57


State 46

   12 args_decl: type ID ',' args_decl .

    $default  reduce using rule 12 (args_decl)


State 47

   19 statement: IF '(' . expr ')' block ELSE block
   20          | IF '(' . expr ')' block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 66
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 48

   21 statement: FOR ID . '=' expr ',' expr block

    '='  shift, and go to state 73


State 49

   22 statement: RETURN ';' .

    $default  reduce using rule 22 (statement)


State 50

   23 statement: BREAK ';' .

    $default  reduce using rule 23 (statement)


State 51

   24 statement: CONTINUE ';' .

    $default  reduce using rule 24 (statement)


State 52

   27 method_call: CALLOUT '(' . STRING_LITERAL ',' callout_arg ')'
   28            | CALLOUT '(' . STRING_LITERAL ')'

    STRING_LITERAL  shift, and go to state 74


State 53

   31 location: ID '[' . expr ']'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 75
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 54

   14 block: '{' statement '}' .

    $default  reduce using rule 14 (block)


State 55

   18 statement: method_call ';' .

    $default  reduce using rule 18 (statement)


State 56

   26 method_call: method_name '(' . ')'

    ')'  shift, and go to state 76


State 57

   17 statement: location ASSIGN_OP . expr ';'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 77
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 58

   48 bool_literal: TRUE .

    $default  reduce using rule 48 (bool_literal)


State 59

   49 bool_literal: FALSE .

    $default  reduce using rule 49 (bool_literal)


State 60

   50 literal: INT_LITERAL .

    $default  reduce using rule 50 (literal)


State 61

   43 term4: '-' . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 78
    bool_literal  go to state 71
    literal       go to state 72


State 62

   44 term4: '!' . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 79
    bool_literal  go to state 71
    literal       go to state 72


State 63

   45 term4: '(' . expr ')'

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 80
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 64

   41 term4: method_call .

    $default  reduce using rule 41 (term4)


State 65

   40 term4: location .

    $default  reduce using rule 40 (term4)


State 66

   19 statement: IF '(' expr . ')' block ELSE block
   20          | IF '(' expr . ')' block
   32 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ')'       shift, and go to state 82


State 67

   33 expr: term1 .
   34 term1: term1 . REL_OP term2

    REL_OP  shift, and go to state 83

    $default  reduce using rule 33 (expr)


State 68

   35 term1: term2 .
   36 term2: term2 . EQ_OP term3

    EQ_OP  shift, and go to state 84

    $default  reduce using rule 35 (term1)


State 69

   37 term2: term3 .
   38 term3: term3 . COND_OP term4

    COND_OP  shift, and go to state 85

    $default  reduce using rule 37 (term2)


State 70

   39 term3: term4 .

    $default  reduce using rule 39 (term3)


State 71

   51 literal: bool_literal .

    $default  reduce using rule 51 (literal)


State 72

   42 term4: literal .

    $default  reduce using rule 42 (term4)


State 73

   21 statement: FOR ID '=' . expr ',' expr block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 86
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 74

   27 method_call: CALLOUT '(' STRING_LITERAL . ',' callout_arg ')'
   28            | CALLOUT '(' STRING_LITERAL . ')'

    ','  shift, and go to state 87
    ')'  shift, and go to state 88


State 75

   31 location: ID '[' expr . ']'
   32 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ']'       shift, and go to state 89


State 76

   26 method_call: method_name '(' ')' .

    $default  reduce using rule 26 (method_call)


State 77

   17 statement: location ASSIGN_OP expr . ';'
   32 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ';'       shift, and go to state 90


State 78

   43 term4: '-' term4 .

    $default  reduce using rule 43 (term4)


State 79

   44 term4: '!' term4 .

    $default  reduce using rule 44 (term4)


State 80

   32 expr: expr . ARITH_OP term1
   45 term4: '(' expr . ')'

    ARITH_OP  shift, and go to state 81
    ')'       shift, and go to state 91


State 81

   32 expr: expr ARITH_OP . term1

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term1         go to state 92
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 82

   19 statement: IF '(' expr ')' . block ELSE block
   20          | IF '(' expr ')' . block

    '{'  shift, and go to state 30

    block  go to state 93


State 83

   34 term1: term1 REL_OP . term2

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term2         go to state 94
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 84

   36 term2: term2 EQ_OP . term3

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term3         go to state 95
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 85

   38 term3: term3 COND_OP . term4

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    term4         go to state 96
    bool_literal  go to state 71
    literal       go to state 72


State 86

   21 statement: FOR ID '=' expr . ',' expr block
   32 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    ','       shift, and go to state 97


State 87

   27 method_call: CALLOUT '(' STRING_LITERAL ',' . callout_arg ')'

    CALLOUT         shift, and go to state 38
    TRUE            shift, and go to state 58
    FALSE           shift, and go to state 59
    ID              shift, and go to state 39
    STRING_LITERAL  shift, and go to state 98
    INT_LITERAL     shift, and go to state 60
    '-'             shift, and go to state 61
    '!'             shift, and go to state 62
    '('             shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 99
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    callout_arg   go to state 100
    bool_literal  go to state 71
    literal       go to state 72


State 88

   28 method_call: CALLOUT '(' STRING_LITERAL ')' .

    $default  reduce using rule 28 (method_call)


State 89

   31 location: ID '[' expr ']' .

    $default  reduce using rule 31 (location)


State 90

   17 statement: location ASSIGN_OP expr ';' .

    $default  reduce using rule 17 (statement)


State 91

   45 term4: '(' expr ')' .

    $default  reduce using rule 45 (term4)


State 92

   32 expr: expr ARITH_OP term1 .
   34 term1: term1 . REL_OP term2

    REL_OP  shift, and go to state 83

    $default  reduce using rule 32 (expr)


State 93

   19 statement: IF '(' expr ')' block . ELSE block
   20          | IF '(' expr ')' block .

    ELSE  shift, and go to state 101

    $default  reduce using rule 20 (statement)


State 94

   34 term1: term1 REL_OP term2 .
   36 term2: term2 . EQ_OP term3

    EQ_OP  shift, and go to state 84

    $default  reduce using rule 34 (term1)


State 95

   36 term2: term2 EQ_OP term3 .
   38 term3: term3 . COND_OP term4

    COND_OP  shift, and go to state 85

    $default  reduce using rule 36 (term2)


State 96

   38 term3: term3 COND_OP term4 .

    $default  reduce using rule 38 (term3)


State 97

   21 statement: FOR ID '=' expr ',' . expr block

    CALLOUT      shift, and go to state 38
    TRUE         shift, and go to state 58
    FALSE        shift, and go to state 59
    ID           shift, and go to state 39
    INT_LITERAL  shift, and go to state 60
    '-'          shift, and go to state 61
    '!'          shift, and go to state 62
    '('          shift, and go to state 63

    method_call   go to state 64
    method_name   go to state 44
    location      go to state 65
    expr          go to state 102
    term1         go to state 67
    term2         go to state 68
    term3         go to state 69
    term4         go to state 70
    bool_literal  go to state 71
    literal       go to state 72


State 98

   47 callout_arg: STRING_LITERAL .

    $default  reduce using rule 47 (callout_arg)


State 99

   32 expr: expr . ARITH_OP term1
   46 callout_arg: expr .

    ARITH_OP  shift, and go to state 81

    $default  reduce using rule 46 (callout_arg)


State 100

   27 method_call: CALLOUT '(' STRING_LITERAL ',' callout_arg . ')'

    ')'  shift, and go to state 103


State 101

   19 statement: IF '(' expr ')' block ELSE . block

    '{'  shift, and go to state 30

    block  go to state 104


State 102

   21 statement: FOR ID '=' expr ',' expr . block
   32 expr: expr . ARITH_OP term1

    ARITH_OP  shift, and go to state 81
    '{'       shift, and go to state 30

    block  go to state 105


State 103

   27 method_call: CALLOUT '(' STRING_LITERAL ',' callout_arg ')' .

    $default  reduce using rule 27 (method_call)


State 104

   19 statement: IF '(' expr ')' block ELSE block .

    $default  reduce using rule 19 (statement)


State 105

   21 statement: FOR ID '=' expr ',' expr block .

    $default  reduce using rule 21 (statement)
