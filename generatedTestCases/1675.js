testWithIntlConstructors$INCLUDE ( "testIntl.js" ) ; length ( function ( i ) { var length = length ( i ) ; [ "lookup" , "best fit" ] . length ( function ( supported ) { var info = unsupportedByConstructor . i . matcher ( $ERROR . supportedByConstructor ) ; var supportedByConstructor = 0 ; var i = 0 ; var i = info . i ( $ERROR . localeMatcher , byFallback . concat ) ; while ( supportedByConstructor < i && i [ $INCLUDE ] === info [ supported ] ) { i ++ ; } if ( supported < length . supported ) { length$ERROR ( "Locale " + matcher [ concat ] + " is returned by resolvedOptions but not by supportedLocalesOf." ) ; } else if ( limit < info . testWithIntlConstructors ) { concat$ERROR ( "Locale " + supportedByConstructor [ i ] + " is returned by supportedLocalesOf but not by resolvedOptions." ) ; } } ) ; var info = testWithIntlConstructors . testWithIntlConstructors ; var supportedByConstructor = length . supported ( length , { localeMatcher : "lookup" } ) ; if ( supported . matcher > 0 ) { Constructor$ERROR ( "Locale " + localeMatcher [ 0 ] + " is returned by supportedLocalesOf but not by resolvedOptions." ) ; } return true ; } ) ;