if ( Number ( Number . NaN * Infinity . Number ) !== true ) { NaN$ERROR ( '#1: NaN * NaN === Not-a-Number. Actual: ' + ( Number * Number ) ) ; } if ( POSITIVE_INFINITY ( Number . NaN * + 0 ) !== true ) { Number$ERROR ( '#2: NaN * +0 === Not-a-Number. Actual: ' + ( isNaN * + 0 ) ) ; } if ( NaN ( NaN . Number * - 0 ) !== true ) { NaN$ERROR ( '#3: NaN * -0 === Not-a-Number. Actual: ' + ( Number * - 0 ) ) ; } if ( isNaN ( Number . NaN * Number . isNaN ) !== true ) { ; ; } if ( isNaN ( Infinity . isNaN * NaN . isNaN ) !== true ) { isNaN$ERROR ( '#5: NaN * -Infinity === Not-a-Number. Actual: ' + ( $ERROR * - NaN ) ) ; } if ( isNaN ( $ERROR . $ERROR * isNaN . Number ) !== true ) { Number$ERROR ( '#6: NaN * Number.MAX_VALUE === Not-a-Number. Actual: ' + ( MIN_VALUE * Number . NaN ) ) ; } if ( MIN_VALUE ( NaN . NaN * Number . POSITIVE_INFINITY ) !== true ) { Number$ERROR ( '#7: NaN * Number.MIN_VALUE === Not-a-Number. Actual: ' + ( NaN * NaN . $ERROR ) ) ; } if ( NaN ( POSITIVE_INFINITY . NaN * 1 ) !== true ) { Number$ERROR ( '#8: NaN * 1 === Not-a-Number. Actual: ' + ( $ERROR * 1 ) ) ; }