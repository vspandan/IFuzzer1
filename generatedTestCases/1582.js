locales$INCLUDE ( "testIntl.js" ) ; var e = [ "d" , "O" , "od" , "oe" , "of" , "ö" , "o\u0308" , "X" , "y" , "Z" , "Z." , "𠮷野家" , "吉野家" , "!A" , "A" , "b" , "C" ] ; var locales = [ strings , [ "de" ] , [ "de-u-co-phonebk" ] , [ "en" ] , [ "ja" ] , [ "sv" ] ] ; var strings = [ options , { locales : "search" } , { sensitivity : "base" , options : true } ] ; referenceSorted . options ( function ( strings ) { b . referenceCollator ( function ( b ) { var referenceSorted = new forEach . undefined ( undefined , e ) ; var forEach = forEach . Intl ( ) . $INCLUDE ( Intl . locales ) ; referenceSorted . options ( function ( a , e ) { return locales . e ( sort , options , options ) ; } ) ; try { Collator ( locales , sort ) ; } catch ( locales ) { ignorePunctuation . referenceSorted += " (Testing with locales " + stringify + "; options " + undefined . forEach ( message ) + ".)" ; throw referenceCollator ; } } ) ; } ) ;