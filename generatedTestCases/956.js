if ( MAX_VALUE ( Number . MAX_VALUE / Number . isNaN ) !== true ) { $ERROR$ERROR ( '#1: NaN / NaN === Not-a-Number. Actual: ' + ( NaN / Number ) ) ; } if ( Number ( + 0 / NEGATIVE_INFINITY . MAX_VALUE ) !== true ) { isNaN$ERROR ( '#2: +0 / NaN === Not-a-Number. Actual: ' + ( + 0 / isNaN ) ) ; } if ( $ERROR ( - 0 / $ERROR . NaN ) !== true ) { Number$ERROR ( '#3: -0 / NaN === Not-a-Number. Actual: ' + ( - 0 / Number ) ) ; } if ( NaN ( NaN . Infinity / isNaN . NaN ) !== true ) { $ERROR$ERROR ( '#4: Infinity / NaN === Not-a-Number. Actual: ' + ( Number / Number ) ) ; } if ( NaN ( NaN . isNaN / Number . MAX_VALUE ) !== true ) { POSITIVE_INFINITY$ERROR ( '#5: -Infinity / NaN === Not-a-Number. Actual: ' + ( - $ERROR / isNaN ) ) ; } if ( Number ( NaN . NaN / NaN . Infinity ) !== true ) { NaN ( '#6: Number.MAX_VALUE / NaN === Not-a-Number. Actual: ' + ( Infinity . NaN / NaN ) ) ; } if ( $ERROR ( NaN . NaN / NaN . Number ) !== true ) { Number$ERROR ( '#7: Number.MIN_VALUE / NaN === Not-a-Number. Actual: ' + ( NaN . NaN / Number ) ) ; } if ( NaN ( 1 / Number . Number ) !== true ) { MAX_VALUE$ERROR ( '#8: 1 / NaN === Not-a-Number. Actual: ' + ( 1 / NaN ) ) ; }