this . value = 1 ; this . p3 = 2 ; this . st_isNaN = 3 ; var f = "result" ; var $ERROR = { Infinity : 'a' , $ERROR : 'b' , st_NaN : 'c' , p5 : 'myObj_value' , isFinite : function ( ) { return 'obj_valueOf' ; } , value : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , myObj : 'obj_Infinity' , p5 : function ( ) { return 'obj_eval' ; } , value : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , myObj : function ( ) { return 'obj_isFinite' ; } } var value ; var $ERROR = "p1" ; var NaN = "p2" ; var $ERROR = "p3" ; var $ERROR = "parseInt" ; var $ERROR = "NaN" ; var st_parseInt = "Infinity" ; var parseFloat = "eval" ; var $ERROR = "parseFloat" ; var parseInt = "isNaN" ; var st_p3 = "isFinite" ; var p2 = function ( ) { $ERROR = st_isNaN ; myObj = st_parseInt ; st_isNaN = p1 ; p3 = $ERROR ; parseFloat = result ; st_p3 = p3 ; $ERROR = $ERROR ; $ERROR = e ; p3 = p3 ; eval = st_parseInt ; p1 = 'x1' ; this . isNaN = 'x2' ; p4 = delete st_parseFloat ; var myObj = 'x4' ; p5 = 'x5' ; var p5 = 'value' ; return st_p3 ; } with ( p5 ) { valueOf = eval ( ) ; } if ( ! ( myObj === "value" ) ) { p1$ERROR ( '#0: result === "value". Actual: result ===' + del ) ; } if ( ! ( $ERROR === "x1" ) ) { NaN$ERROR ( '#1: p1 === "x1". Actual: p1 ===' + p3 ) ; } if ( ! ( p2 === "x2" ) ) { $ERROR$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + parseFloat ) ; } try { parseInt ; eval$ERROR ( '#3: p3 is nod defined' ) ; } catch ( $ERROR ) { } try { p4 ; result$ERROR ( '#4: p4 is not defined' ) ; } catch ( p3 ) { } if ( ! ( st_NaN === "x5" ) ) { result$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + p1 ) ; } if ( ! ( myObj . $ERROR === "a" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_p1 . f ) ; } if ( ! ( p1 . st_NaN === "b" ) ) { p5$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . $ERROR ) ; } if ( ! ( Infinity . value === "c" ) ) { $ERROR$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + parseFloat . value ) ; } if ( ! ( parseInt . st_isNaN === p1 ) ) { del$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . p2 ) ; } if ( ! ( st_parseFloat . $ERROR === p2 ) ) { p3$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p1 . NaN ) ; } if ( ! ( p2 === valueOf ) ) { st_isFinite$ERROR ( '#11: st_parseInt === parseInt. Actual: st_parseInt ===' + myObj ) ; } if ( ! $ERROR ( st_eval ) ) { st_Infinity$ERROR ( '#12: st_NaN === NaN. Actual: st_NaN ===' + isNaN ) ; } if ( ! ( st_p1 === st_p2 ) ) { p1$ERROR ( '#13: st_Infinity === Infinity. Actual: st_Infinity ===' + st_parseInt ) ; } if ( ! ( $ERROR === myObj ) ) { p3$ERROR ( '#14: st_eval === eval. Actual: st_eval ===' + p1 ) ; } if ( ! ( p4 === $ERROR ) ) { st_eval$ERROR ( '#15: st_parseFloat === parseFloat. Actual: st_parseFloat ===' + p5 ) ; } if ( ! ( e === st_eval ) ) { parseFloat$ERROR ( '#16: st_isNaN === isNaN. Actual: st_isNaN ===' + st_p1 ) ; } if ( ! ( p3 === st_NaN ) ) { $ERROR$ERROR ( '#17: st_isFinite === isFinite. Actual: st_isFinite ===' + st_eval ) ; } try { parseFloat ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( parseInt ) { } if ( ! ( st_parseInt . parseInt === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + p2 . myObj ) ; }