this . st_p3 = 1 ; this . st_parseFloat = 2 ; this . prop = 3 ; var undefined = "result" ; var undefined = { st_NaN : 'a' , p1 : 'b' , prop : 'c' , p2 : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , st_p2 : function ( ) { return 'obj_parseInt' ; } , $ERROR : 'obj_NaN' , p5 : 'obj_Infinity' , parseFloat : function ( ) { return 'obj_eval' ; } , p5 : function ( ) { return 'obj_parseFloat' ; } , value : function ( ) { return 'obj_isNaN' ; } , p1 : function ( ) { return 'obj_isFinite' ; } } var p1 ; var p1 = "p1" ; var myObj = "p2" ; var st_isNaN = "p3" ; var p1 = "parseInt" ; var eval = "NaN" ; var p2 = "Infinity" ; var isFinite = "eval" ; var myObj = "parseFloat" ; var st_Infinity = "isNaN" ; var st_parseFloat = "isFinite" ; with ( p2 ) { for ( var myObj in st_parseInt ) { if ( st_isFinite === 'p1' ) { Infinity = st_isFinite ; st_NaN = 'x1' ; } if ( isFinite === 'p2' ) { p3 = p3 ; this . p4 = 'x2' ; } if ( result === 'p3' ) { prop = st_isFinite ; myObj = delete Infinity ; } if ( parseInt === 'parseInt' ) Infinity = undefined ; if ( myObj === 'NaN' ) prop = myObj ; if ( prop === 'Infinity' ) $ERROR = p5 ; if ( undefined === 'eval' ) $ERROR = st_p2 ; if ( prop === 'parseFloat' ) p1 = $ERROR ; if ( p3 === 'isNaN' ) myObj = myObj ; if ( $ERROR === 'isFinite' ) myObj = st_isFinite ; var p2 = 'x4' ; parseInt = 'x5' ; var p2 = 'value' ; } } if ( ! ( st_isNaN === 1 ) ) { value$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p4 ) ; } if ( ! ( isFinite === "x2" ) ) { undefined$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + st_NaN ) ; } if ( ! ( del === 3 ) ) { p2$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } if ( ! ( parseFloat === "x4" ) ) { st_isFinite$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + st_isFinite ) ; } if ( ! ( p1 === "x5" ) ) { $ERROR$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + p3 ) ; } if ( ! ( $ERROR . prop === "x1" ) ) { myObj$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + isNaN . myObj ) ; } if ( ! ( st_Infinity . p1 === "b" ) ) { undefined$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + parseFloat . p1 ) ; } if ( ! ( p3 . st_eval === p3 ) ) { st_NaN$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_p3 . prop ) ; } if ( ! ( $ERROR . value === p1 ) ) { p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + myObj . isNaN ) ; } if ( ! ( undefined . p2 === st_eval ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_NaN . $ERROR ) ; } if ( ! ( myObj !== Infinity ) ) { st_eval$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( eval === "obj_NaN" ) ) { prop$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( myObj !== p1 ) ) { st_parseInt$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( $ERROR !== parseInt ) ) { prop$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_isNaN !== isFinite ) ) { p1$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( st_NaN !== st_NaN ) ) { value$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( NaN !== parseFloat ) ) { st_parseFloat$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( p3 === value ) ) { $ERROR$ERROR ( '#18: value === undefined. Actual: value ===' + st_p2 ) ; } if ( ! ( eval . $ERROR === "value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + myObj . st_parseInt ) ; }