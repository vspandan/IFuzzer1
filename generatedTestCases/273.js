this . p2 = 1 ; this . st_eval = 2 ; this . st_parseInt = 3 ; var st_isFinite = "result" ; var $ERROR = { myObj : 'a' , st_NaN : 'b' , p3 : 'c' , st_eval : 'myObj_value' , value : function ( ) { return 'obj_valueOf' ; } , st_isNaN : function ( ) { return 'obj_parseInt' ; } , p3 : 'obj_NaN' , st_NaN : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , myObj : function ( ) { return 'obj_parseFloat' ; } , value : function ( ) { return 'obj_isNaN' ; } , isNaN : function ( ) { return 'obj_isFinite' ; } } var parseFloat ; var p5 = "p1" ; var p4 = "p2" ; var p1 = "p3" ; var $ERROR = "parseInt" ; var p2 = "NaN" ; var value = "Infinity" ; var isFinite = "eval" ; var st_eval = "parseFloat" ; var myObj = "isNaN" ; var undefined = "isFinite" ; try { do { with ( st_Infinity ) { throw isFinite ; undefined = st_NaN ; st_parseFloat = $ERROR ; $ERROR = st_eval ; st_isFinite = NaN ; myObj = p2 ; $ERROR = $ERROR ; $ERROR = e ; value = myObj ; st_p1 = p1 ; st_isFinite = myObj ; result = 'x1' ; this . myObj = 'x2' ; $ERROR = delete parseFloat ; var st_parseInt = 'x4' ; undefined = 'x5' ; var undefined = 'value' ; } } while ( false ) ; } catch ( p1 ) { p2 = eval ; } if ( ! ( st_isFinite === "myObj_value" ) ) { isFinite$ERROR ( '#0: result === "myObj_value". Actual: result ===' + st_parseFloat ) ; } if ( ! ( $ERROR === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + value ) ; } if ( ! ( st_NaN === 2 ) ) { myObj$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p4 ) ; } if ( ! ( parseInt === 3 ) ) { undefined$ERROR ( '#3: p3 === 3. Actual: p3 ===' + result ) ; } if ( ! ( p3 === $ERROR ) ) { value$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + p5 ) ; } try { st_parseFloat ; $ERROR$ERROR ( '#5: p5 is not defined' ) ; } catch ( p2 ) { } if ( ! ( result . p2 === "a" ) ) { p4$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_Infinity . isNaN ) ; } if ( ! ( undefined . p4 === "b" ) ) { st_NaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p2 . parseInt ) ; } if ( ! ( st_isNaN . p3 === "c" ) ) { myObj$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p2 . p3 ) ; } if ( ! ( value . Infinity === result ) ) { p3$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . myObj ) ; } if ( ! ( eval . undefined === $ERROR ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + eval . $ERROR ) ; } if ( ! ( parseInt === "parseInt" ) ) { value ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + myObj . value ) ; } if ( ! ( p1 === "NaN" ) ) { st_isFinite$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + value ) ; } if ( ! ( isNaN === "Infinity" ) ) { del$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + p1 ) ; } if ( ! ( p5 === "eval" ) ) { $ERROR$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p2 ) ; } if ( ! ( $ERROR === "parseFloat" ) ) { p4$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( undefined === "isNaN" ) ) { $ERROR$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + result ) ; } if ( ! ( st_isNaN === "isFinite" ) ) { myObj$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + p1 ) ; } if ( ! ( st_Infinity === p4 ) ) { p3$ERROR ( '#18: value === undefined. Actual: value ===' + myObj ) ; } if ( ! ( parseInt . isNaN === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_Infinity . p1 ) ; }