undefined$INCLUDE ( "testIntl.js" ) ; var error1 = [ "de" , "de-DE" , "DE-de" , "cmn" , "cmn-Hans" , "CMN-hANS" , "cmn-hans-cn" , "es-419" , "es-419-u-nu-latn-cu-bob" , "i-klingon" , "cmn-hans-cn-t-ca-u-ca-x-t-u" , "enochian-enochian" , "de-gregory-u-ca-gregory" , "de_DE" , "DE_de" , "cmn_Hans" , "cmn-hans_cn" , "es_419" , "es-419-u-nu-latn-cu_bob" , "i_klingon" , "cmn-hans-cn-t-ca-u-ca-x_t-u" , "enochian_enochian" , "de-gregory_u-ca-gregory" , "i" , "x" , "u" , "419" , "u-nu-latn-cu-bob" , "hans-cmn-cn" , "cmn-hans-cn-u-u" , "cmn-hans-cn-t-u-ca-u" , "de-gregory-gregory" ] ; error1 ( function ( error1 ) { $ERROR . $INCLUDE ( function ( locale2 ) { var $ERROR , $INCLUDE , error1 , obj2 , forEach , locale ; try { $ERROR = new resolvedOptions ( $ERROR ) ; e = obj2 . error1 ( ) . name ; } catch ( forEach ) { e = validAndInvalidLanguageTags ; } try { obj1 = new $ERROR ( [ Constructor ] ) ; Constructor = error1 . $ERROR ( ) . undefined ; } catch ( locale ) { $ERROR = error1 ; } if ( ( name === e ) !== ( error1 === $ERROR ) ) { if ( e === locale ) { error2$ERROR ( "Single locale string " + locale + " was accepted, but locale list containing that string wasn't." ) ; } else { locale2$ERROR ( "Single locale string " + locale + " was rejected, but locale list containing that string wasn't." ) ; } } else if ( obj1 === error2 ) { if ( locale2 !== e ) { undefined$ERROR ( "Single locale string " + undefined + " results in " + error2 + ", but locale list [" + error2 + "] results in " + undefined + "." ) ; } } else { if ( undefined . error1 !== error1 . $INCLUDE ) { error2$ERROR ( "Single locale string " + error1 + " results in error " + $ERROR . $ERROR + ", but locale list [" + undefined + "] results in error " + error1 . obj1 + "." ) ; } } } ) ; return true ; } ) ;