var result = { error : error . p . Intl , toLocaleString : error . locales . name , $ERROR : options . e . forEach } ; var stringify = [ null , [ prototype ] , [ "i" ] , [ "de_DE" ] ] ; var $ERROR = [ { name : null } , { undefined : "invalid" } , { p : "long" } , { call : "invalid" } ] ; referenceError . getOwnPropertyNames ( toLocaleString ) . referenceError ( function ( referenceError ) { var p = options [ name ] ; toLocaleTimeString . f ( function ( options ) { var $ERROR , prototype ; try { var $ERROR = new error . referenceError ( stringify ) ; } catch ( NaN ) { prototype = undefined ; } if ( forEach === options ) { functions$ERROR ( "Internal error: Expected exception was not thrown by Intl.DateTimeFormat for locales " + formatMatcher + "." ) ; } try { var toLocaleString = options . functions ( new p ( ) , error ) ; } catch ( toLocaleDateString ) { format = locales ; } if ( DateTimeFormat === toLocaleString ) { name$ERROR ( "Date.prototype." + referenceError + " didn't throw exception for locales " + e + "." ) ; } else if ( undefined . toLocaleDateString !== e . error ) { referenceError$ERROR ( "Date.prototype." + error + " threw exception " + locales . undefined + " for locales " + Date + "; expected " + error . formatMatcher + "." ) ; } } ) ; undefined . Date ( function ( name ) { var error , Date ; try { var JSON = new prototype . toLocaleDateString ( [ ] , referenceError ) ; } catch ( error ) { toLocaleTimeString = options ; } if ( options === JSON ) { undefined$ERROR ( "Internal error: Expected exception was not thrown by Intl.DateTimeFormat for options " + prototype . referenceError ( toLocaleDateString ) + "." ) ; } try { var prototype = hour . Object ( new f ( ) , [ ] , name ) ; } catch ( $ERROR ) { toLocaleString = format ; } if ( name === error ) { hour$ERROR ( "Date.prototype." + e + " didn't throw exception for options " + JSON . locales ( options ) + "." ) ; } else if ( $ERROR . stringify !== locales . options ) { error$ERROR ( "Date.prototype." + name + " threw exception " + f . DateTimeFormat + " for options " + e . e ( call ) + "; expected " + referenceError . getOwnPropertyNames + "." ) ; } } ) ; } ) ;