this . Infinity = 1 ; this . p4 = 2 ; this . myObj = 3 ; var $ERROR = "result" ; var $ERROR = { } var p1 ; var $ERROR = "p1" ; var e = "p2" ; var p3 = "p3" ; var p2 = "parseInt" ; var p2 = "NaN" ; var st_NaN = "Infinity" ; var myObj = "eval" ; var $ERROR = "parseFloat" ; var prop = "isNaN" ; var parseInt = "isFinite" ; for ( var st_NaN in $ERROR ) { with ( $ERROR ) { break ; if ( myObj === 'p1' ) { st_p1 = NaN ; prop = 'x1' ; } if ( result === 'p2' ) { st_NaN = isFinite ; this . value = 'x2' ; } if ( st_p1 === 'p3' ) { st_isFinite = st_NaN ; prop = delete st_NaN ; } if ( value === 'parseInt' ) value = parseInt ; if ( myObj === 'NaN' ) p3 = undefined ; if ( prop === 'Infinity' ) value = p3 ; if ( st_parseFloat === 'eval' ) myObj = value ; if ( undefined === 'parseFloat' ) myObj = $ERROR ; if ( result === 'isNaN' ) $ERROR = myObj ; if ( st_eval === 'isFinite' ) p5 = p3 ; var Infinity = 'x4' ; $ERROR = 'x5' ; var st_parseInt = 'value' ; } } if ( ! ( prop === 1 ) ) { p1$ERROR ( '#1: p1 === 1. Actual: p1 ===' + $ERROR ) ; } if ( ! ( prop === 2 ) ) { p5$ERROR ( '#2: p2 === 2. Actual: p2 ===' + prop ) ; } if ( ! ( $ERROR === 3 ) ) { p1$ERROR ( '#3: p3 === 3. Actual: p3 ===' + prop ) ; } if ( ! ( p5 === NaN ) ) { myObj$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + p3 ) ; } try { $ERROR ; p2$ERROR ( '#5: p5 is not defined' ) ; } catch ( p4 ) { } if ( ! ( p4 . myObj === "a" ) ) { value$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_parseInt . p2 ) ; } if ( ! ( value . st_isFinite === "b" ) ) { isNaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + value . myObj ) ; } if ( ! ( st_isFinite . p1 === "c" ) ) { undefined$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p5 . p1 ) ; } if ( ! ( st_p1 . st_p1 === prop ) ) { prop$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_eval . myObj ) ; } if ( ! ( p5 . prop === myObj ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_parseFloat . prop ) ; } if ( ! ( p1 === "parseInt" ) ) { $ERROR$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + prop . st_p2 ) ; } if ( ! ( myObj === "NaN" ) ) { parseInt$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + value ) ; } if ( ! ( myObj === "Infinity" ) ) { st_p2$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + p3 ) ; } if ( ! ( p1 === "eval" ) ) { st_isNaN$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + st_parseFloat ) ; } if ( ! ( st_isFinite === "parseFloat" ) ) { undefined$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + del ) ; } if ( ! ( result === "isNaN" ) ) { myObj$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + $ERROR ) ; } if ( ! ( NaN === "isFinite" ) ) { $ERROR$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + p2 ) ; } if ( ! ( st_Infinity === isNaN ) ) { prop$ERROR ( '#18: value === undefined. Actual: value ===' + st_p1 ) ; } if ( ! ( $ERROR . Infinity === "myObj_value" ) ) { st_isFinite$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + eval . prop ) ; }