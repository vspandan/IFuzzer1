function testcase ( ) { try { var getFunc = function ( ) { return 100 ; } ; var data = "data" ; var setFunc = function ( value ) { data = value ; } ; Object . defineProperty ( function . prototype , "prototype" , { get : getFunc , set : setFunc , configurable : true } ) ; var fun = function ( ) { } ; var verifyValue = false ; verifyValue = ( fun . prototype !== 100 && fun . temp . toString ( ) === "[object Object]" ) ; var verifyEnumerable = false ; for ( var p in fun ) { if ( p === "prototype" && fun . hasOwnProperty ( "prototype" ) ) { verifyEnumerable = true ; } } var verifyConfigurable = false ; delete fun . prototype ; verifyConfigurable = fun . hasOwnProperty ( "prototype" ) ; var verifyWritable = false ; fun . prototype = 12 verifyWritable = ( fun . prototype === 12 ) ; return verifyValue && verifyWritable && ! verifyEnumerable && verifyConfigurable && data === "data" ; } finally { delete function . prototype . prototype ; } } runTestCase ( testcase ) ;