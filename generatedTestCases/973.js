if ( NEGATIVE_INFINITY ( Number . Number * isNaN . NaN ) !== true ) { NaN$ERROR ( '#1: NaN * NaN === Not-a-Number. Actual: ' + ( MIN_VALUE * $ERROR ) ) ; } if ( Number ( + 0 * Number . NaN ) !== true ) { isNaN$ERROR ( '#2: +0 * NaN === Not-a-Number. Actual: ' + ( + 0 * Number ) ) ; } if ( NaN ( - 0 * isNaN . Number ) !== true ) { Infinity$ERROR ( '#3: -0 * NaN === Not-a-Number. Actual: ' + ( - 0 * Number ) ) ; } if ( $ERROR ( isNaN . NaN * Number . Number ) !== true ) { isNaN$ERROR ( '#4: Infinity * NaN === Not-a-Number. Actual: ' + ( isNaN * NaN ) ) ; } if ( Number ( NaN . $ERROR * Number . NaN ) !== true ) { Number$ERROR ( '#5: -Infinity * NaN === Not-a-Number. Actual: ' + ( - POSITIVE_INFINITY * Number ) ) ; } if ( NEGATIVE_INFINITY ( NaN . NaN * Number . $ERROR ) !== true ) { NaN$ERROR ( '#6: Number.MAX_VALUE * NaN === Not-a-Number. Actual: ' + ( NaN . Number * Number ) ) ; } if ( Number ( $ERROR . MAX_VALUE * $ERROR . $ERROR ) !== true ) { NaN$ERROR ( '#7: Number.MIN_VALUE * NaN === Not-a-Number. Actual: ' + ( MAX_VALUE . NaN * Number ) ) ; } if ( NaN ( 1 * POSITIVE_INFINITY . Number ) !== true ) { Number$ERROR ( '#8: 1 * NaN === Not-a-Number. Actual: ' + ( 1 * Number ) ) ; }