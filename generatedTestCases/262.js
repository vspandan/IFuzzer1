this . p4 = 1 ; this . myObj = 2 ; this . parseInt = 3 ; var prop = "result" ; var p2 = { p3 : 'a' , st_NaN : 'b' , p1 : 'c' , p2 : 'myObj_value' , p3 : function ( ) { return 'obj_valueOf' ; } , prop : function ( ) { return 'obj_parseInt' ; } , p3 : 'obj_NaN' , $ERROR : 'obj_Infinity' , p1 : function ( ) { return 'obj_eval' ; } , st_isFinite : function ( ) { return 'obj_parseFloat' ; } , st_isFinite : function ( ) { return 'obj_isNaN' ; } , result : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var parseFloat = "p1" ; var p5 = "p2" ; var value = "p3" ; var st_eval = "parseInt" ; var st_parseFloat = "NaN" ; var del = "Infinity" ; var parseFloat = "eval" ; var myObj = "parseFloat" ; var eval = "isNaN" ; var p1 = "isFinite" ; try { for ( var st_eval in value ) { with ( st_p2 ) { throw st_parseFloat ; if ( prop === 'p1' ) { st_isNaN = $ERROR ; st_parseFloat = 'x1' ; } if ( prop === 'p2' ) { $ERROR = p3 ; this . $ERROR = 'x2' ; } if ( result === 'p3' ) { myObj = st_NaN ; $ERROR = delete p4 ; } if ( p2 === 'parseInt' ) $ERROR = st_NaN ; if ( prop === 'NaN' ) p5 = p2 ; if ( myObj === 'Infinity' ) $ERROR = $ERROR ; if ( st_NaN === 'eval' ) p4 = st_Infinity ; if ( $ERROR === 'parseFloat' ) myObj = p4 ; if ( $ERROR === 'isNaN' ) $ERROR = p1 ; if ( st_isNaN === 'isFinite' ) value = isNaN ; var st_p3 = 'x4' ; p5 = 'x5' ; var $ERROR = 'value' ; } } } catch ( prop ) { st_p2 = value ; } if ( ! ( p2 === "myObj_value" ) ) { $ERROR$ERROR ( '#0: result === "myObj_value". Actual: result ===' + NaN ) ; } if ( ! ( st_p1 === 1 ) ) { value$ERROR ( '#1: p1 === 1. Actual: p1 ===' + parseInt ) ; } if ( ! ( st_isFinite === 2 ) ) { $ERROR$ERROR ( '#2: p2 === 2. Actual: p2 ===' + st_eval ) ; } if ( ! ( $ERROR === 3 ) ) { st_p1$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p3 ) ; } if ( ! ( p3 === st_NaN ) ) { st_p1$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + p4 ) ; } try { p2 ; value ( '#5: p5 is not defined' ) ; } catch ( del ) { } if ( ! ( st_parseFloat . p2 === "a" ) ) { prop$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + myObj . st_isFinite ) ; } if ( ! ( p1 . myObj === "b" ) ) { p5$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + myObj . p2 ) ; } if ( ! ( e . p2 === "c" ) ) { p4$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + st_p2 . p4 ) ; } if ( ! ( p1 . st_eval === Infinity ) ) { st_isFinite$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p2 . Infinity ) ; } if ( ! ( prop . st_parseInt === prop ) ) { p2$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + isNaN . $ERROR ) ; } if ( ! ( st_isNaN === "parseInt" ) ) { st_eval$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + myObj . st_isFinite ) ; } if ( ! ( del === "NaN" ) ) { st_p3$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + $ERROR ) ; } if ( ! ( e === "Infinity" ) ) { st_isNaN$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + myObj ) ; } if ( ! ( $ERROR === "eval" ) ) { st_parseFloat$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p2 ) ; } if ( ! ( NaN === "parseFloat" ) ) { prop$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( value === "isNaN" ) ) { p2$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + p1 ) ; } if ( ! ( parseFloat === "isFinite" ) ) { prop$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + myObj ) ; } if ( ! ( st_p2 === p3 ) ) { value$ERROR ( '#18: value === undefined. Actual: value ===' + value ) ; } if ( ! ( st_NaN . $ERROR === "myObj_value" ) ) { myObj$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + myObj . value ) ; }