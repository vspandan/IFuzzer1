this . del = 1 ; this . st_isNaN = 2 ; this . p2 = 3 ; var NaN = "result" ; var e = { p2 : 'a' , del : 'b' , value : 'c' , NaN : 'myObj_value' , valueOf : function ( ) { return 'obj_valueOf' ; } , st_eval : function ( ) { return 'obj_parseInt' ; } , p2 : 'obj_NaN' , p2 : 'obj_Infinity' , st_parseInt : function ( ) { return 'obj_eval' ; } , Infinity : function ( ) { return 'obj_parseFloat' ; } , st_p2 : function ( ) { return 'obj_isNaN' ; } , st_Infinity : function ( ) { return 'obj_isFinite' ; } } var p1 ; var myObj = "p1" ; var p5 = "p2" ; var st_Infinity = "p3" ; var p1 = "parseInt" ; var value = "NaN" ; var parseFloat = "Infinity" ; var myObj = "eval" ; var $ERROR = "parseFloat" ; var parseFloat = "isNaN" ; var myObj = "isFinite" ; try { with ( NaN ) { do { throw st_isNaN ; myObj = $ERROR ; p2 = myObj ; $ERROR = $ERROR ; value = myObj ; p3 = st_isFinite ; $ERROR = p1 ; $ERROR = myObj ; st_parseFloat = p1 ; e = myObj ; p4 = p1 ; del = 'x1' ; this . $ERROR = 'x2' ; myObj = delete st_p3 ; var parseFloat = 'x4' ; p5 = 'x5' ; var undefined = 'value' ; } while ( false ) ; } } catch ( myObj ) { st_parseFloat = st_isFinite ; } if ( ! ( myObj === "myObj_value" ) ) { value$ERROR ( '#0: result === "myObj_value". Actual: result ===' + result ) ; } if ( ! ( st_NaN === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + e ) ; } if ( ! ( value === 2 ) ) { e$ERROR ( '#2: p2 === 2. Actual: p2 ===' + $ERROR ) ; } if ( ! ( $ERROR === 3 ) ) { st_Infinity$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } if ( ! ( parseInt === p3 ) ) { p3$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + $ERROR ) ; } try { value ; $ERROR$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_isFinite ) { } if ( ! ( p1 . myObj === "a" ) ) { st_isFinite$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + myObj . e ) ; } if ( ! ( p2 . Infinity === "b" ) ) { st_Infinity$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + e . p1 ) ; } if ( ! ( myObj . p1 === "c" ) ) { result$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p4 . myObj ) ; } if ( ! ( myObj . value === $ERROR ) ) { st_p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_Infinity . $ERROR ) ; } if ( ! ( e . Infinity === p2 ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . isNaN ) ; } if ( ! ( st_p1 === "parseInt" ) ) { st_parseFloat$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + st_eval . p1 ) ; } if ( ! ( st_eval === "NaN" ) ) { st_eval$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + e ) ; } if ( ! ( st_eval === "Infinity" ) ) { p1$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + value ) ; } if ( ! ( st_parseFloat === "eval" ) ) { value$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p1 ) ; } if ( ! ( NaN === "parseFloat" ) ) { st_eval$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + myObj ) ; } if ( ! ( $ERROR === "isNaN" ) ) { value$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + p1 ) ; } if ( ! ( valueOf === "isFinite" ) ) { st_p1$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + $ERROR ) ; } if ( ! ( e === myObj ) ) { $ERROR$ERROR ( '#18: value === undefined. Actual: value ===' + $ERROR ) ; } if ( ! ( parseFloat . parseFloat === "myObj_value" ) ) { p5$ERROR ( ) ; }