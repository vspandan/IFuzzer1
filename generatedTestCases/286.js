this . $ERROR = 1 ; this . p4 = 2 ; this . p1 = 3 ; var st_parseFloat = "result" ; var p2 = { p3 : 'a' , st_Infinity : 'b' , p2 : 'c' , obj : 'myObj_value' , p2 : function ( ) { return 'obj_valueOf' ; } , p1 : function ( ) { return 'obj_parseInt' ; } , undefined : 'obj_NaN' , undefined : 'obj_Infinity' , p2 : function ( ) { return 'obj_eval' ; } , Infinity : function ( ) { return 'obj_parseFloat' ; } , p2 : function ( ) { return 'obj_isNaN' ; } , p1 : function ( ) { return 'obj_isFinite' ; } } var undefined ; var f = "p1" ; var myObj = "p2" ; var st_isNaN = "p3" ; var myObj = "parseInt" ; var p3 = "NaN" ; var st_p2 = "Infinity" ; var Infinity = "eval" ; var eval = "parseFloat" ; var p4 = "isNaN" ; var $ERROR = "isFinite" ; try { with ( $ERROR ) { var $ERROR = function ( ) { value = value ; myObj = e ; Infinity = undefined ; p1 = result ; myObj = p1 ; p3 = p2 ; result = eval ; st_Infinity = p4 ; st_isNaN = st_isFinite ; del = myObj ; st_eval = 'x1' ; this . p1 = 'x2' ; undefined = delete st_p3 ; var undefined = 'x4' ; p1 = 'x5' ; var isNaN = 'value' ; throw st_NaN ; } var $ERROR = new e ( ) ; } } catch ( st_parseFloat ) { $ERROR = NaN ; } if ( ! ( p3 === "value" ) ) { isNaN$ERROR ( '#0: result === "value". Actual: result ===' + p1 ) ; } if ( ! ( st_NaN === 1 ) ) { value$ERROR ( '#1: p1 === 1. Actual: p1 ===' + myObj ) ; } if ( ! ( $ERROR === 2 ) ) { p5$ERROR ( '#2: p2 === 2. Actual: p2 ===' + isFinite ) ; } if ( ! ( $ERROR === 3 ) ) { valueOf$ERROR ( '#3: p3 === 3. Actual: p3 ===' + result ) ; } try { p5 ; eval$ERROR ( '#4: p4 is not defined' ) ; } catch ( e ) { } if ( ! ( $ERROR === "x5" ) ) { p5$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + $ERROR ) ; } if ( ! ( p1 . myObj === "x1" ) ) { result$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_NaN . value ) ; } if ( ! ( isNaN . myObj === "b" ) ) { st_p2$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + value . e ) ; } if ( ! ( p2 . value === e ) ) { myObj$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + p2 . st_isFinite ) ; } if ( ! ( p1 . del === st_eval ) ) { obj$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p2 . parseInt ) ; } if ( ! ( p2 . valueOf === myObj ) ) { f ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p5 . value ) ; } if ( ! ( p2 !== p5 ) ) { p5$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( myObj === "obj_NaN" ) ) { result$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p3 !== st_NaN ) ) { st_p2$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( st_isFinite !== myObj ) ) { p4$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( p5 !== parseInt ) ) { isNaN$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== p3 ) ) { st_parseInt$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p3 !== p3 ) ) { isNaN$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { isFinite ; p1$ERROR ( '#18: value is not defined' ) ; } catch ( parseFloat ) { } if ( ! ( $ERROR . NaN === "myObj_value" ) ) { st_Infinity$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + eval . st_isNaN ) ; }