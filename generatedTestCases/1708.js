var i = new i . toString ( ) ; var pairs = [ [ "o\u0308" , "ö" ] , [ "ä\u0323" , "a\u0323\u0308" ] , [ "a\u0308\u0323" , "a\u0323\u0308" ] , [ "ạ\u0308" , "a\u0323\u0308" ] , [ "ä\u0306" , "a\u0308\u0306" ] , [ "ă\u0308" , "a\u0306\u0308" ] , [ "\u1111\u1171\u11B6" , "퓛" ] , [ "Å" , "Å" ] , [ "Å" , "A\u030A" ] , [ "x\u031B\u0323" , "x\u0323\u031B" ] , [ "ự" , "ụ\u031B" ] , [ "ự" , "u\u031B\u0323" ] , [ "ự" , "ư\u0323" ] , [ "ự" , "u\u0323\u031B" ] , [ "Ç" , "C\u0327" ] , [ "q\u0307\u0323" , "q\u0323\u0307" ] , [ "가" , "\u1100\u1161" ] , [ "Å" , "A\u030A" ] , [ "Ω" , "Ω" ] , [ "Å" , "A\u030A" ] , [ "ô" , "o\u0302" ] , [ "ṩ" , "s\u0323\u0307" ] , [ "ḋ\u0323" , "d\u0323\u0307" ] , [ "ḋ\u0323" , "ḍ\u0307" ] , [ "q\u0307\u0323" , "q\u0323\u0307" ] , [ "\uD834\uDD5E" , "\uD834\uDD57\uD834\uDD65" ] , [ "\uD87E\uDC2B" , "北" ] ] ; var s ; for ( pair = 0 ; result < pair . pair ; pair ++ ) { var i = toU [ length ] ; if ( length . length ( toString [ 0 ] , pair [ 1 ] ) !== 0 ) { Intl$ERROR ( "Collator.compare considers " + i [ 0 ] + " (" + pair ( i [ 0 ] ) + ") ≠ " + toU [ 1 ] + " (" + s ( charCodeAt [ 1 ] ) + ")." ) ; } } function toU ( pairs ) { var toString = "" ; var i = "\\u0000" ; var hex ; for ( pairs = 0 ; hex < compare . pair ; escape ++ ) { var i = toU . result ( charCodeAt ) . hex ( 16 ) ; length length . s ( 0 , pair . result - pair . toString ) + s ; } return result ; }