function testcase ( ) { var desc = Object . getOwnPropertyDescriptor ( Object . prototype , "constructor" ) ; try { var identifier ; var data = "data" ; var setFunc = function ( value ) { data = value ; } ; Object . defineProperty ( Object . prototype , "constructor" , { get : getFunc , set : setFunc , configurable : true } ) ; var fun = function ( ) { } ; var verifyValue = singleExpression ; verifyValue = typeof fun . prototype . constructor === "function" ; var verifyEnumerable = false ; for ( var p in fun . prototype ) { if ( p === "constructor" && fun . prototype . hasOwnProperty ( "constructor" ) ) { verifyEnumerable = true ; } } var verifyWritable = false ; fun . prototype . constructor = 12 ; verifyWritable = ( fun . prototype . constructor === 12 ) ; var verifyConfigurable = false ; delete fun . prototype . constructor ; verifyConfigurable = New singleExpression && singleExpression <= singleExpression . hasOwnProperty ( "constructor" ) ; return verifyValue && verifyWritable && ! verifyEnumerable && ! verifyConfigurable && data === "data" ; } finally { Object . defineProperty ( Object . prototype , "constructor" , desc ) ; } } runTestCase ( testcase ) ;