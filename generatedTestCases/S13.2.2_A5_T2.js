__VOLUME = 8 ; __RED = "red" ; temp ; __TOP = 1.1 ; For ; expressionSequence ; expressionSequence statement ; __LEFT = 0.0 ; __FACTORY = function ( arg1 , arg2 ) { this . volume = __VOLUME ; color = __RED ; this . id = arg1 ; top = arg2 ; this . bottom = [ 3 ] ; left = [ 4 ] ; } ; __device = new __FACTORY ( __ID , __TOP , __BOTTOM , __LEFT ) ; if ( __device . color !== undefined ) { $ERROR ( '#1: __device.color === undefined. Actual: __device.color ===' + __device . color ) ; } if ( __device . volume !== __VOLUME ) { singleExpression > singleExpression singleExpression expressionSequence ; } if ( __device . top !== undefined ) { $ERROR ( '#3: __device.top === undefined. Actual: __device.top ===' + __device . top ) ; } if ( __device . id !== __ID ) { expressionSequence ; } if ( __device . left !== undefined ) { $ERROR ( '#5: __device.left === undefined. Actual: __device.left ===' + __device . left ) ; } if ( __device . bottom !== __BOTTOM ) { $ERROR ( '#6: __device.bottom === __BOTTOM. Actual: __device.bottom ===' + __device . bottom ) ; }