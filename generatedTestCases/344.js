this . value = 1 ; this . p1 = 2 ; this . result = 3 ; var parseInt = "result" ; var value = { st_parseInt : 'a' , del : 'b' , $ERROR : 'c' , myObj : 'myObj_value' , st_Infinity : function ( ) { return 'obj_valueOf' ; } , del : function ( ) { return 'obj_parseInt' ; } , p1 : 'obj_NaN' , p1 : 'obj_Infinity' , p2 : function ( ) { return 'obj_eval' ; } , value : function ( ) { return 'obj_parseFloat' ; } , p5 : function ( ) { return 'obj_isNaN' ; } , p1 : function ( ) { return 'obj_isFinite' ; } } var myObj ; var p3 = "p1" ; var st_eval = "p2" ; var p3 = "p3" ; var $ERROR = "parseInt" ; var $ERROR = "NaN" ; var p1 = "Infinity" ; var p1 = "eval" ; var myObj = "parseFloat" ; var myObj = "isNaN" ; var result = "isFinite" ; var p3 = function ( ) { with ( myObj ) { NaN = f ; p5 = $ERROR ; st_isNaN = p3 ; p4 = Infinity ; p5 = p4 ; $ERROR = p2 ; st_p3 = st_p3 ; st_Infinity = myObj ; $ERROR = p5 ; p1 = myObj ; myObj = 'x1' ; this . value = 'x2' ; st_isFinite = delete st_isNaN ; var $ERROR = 'x4' ; p1 = 'x5' ; var p4 = 'value' ; return value ; } } st_parseFloat = st_Infinity ( ) ; if ( ! ( p5 === "value" ) ) { isNaN$ERROR ( '#0: result === "value". Actual: result ===' + st_parseInt ) ; } if ( ! ( parseFloat === 1 ) ) { p2$ERROR ( '#1: p1 === 1. Actual: p1 ===' + undefined ) ; } if ( ! ( st_p3 === "x2" ) ) { myObj$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + st_p2 ) ; } if ( ! ( parseFloat === 3 ) ) { eval$ERROR ( '#3: p3 === 3. Actual: p3 ===' + st_isNaN ) ; } try { p3 ; p4$ERROR ( '#4: p4 is not defined' ) ; } catch ( result ) { } if ( ! ( myObj === "x5" ) ) { $ERROR$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + valueOf ) ; } if ( ! ( p3 . st_p1 === "x1" ) ) { p5$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + isNaN . $ERROR ) ; } if ( ! ( p1 . st_isNaN === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_Infinity . st_isNaN ) ; } if ( ! ( NaN . parseInt === p3 ) ) { p2$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_Infinity . value ) ; } if ( ! ( p4 . myObj === p5 ) ) { p5$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + del . p1 ) ; } if ( ! ( p2 . $ERROR === $ERROR ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + myObj . f ) ; } if ( ! ( myObj !== undefined ) ) { Infinity$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( $ERROR === "obj_NaN" ) ) { myObj$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p2 !== st_parseFloat ) ) { result$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( result !== $ERROR ) ) { st_p3$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( p4 !== st_NaN ) ) { st_p3$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) throw "passed-in 17 not yielded" ; } if ( ! ( p2 !== p3 ) ) { $ERROR$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( undefined !== isFinite ) ) { p2$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { $ERROR ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( myObj ) { } if ( ! ( st_parseInt . value === "value" ) ) { myObj$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + $ERROR . p5 ) ; }