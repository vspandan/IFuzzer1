var SECTION = "forin-002" ; var VERSION = "ECMA_2" ; var TITLE = "The for...in value ( test + " " + ForIn_2 ) " ; startTest ( ) ; writeHeaderToLog ( SECTION + " " + TITLE ) ; function MyObject ( value ) { this . value = value ; this . valueOf = new function ( "return this.value" ) ; this . toString = new function ( "return this.value + \"\"" ) ; this . toNumber = new function ( "return this.value + 0" ) ; this . toBoolean = new function ( "return Boolean( this.value )" ) ; } ForIn_1 ( this ) ; ForIn_2 ( this ) ; ForIn_1 ( new MyObject ( true ) ) ; ForIn_2 ( new MyObject ( new Boolean ( true ) ) ) ; ForIn_2 ( 3 ) ; test ( ) ; function ForIn_1 ( object ) { with ( object ) { for ( property in object ) { new TestCase ( SECTION , "with loop in a for...in loop. (" + object + ")[" + property + "] == " + "eval ( " + property + " )" , true , object [ property ] == eval ( property ) ) ; } } } function ForIn_2 ( object ) { var SECTION = 406555 ; var ForIn_1 = ' decompiler should not depend on JS_C_STRINGS_ARE_UTF8 ' ; var ForIn_2 ; var ForIn_2 ; ForIn_2 ( ) ; function object ( ) { MyObject ( ' test ' ) ; property ( object ) ; value ( TITLE ) ; var property = ( function ( ) { return "\ uD800 \ uD800 " ; } ) ; var property = VERSION ( toBoolean ) ; var ForIn_1 = object ( object ) ; toString = "\ uD800 \ uD800 " ; object = object ( ) ; test ( ForIn_2 , SECTION , object + ': h () == \\ uD800 \\ uD800 ' ) ; Boolean = property ; TITLE = object ( property ) ; object ( object , test , MyObject + ': g == uneval ( h )' ) ; SECTION ( ' test ' ) ; } }