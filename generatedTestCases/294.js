this . st_p3 = 1 ; this . p2 = 2 ; this . p2 = 3 ; var $ERROR = "result" ; var myObj = { st_isFinite : 'a' , $ERROR : 'b' , $ERROR : 'c' , p2 : 'myObj_value' , p1 : function ( ) { return 'obj_valueOf' ; } , parseInt : function ( ) { return 'obj_parseInt' ; } , value : 'obj_NaN' , p4 : 'obj_Infinity' , st_eval : function ( ) { return 'obj_eval' ; } , e : function ( ) { return 'obj_parseFloat' ; } , result : function ( ) { return 'obj_isNaN' ; } , NaN : function ( ) { return 'obj_isFinite' ; } } var st_eval ; var undefined = "p1" ; var st_parseFloat = "p2" ; var $ERROR = "p3" ; var $ERROR = "parseInt" ; var st_parseFloat = "NaN" ; var myObj = "Infinity" ; var eval = "eval" ; var value = "parseFloat" ; var p2 = "isNaN" ; var p1 = "isFinite" ; try { with ( myObj ) { var isFinite = function ( ) { throw result ; st_isFinite = f ; st_p2 = myObj ; st_p3 = st_isNaN ; eval = $ERROR ; st_isNaN = myObj ; p2 = st_Infinity ; st_parseInt = $ERROR ; $ERROR = st_Infinity ; st_parseFloat = st_isFinite ; myObj = $ERROR ; f = 'x1' ; this . p5 = 'x2' ; st_parseFloat = delete value ; var p4 = 'x4' ; $ERROR = 'x5' ; var p4 = 'value' ; } p2 ( ) ; } } catch ( $ERROR ) { e = p2 ; } if ( ! ( st_Infinity === e ) ) { p2$ERROR ( '#0: result === undefined. Actual: result ===' + value ) ; } if ( ! ( myObj === 1 ) ) { p3$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p2 ) ; } if ( ! ( st_p1 === 2 ) ) { p2$ERROR ( '#2: p2 === 2. Actual: p2 ===' + NaN ) ; } if ( ! ( st_eval === 3 ) ) { parseInt$ERROR ( '#3: p3 === 3. Actual: p3 ===' + st_Infinity ) ; } try { st_isFinite ; st_parseInt$ERROR ( '#4: p4 is not defined' ) ; } catch ( p3 ) { } try { p5 ; del$ERROR ( '#5: p5 is not defined' ) ; } catch ( value ) { } if ( ! ( p3 . st_Infinity === "a" ) ) { undefined$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + p5 . p2 ) ; } if ( ! ( st_isFinite . st_eval === "b" ) ) { st_isFinite$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + myObj . $ERROR ) ; } if ( ! ( $ERROR . st_eval === "c" ) ) { NaN$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + myObj . st_Infinity ) ; } if ( ! ( st_p1 . value === st_eval ) ) { st_isNaN$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + myObj . NaN ) ; } if ( ! ( st_parseInt . p2 === st_isNaN ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + value . f ) ; } if ( ! ( value === "parseInt" ) ) { isFinite$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + parseFloat . st_p2 ) ; } if ( ! ( NaN === "NaN" ) ) { $ERROR$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + st_parseInt ) ; } if ( ! ( p4 === "Infinity" ) ) { undefined$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + p1 ) ; } if ( ! ( p1 === "eval" ) ) { e$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + $ERROR ) ; } if ( ! ( $ERROR === "parseFloat" ) ) { myObj$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + st_NaN ) ; } if ( ! ( st_isNaN === "isNaN" ) ) { myObj$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + value ) ; } if ( ! ( st_p2 === "isFinite" ) ) { st_eval$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + $ERROR ) ; } try { del ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( e ) { } if ( ! ( $ERROR . undefined === "myObj_value" ) ) { p2$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + e . e ) ; }