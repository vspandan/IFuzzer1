this . st_p1 = 1 ; this . p3 = 2 ; this . st_Infinity = 3 ; var eval = "result" ; var undefined = { myObj : 'a' , p2 : 'b' , $ERROR : 'c' , st_isNaN : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , p2 : 'obj_NaN' , st_p1 : 'obj_Infinity' , myObj : function ( ) { return 'obj_eval' ; } , parseInt : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var p1 ; var p3 = "p1" ; var p2 = "p2" ; var $ERROR = "p3" ; var $ERROR = "parseInt" ; var st_p2 = "NaN" ; var p3 = "Infinity" ; var $ERROR = "eval" ; var myObj = "parseFloat" ; var myObj = "isNaN" ; var parseInt = "isFinite" ; for ( var st_isNaN in isFinite ) { with ( p4 ) { st_p2 = st_isNaN ; $ERROR = 'x1' ; $ERROR = myObj ; this . p5 = 'x2' ; p3 = p5 ; myObj = delete $ERROR ; p5 = parseFloat ; parseFloat = value ; value = value ; eval = parseInt ; $ERROR = isFinite ; st_isNaN = $ERROR ; myObj = st_isNaN ; var p1 = 'x4' ; myObj = 'x5' ; var eval = 'value' ; break ; } } if ( ! ( p4 === 1 ) ) { st_parseFloat$ERROR ( '#1: p1 === 1. Actual: p1 ===' + result ) ; } if ( ! ( st_NaN === "x2" ) ) { $ERROR$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + myObj ) ; } if ( ! ( p4 === 3 ) ) { myObj$ERROR ( '#3: p3 === 3. Actual: p3 ===' + st_eval ) ; } if ( ! ( myObj === "x4" ) ) { p1$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + $ERROR ) ; } if ( ! ( Infinity === "x5" ) ) { $ERROR$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_eval ) ; } if ( ! ( $ERROR . $ERROR === "x1" ) ) { st_Infinity$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_parseInt . $ERROR ) ; } if ( ! ( $ERROR . p1 === "b" ) ) { st_isNaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_eval . p3 ) ; } if ( ! ( $ERROR . st_NaN === p4 ) ) { value$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_p1 . st_p2 ) ; } if ( ! ( value . p3 === $ERROR ) ) { st_Infinity$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_parseInt . st_isNaN ) ; } if ( ! ( st_Infinity . p2 === eval ) ) { isFinite$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p5 . valueOf ) ; } if ( ! ( p2 !== $ERROR ) ) { NaN$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( $ERROR === "obj_NaN" ) ) { p2$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_eval !== st_p1 ) ) { st_isFinite$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( eval !== $ERROR ) ) { valueOf$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( $ERROR !== p3 ) ) { undefined$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( p3 !== myObj ) ) { value$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p4 !== st_isFinite ) ) { p2$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( p1 === $ERROR ) ) { p5$ERROR ( '#18: value === undefined. Actual: value ===' + myObj ) ; } if ( ! ( p5 . myObj === "value" ) ) { myObj$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + st_parseFloat . parseFloat ) ; }