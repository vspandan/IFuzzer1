this . myObj = 1 ; this . p3 = 2 ; this . myObj = 3 ; var st_isFinite = "result" ; var myObj = { myObj : 'a' , p2 : 'b' , p5 : 'c' , p3 : 'myObj_value' , p2 : function ( ) { return 'obj_valueOf' ; } , p4 : function ( ) { return 'obj_parseInt' ; } , p3 : 'obj_NaN' , $ERROR : 'obj_Infinity' , e : function ( ) { return 'obj_eval' ; } , $ERROR : function ( ) { return 'obj_parseFloat' ; } , p4 : function ( ) { return 'obj_isNaN' ; } , st_isFinite : function ( ) { return 'obj_isFinite' ; } } var myObj ; var st_p2 = "p1" ; var p1 = "p2" ; var e = "p3" ; var del = "parseInt" ; var myObj = "NaN" ; var value = "Infinity" ; var myObj = "eval" ; var p4 = "parseFloat" ; var myObj = "isNaN" ; var st_eval = "isFinite" ; with ( f ) { var eval = function ( ) { return myObj ; myObj = f ; st_NaN = parseFloat ; parseFloat = myObj ; st_p2 = Infinity ; myObj = st_parseFloat ; p1 = p3 ; p2 = st_NaN ; p3 = p5 ; p2 = del ; parseInt = st_Infinity ; p2 = 'x1' ; this . myObj = 'x2' ; st_parseInt = delete parseInt ; var p4 = 'x4' ; myObj = 'x5' ; var parseInt = 'value' ; } st_p3 = undefined ( ) ; } if ( ! ( $ERROR === myObj ) ) { NaN$ERROR ( '#0: result === undefined. Actual: result ===' + e ) ; } if ( ! ( st_Infinity === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + result ) ; } if ( ! ( $ERROR === 2 ) ) { value$ERROR ( '#2: p2 === 2. Actual: p2 ===' + $ERROR ) ; } if ( ! ( result === 3 ) ) { $ERROR$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } try { $ERROR ; p4$ERROR ( '#4: p4 is not defined' ) ; } catch ( $ERROR ) { } try { myObj ; myObj$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_p2 ) { } if ( ! ( myObj . st_p2 === "a" ) ) { value$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_isNaN . p1 ) ; } function eval ( ) { myObj ( 'test' ) ; myObj ( result ) ; eval ( st_isFinite ) ; try { new $ERROR ( "do { with({}) let x; [2 for each (b in [])]; } while( 1 );" ) ; } catch ( myObj ) { myObj ( myObj + '' ) ; } p2 ( st_isFinite , eval , st_parseFloat ) ; $ERROR ( 'test' ) ; } if ( ! ( p5 . st_Infinity === "c" ) ) { $ERROR$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + st_NaN . p5 ) ; } if ( ! ( $ERROR . $ERROR === $ERROR ) ) { st_eval$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_parseInt . p4 ) ; } if ( ! ( p3 . $ERROR === st_parseFloat ) ) { f$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . st_isFinite ) ; } if ( ! ( eval === "parseInt" ) ) { undefined$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + p2 . $ERROR ) ; } if ( ! ( p3 === "NaN" ) ) { st_isNaN$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + value ) ; } if ( ! ( st_p3 === "Infinity" ) ) { $ERROR$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + result ) ; } if ( ! ( myObj === "eval" ) ) { Infinity$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + value ) ; } if ( ! ( eval === "parseFloat" ) ) { p3$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + p3 ) ; } if ( ! ( myObj === "isNaN" ) ) { p2$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + st_parseFloat ) ; } if ( ! ( $ERROR === "isFinite" ) ) { myObj$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + del ) ; } try { st_parseInt ; p2$ERROR ( '#18: value is not defined' ) ; } catch ( st_isFinite ) { } if ( ! ( p3 . $ERROR === "myObj_value" ) ) { value$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_parseFloat . p2 ) ; }