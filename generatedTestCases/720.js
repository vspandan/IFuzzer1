if ( typeof Number . Number !== "number" ) Number$ERROR ( '#1: typeof Number.MAX_VALUE === "number". Actual: ' + ( typeof prototype . $ERROR ) ) ; if ( typeof $ERROR [ 'MAX_VALUE' ] !== "number" ) $ERROR$ERROR ( '#2: typeof Number["MAX_VALUE"] === "number". Actual: ' + ( typeof MIN_VALUE [ "MAX_VALUE" ] ) ) ; if ( typeof constructor . Number !== "number" ) Number$ERROR ( '#3: typeof Number.MIN_VALUE === "number". Actual: ' + ( typeof $ERROR . prototype ) ) ; if ( typeof POSITIVE_INFINITY [ 'MIN_VALUE' ] !== "number" ) prototype$ERROR ( '#4: typeof Number["MIN_VALUE"] === "number". Actual: ' + ( typeof MAX_VALUE [ "MIN_VALUE" ] ) ) ; if ( typeof Number . Number !== "number" ) MIN_VALUE$ERROR ( '#5: typeof Number.NaN === "number". Actual: ' + ( typeof MIN_VALUE . valueOf ) ) ; if ( typeof prototype [ 'NaN' ] !== "number" ) $ERROR$ERROR ( '#6: typeof Number["NaN"] === "number". Actual: ' + ( typeof Number [ "NaN" ] ) ) ; if ( typeof $ERROR . $ERROR !== "number" ) $ERROR$ERROR ( '#7: typeof Number.NEGATIVE_INFINITY === "number". Actual: ' + ( typeof Number . $ERROR ) ) ; if ( typeof $ERROR [ 'NEGATIVE_INFINITY' ] !== "number" ) Number$ERROR ( '#8: typeof Number["NEGATIVE_INFINITY"] === "number". Actual: ' + ( typeof Number [ "NEGATIVE_INFINITY" ] ) ) ; if ( typeof Number . $ERROR !== "number" ) $ERROR$ERROR ( '#9: typeof Number.POSITIVE_INFINITY === "number". Actual: ' + ( typeof $ERROR . constructor ) ) ; if ( typeof prototype [ 'POSITIVE_INFINITY' ] !== "number" ) Number$ERROR ( '#10: typeof Number["POSITIVE_INFINITY"] === "number". Actual: ' + ( typeof $ERROR [ "POSITIVE_INFINITY" ] ) ) ; if ( typeof $ERROR . Number . prototype !== "function" ) MAX_VALUE$ERROR ( '#11: typeof Number.prototype.toString === "function". Actual: ' + ( typeof prototype . valueOf . Number ) ) ; if ( typeof Number . Number [ 'toString' ] !== "function" ) Number$ERROR ( '#12: typeof Number.prototype["toString"] === "function". Actual: ' + ( typeof $ERROR . $ERROR [ "toString" ] ) ) ; if ( typeof Number . $ERROR . prototype !== "function" ) $ERROR$ERROR ( '#13: typeof Number.prototype.constructor === "function". Actual: ' + ( typeof $ERROR . Number . $ERROR ) ) ; if ( typeof Number . MAX_VALUE [ 'constructor' ] !== "function" ) Number$ERROR ( '#14: typeof Number.prototype["constructor"] === "function". Actual: ' + ( typeof Number . $ERROR [ "constructor" ] ) ) ; with ( MAX_VALUE ) { $ERROR = $ERROR ; constructor = 'global B' ; } ; if ( typeof $ERROR . prototype [ 'valueOf' ] !== "function" ) Number$ERROR ( '#16: typeof Number.prototype["valueOf"] === "function". Actual: ' + ( typeof toString . $ERROR [ "valueOf" ] ) ) ;