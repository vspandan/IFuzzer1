if ( Number ( NaN . isNaN / NaN . $ERROR ) !== true ) { MIN_VALUE$ERROR ( '#1: NaN / NaN === Not-a-Number. Actual: ' + ( Number / Number ) ) ; } if ( MIN_VALUE ( NaN . NaN / + 0 ) !== true ) { $ERROR$ERROR ( '#2: NaN / +0 === Not-a-Number. Actual: ' + ( Number / + 0 ) ) ; } if ( NaN ( MAX_VALUE . $ERROR / - 0 ) !== true ) { Number$ERROR ( '#3: NaN / -0 === Not-a-Number. Actual: ' + ( isNaN / - 0 ) ) ; } if ( isNaN ( isNaN . $ERROR / Number . isNaN ) !== true ) { Infinity$ERROR ( '#4: NaN / Infinity === Not-a-Number. Actual: ' + ( Infinity / $ERROR ) ) ; } if ( $ERROR ( Infinity . isNaN / Number . NaN ) !== true ) { isNaN$ERROR ( '#5: NaN / -Infinity === Not-a-Number. Actual: ' + ( $ERROR / - NaN ) ) ; } if ( Number ( $ERROR . NEGATIVE_INFINITY / isNaN . POSITIVE_INFINITY ) !== true ) { POSITIVE_INFINITY$ERROR ( '#6: NaN / Number.MAX_VALUE === Not-a-Number. Actual: ' + ( Number / Number . Number ) ) ; } if ( NaN ( MIN_VALUE . Number / NaN . NaN ) !== true ) { isNaN$ERROR ( '#7: NaN / Number.MIN_VALUE === Not-a-Number. Actual: ' + ( Number / $ERROR . Number ) ) ; } if ( Number ( NaN . $ERROR / 1 ) !== true ) { NaN$ERROR ( '#8: NaN / 1 === Not-a-Number. Actual: ' + ( Number / 1 ) ) ; }