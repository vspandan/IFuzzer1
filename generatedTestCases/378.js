this . $ERROR = 1 ; this . myObj = 2 ; this . $ERROR = 3 ; var p1 = "result" ; var $ERROR = { st_eval : 'a' , isNaN : 'b' , isFinite : 'c' , p3 : 'myObj_value' , st_Infinity : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , $ERROR : 'obj_NaN' , st_p2 : 'obj_Infinity' , undefined : function ( ) { return 'obj_eval' ; } , Infinity : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var myObj ; var st_eval = "p1" ; var $ERROR = "p2" ; var NaN = "p3" ; var e = "parseInt" ; var p5 = "NaN" ; var p1 = "Infinity" ; var $ERROR = "eval" ; var p5 = "parseFloat" ; var del = "isNaN" ; var value = "isFinite" ; var result = function ( ) { p5 = valueOf ; myObj = $ERROR ; eval = parseInt ; p4 = p1 ; isFinite = Infinity ; myObj = value ; isFinite = $ERROR ; st_parseFloat = p5 ; Infinity = undefined ; myObj = p1 ; Infinity = 'x1' ; this . NaN = 'x2' ; $ERROR = delete $ERROR ; var p2 = 'x4' ; p4 = 'x5' ; var $ERROR = 'value' ; } with ( p3 ) { st_isNaN ( ) ; } if ( ! ( p2 === "x1" ) ) { st_NaN$ERROR ( '#1: p1 === "x1". Actual: p1 ===' + $ERROR ) ; } if ( ! ( st_isNaN === "x2" ) ) { st_Infinity$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + st_p3 ) ; } try { f ; st_Infinity$ERROR ( '#3: p3 is nod defined' ) ; } catch ( st_Infinity ) { } try { valueOf ; $ERROR$ERROR ( '#4: p4 is not defined' ) ; } catch ( parseFloat ) { } if ( ! ( $ERROR === "x5" ) ) { st_isNaN$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + parseInt ) ; } if ( ! ( p5 . f === "a" ) ) { myObj$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + NaN . undefined ) ; } if ( ! ( $ERROR . Infinity === "b" ) ) { p2$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . e ) ; } if ( ! ( f . st_Infinity === "c" ) ) { p4$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + $ERROR . p1 ) ; } if ( ! ( parseInt . isNaN === p1 ) ) { st_NaN$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_parseInt . value ) ; } if ( ! ( value . st_eval === $ERROR ) ) { st_Infinity$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_parseInt . $ERROR ) ; } if ( ! ( $ERROR === $ERROR ) ) { isNaN$ERROR ( '#11: st_parseInt === parseInt. Actual: st_parseInt ===' + p1 ) ; } if ( ! p5 ( value ) ) { st_eval$ERROR ( '#12: st_NaN === NaN. Actual: st_NaN ===' + myObj ) ; } if ( ! ( parseInt === $ERROR ) ) { p1$ERROR ( '#13: st_Infinity === Infinity. Actual: st_Infinity ===' + p1 ) ; } if ( ! ( $ERROR === result ) ) { st_isNaN$ERROR ( '#14: st_eval === eval. Actual: st_eval ===' + p2 ) ; } if ( ! ( eval === p5 ) ) { $ERROR$ERROR ( '#15: st_parseFloat === parseFloat. Actual: st_parseFloat ===' + p2 ) ; } if ( ! ( undefined === $ERROR ) ) { $ERROR$ERROR ( '#16: st_isNaN === isNaN. Actual: st_isNaN ===' + NaN ) ; } if ( ! ( myObj === myObj ) ) { f$ERROR ( '#17: st_isFinite === isFinite. Actual: st_isFinite ===' + del ) ; } try { value ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( p5 ) { } if ( ! ( p5 . p2 === "myObj_value" ) ) { value ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + Infinity . p2 ) ; }