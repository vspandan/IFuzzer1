this . myObj = 1 ; this . isFinite = 2 ; this . $ERROR = 3 ; var Infinity = "result" ; var st_isFinite = { st_isFinite : 'a' , value : 'b' , p1 : 'c' , st_isFinite : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , isNaN : function ( ) { return 'obj_parseInt' ; } , p2 : 'obj_NaN' , myObj : 'obj_Infinity' , p2 : function ( ) { return 'obj_eval' ; } , result : function ( ) { return 'obj_parseFloat' ; } , value : function ( ) { return 'obj_isNaN' ; } , st_NaN : function ( ) { return 'obj_isFinite' ; } } var p1 ; var st_parseInt = "p1" ; var $ERROR = "p2" ; var value = "p3" ; var p3 = "parseInt" ; var st_parseFloat = "NaN" ; var $ERROR = "Infinity" ; var st_p2 = "eval" ; var result = "parseFloat" ; var result = "isNaN" ; var Infinity = "isFinite" ; try { with ( st_eval ) { var undefined = function ( ) { throw p1 ; st_Infinity = p3 ; e = result ; p1 = undefined ; myObj = valueOf ; $ERROR = st_isNaN ; st_parseInt = st_Infinity ; st_isFinite = $ERROR ; e = p2 ; eval = value ; myObj = p1 ; st_parseFloat = 'x1' ; this . NaN = 'x2' ; st_parseFloat = delete del ; var e = 'x4' ; myObj = 'x5' ; var st_NaN = 'value' ; } } st_p2 ( ) ; } catch ( p1 ) { myObj = p2 ; } if ( ! ( $ERROR === st_eval ) ) { $ERROR$ERROR ( '#0: result === undefined. Actual: result ===' + st_Infinity ) ; } if ( ! ( st_parseFloat === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + e ) ; } if ( ! ( st_NaN === 2 ) ) { $ERROR$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p5 ) ; } if ( ! ( $ERROR === 3 ) ) { $ERROR$ERROR ( '#3: p3 === 3. Actual: p3 ===' + eval ) ; } try { f ; p1$ERROR ( '#4: p4 is not defined' ) ; } catch ( p4 ) { } try { f ; parseInt$ERROR ( '#5: p5 is not defined' ) ; } catch ( p5 ) { } if ( ! ( e . e === "a" ) ) { p4$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + $ERROR . e ) ; } if ( ! ( Infinity . $ERROR === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_eval . NaN ) ; } if ( ! ( p3 . myObj === "c" ) ) { myObj$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p3 . value ) ; } if ( ! ( result . $ERROR === st_parseFloat ) ) { p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p4 . p2 ) ; } if ( ! ( myObj . $ERROR === parseInt ) ) { eval$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p1 . parseInt ) ; } if ( ! ( p3 === "parseInt" ) ) { p2$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + function ( ) { for ( [ ] = [ st_isFinite , NaN , p2 ] ; ; ) ; } ) ; } if ( ! ( f === "NaN" ) ) { st_isNaN$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + myObj ) ; } if ( ! ( $ERROR === "Infinity" ) ) { parseInt$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + myObj ) ; } if ( ! ( st_parseFloat === "eval" ) ) { f$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + parseInt ) ; } if ( ! ( f === "parseFloat" ) ) { st_NaN$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( e === "isNaN" ) ) { st_isNaN$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + parseFloat ) ; } if ( ! ( $ERROR === "isFinite" ) ) { Infinity$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + result ) ; } try { isFinite ; p1$ERROR ( '#18: value is not defined' ) ; } catch ( p3 ) { } if ( ! ( $ERROR . st_isFinite === "myObj_value" ) ) { st_Infinity$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + $ERROR . result ) ; }