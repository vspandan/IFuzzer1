this . st_p2 = 1 ; this . p1 = 2 ; this . isFinite = 3 ; var $ERROR = "result" ; var st_NaN = { p3 : 'a' , p1 : 'b' , del : 'c' , myObj : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , p2 : function ( ) { return 'obj_parseInt' ; } , f : 'obj_NaN' , f : 'obj_Infinity' , Infinity : function ( ) { return 'obj_eval' ; } , myObj : function ( ) { return 'obj_parseFloat' ; } , p1 : function ( ) { return 'obj_isNaN' ; } , eval : function ( ) { return 'obj_isFinite' ; } } var Infinity ; var $ERROR = "p1" ; var myObj = "p2" ; var del = "p3" ; var myObj = "parseInt" ; var Infinity = "NaN" ; var p4 = "Infinity" ; var p1 = "eval" ; var myObj = "parseFloat" ; var obj = "isNaN" ; var $ERROR = "isFinite" ; with ( p5 ) { var p1 = function ( ) { p3 = $ERROR ; isFinite = p2 ; p3 = value ; p1 = isNaN ; st_p1 = undefined ; result = myObj ; isFinite = eval ; myObj = del ; isNaN = del ; p1 = st_NaN ; p5 = 'x1' ; this . p2 = 'x2' ; st_Infinity = delete p3 ; var p1 = 'x4' ; st_Infinity = 'x5' ; var undefined = 'value' ; } var p1 = new st_p1 ( ) ; } if ( ! ( $ERROR === 1 ) ) { result$ERROR ( '#1: p1 === 1. Actual: p1 ===' + e ) ; } if ( ! ( eval === 2 ) ) { $ERROR$ERROR ( '#2: p2 === 2. Actual: p2 ===' + $ERROR ) ; } if ( ! ( Infinity === 3 ) ) { st_p1$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p5 ) ; } try { p2 ; p5$ERROR ( '#4: p4 is not defined' ) ; } catch ( eval ) { } if ( ! ( st_parseInt === "x5" ) ) { p1$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + p5 ) ; } if ( ! ( st_p2 . p2 === "x1" ) ) { p2$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + myObj . st_eval ) ; } if ( ! ( myObj . st_p2 === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_Infinity . st_parseFloat ) ; } if ( ! ( value . myObj === value ) ) { myObj$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_isNaN . value ) ; } if ( ! ( myObj . myObj === st_p2 ) ) { myObj$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p2 . myObj ) ; } if ( ! ( $ERROR . NaN === myObj ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p4 . st_p2 ) ; } if ( ! ( $ERROR !== value ) ) { p2$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( p2 === "obj_NaN" ) ) { p4$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( myObj !== p1 ) ) { st_parseFloat$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( eval !== myObj ) ) { p3$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_isNaN !== st_p3 ) ) { NaN$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== $ERROR ) ) { p3$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( $ERROR !== myObj ) ) { value$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { $ERROR ; p3$ERROR ( '#18: value is not defined' ) ; } catch ( st_p3 ) { } if ( ! ( $ERROR . $ERROR === "myObj_value" ) ) { p3$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + $ERROR . p3 ) ; }