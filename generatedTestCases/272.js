this . st_parseFloat = 1 ; this . p1 = 2 ; this . $ERROR = 3 ; var valueOf = "result" ; var p2 = { p3 : 'a' , st_parseFloat : 'b' , st_NaN : 'c' , st_parseInt : 'myObj_value' , Infinity : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , $ERROR : 'obj_Infinity' , st_parseFloat : function ( ) { return 'obj_eval' ; } , st_isFinite : function ( ) { return 'obj_parseFloat' ; } , st_p1 : function ( ) { return 'obj_isNaN' ; } , st_p3 : function ( ) { return 'obj_isFinite' ; } } var st_isNaN ; var p5 = "p1" ; var p1 = "p2" ; var del = "p3" ; var myObj = "parseInt" ; var eval = "NaN" ; var p3 = "Infinity" ; var valueOf = "eval" ; var $ERROR = "parseFloat" ; var parseFloat = "isNaN" ; var $ERROR = "isFinite" ; var myObj = function ( ) { with ( st_p1 ) { return myObj ; f = st_isNaN ; $ERROR = p2 ; st_p3 = p2 ; myObj = undefined ; st_Infinity = st_NaN ; value = st_NaN ; p2 = e ; p1 = eval ; st_parseFloat = parseFloat ; st_Infinity = $ERROR ; myObj = 'x1' ; this . p4 = 'x2' ; p4 = delete parseInt ; var st_parseInt = 'x4' ; p4 = 'x5' ; var st_isFinite = 'value' ; } } var $ERROR = new parseInt ( ) ; if ( ! ( st_p1 === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + obj ) ; } if ( ! ( st_NaN === 2 ) ) { st_p3$ERROR ( '#2: p2 === 2. Actual: p2 ===' + myObj ) ; } if ( ! ( st_p1 === 3 ) ) { st_isNaN$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p1 ) ; } try { isNaN ; st_eval$ERROR ( '#4: p4 is not defined' ) ; } catch ( p5 ) { } try { p2 ; f$ERROR ( '#5: p5 is not defined' ) ; } catch ( myObj ) { } if ( ! ( eval . del === "a" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_parseFloat . myObj ) ; } if ( ! ( $ERROR . p3 === "b" ) ) { valueOf$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + myObj . st_NaN ) ; } if ( ! ( st_Infinity . st_p3 === "c" ) ) { p2$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + result . myObj ) ; } if ( ! ( myObj . p1 === $ERROR ) ) { Infinity$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + parseInt . p3 ) ; } if ( ! ( eval . $ERROR === myObj ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . p2 ) ; } if ( ! ( $ERROR === "parseInt" ) ) { valueOf$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + p2 . f ) ; } if ( ! ( st_isFinite === "NaN" ) ) { p2$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + p2 ) ; } if ( ! ( isFinite === "Infinity" ) ) { Infinity$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + p4 ) ; } if ( ! ( valueOf === "eval" ) ) { st_NaN$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p5 ) ; } if ( ! ( myObj === "parseFloat" ) ) { NaN$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + myObj ) ; } if ( ! ( del === "isNaN" ) ) { st_eval$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + st_NaN ) ; } if ( ! ( $ERROR === "isFinite" ) ) { st_p1$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + isNaN ) ; } try { myObj ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( p5 ) { } if ( ! ( result . undefined === "myObj_value" ) ) { p1$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + myObj . p5 ) ; }