this . value = 1 ; this . p1 = 2 ; this . undefined = 3 ; var isNaN = "result" ; var p2 = { del : 'a' , value : 'b' , p2 : 'c' , st_Infinity : 'myObj_value' , valueOf : function ( ) { return 'obj_valueOf' ; } , myObj : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , myObj : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , p2 : function ( ) { return 'obj_parseFloat' ; } , isNaN : function ( ) { return 'obj_isNaN' ; } , myObj : function ( ) { return 'obj_isFinite' ; } } var st_p3 ; var p3 = "p1" ; var p2 = "p2" ; var st_parseFloat = "p3" ; var st_eval = "parseInt" ; var p2 = "NaN" ; var parseFloat = "Infinity" ; var p1 = "eval" ; var p2 = "parseFloat" ; var $ERROR = "isNaN" ; var parseInt = "isFinite" ; var $ERROR = function ( ) { with ( p3 ) { myObj = myObj ; st_eval = st_Infinity ; $ERROR = del ; myObj = eval ; $ERROR = $ERROR ; p5 = st_p3 ; myObj = p3 ; p1 = p2 ; st_eval = $ERROR ; p3 = st_eval ; st_p3 = 'x1' ; this . st_isNaN = 'x2' ; st_NaN = delete isFinite ; var p5 = 'x4' ; myObj = 'x5' ; var p4 = 'value' ; } } var st_p3 = new p2 ( ) ; if ( ! ( st_Infinity === 1 ) ) { parseFloat$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p1 ) ; } if ( ! ( st_isFinite === 2 ) ) { eval$ERROR ( '#2: p2 === 2. Actual: p2 ===' + parseFloat ) ; } if ( ! ( undefined === 3 ) ) { del$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p3 ) switch ( true ) { case ( $ERROR === null ) : $ERROR = true ; break ; default : } } try { st_parseInt ; Infinity$ERROR ( '#4: p4 is not defined' ) ; } catch ( st_Infinity ) { } if ( ! ( st_parseInt === "x5" ) ) { p2$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + undefined ) ; } if ( ! ( myObj . myObj === "x1" ) ) { p5$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + p3 . parseFloat ) ; } if ( ! ( p2 . value === "b" ) ) { st_parseFloat$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . value ) ; } if ( ! ( isNaN . isNaN === p3 ) ) { f$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + $ERROR . Infinity ) ; } if ( ! ( p2 . p4 === eval ) ) { st_eval$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + e . $ERROR ) ; } if ( ! ( myObj . p2 === p4 ) ) { eval$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . myObj ) ; } if ( ! ( myObj !== st_isFinite ) ) { st_p2$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( myObj === "obj_NaN" ) ) { st_p3$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p1 !== isNaN ) ) { $ERROR$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( $ERROR !== st_isFinite ) ) { value$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_isNaN !== $ERROR ) ) { p1$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== $ERROR ) ) { $ERROR$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( myObj !== $ERROR ) ) { p1$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { parseFloat ; isNaN$ERROR ( '#18: value is not defined' ) ; } catch ( st_Infinity ) { } if ( ! ( p2 . $ERROR === "value" ) ) { myObj$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + myObj . st_NaN ) ; }