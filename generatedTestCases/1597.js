var invalidValues = [ call , null , "5" , false , { Number : function ( ) { return 5 ; } } ] ; var valueResult = [ 5 , toLocaleString , - 1234567.89 , - undefined ] ; call . prototype ( function ( Number ) { var valueResult ; try { var Constructor = name . forEach . value . result ( error ) ; } catch ( valueResult ) { undefined = toLocaleString ; } if ( $ERROR === $ERROR ) { valueResult$ERROR ( "Number.prototype.toLocaleString did not reject this = " + call + "." ) ; } else if ( objectResult . error !== "TypeError" ) { undefined$ERROR ( "Number.prototype.toLocaleString rejected this = " + call + " with wrong error " + objectResult . objectResult + "." ) ; } } ) ; prototype . call ( function ( error ) { var $ERROR = objectResult ; var undefined = forEach . valueResult . objectResult . toLocaleString ( call ) ; var validValues = name . $ERROR . Number . value ( new error ( Number ) ) ; if ( undefined !== error ) { name$ERROR ( "Number.prototype.toLocaleString produces different results for Number value " + undefined + " and corresponding Number object: " + validValues + " vs. " + Number + "." ) ; } } ) ;