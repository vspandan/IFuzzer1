this . del = 1 ; this . parseInt = 2 ; this . st_parseInt = 3 ; var p1 = "result" ; var p5 = { value : 'a' , f : 'b' , st_p2 : 'c' , isNaN : 'myObj_value' , NaN : function ( ) { return 'obj_valueOf' ; } , valueOf : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , $ERROR : 'obj_Infinity' , isNaN : function ( ) { return 'obj_eval' ; } , $ERROR : function ( ) { return 'obj_parseFloat' ; } , st_p2 : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var p3 = "p1" ; var undefined = "p2" ; var p3 = "p3" ; var isFinite = "parseInt" ; var value = "NaN" ; var myObj = "Infinity" ; var myObj = "eval" ; var st_eval = "parseFloat" ; var eval = "isNaN" ; var $ERROR = "isFinite" ; var p1 = function ( ) { with ( $ERROR ) { $ERROR = del ; st_eval = p4 ; st_NaN = p1 ; parseFloat = del ; st_isFinite = $ERROR ; st_Infinity = value ; isFinite = p4 ; $ERROR = p3 ; p2 = $ERROR ; myObj = del ; p4 = 'x1' ; this . p3 = 'x2' ; f = delete p2 ; var p5 = 'x4' ; st_p2 = 'x5' ; var valueOf = 'value' ; return p4 ; } } var p2 = new $ERROR ( ) ; if ( ! ( $ERROR === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + st_isFinite ) ; } if ( ! ( p2 === 2 ) ) { parseInt$ERROR ( '#2: p2 === 2. Actual: p2 ===' + NaN ) ; } if ( ! ( st_isFinite === 3 ) ) { st_eval$ERROR ( '#3: p3 === 3. Actual: p3 ===' + isFinite ) ; } try { parseFloat ; isNaN$ERROR ( '#4: p4 is not defined' ) ; } catch ( parseFloat ) { } if ( ! ( p1 === "x5" ) ) { st_Infinity$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_isFinite ) ; } if ( ! ( st_p3 . st_p2 === "x1" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_p3 . $ERROR ) ; } if ( ! ( p5 . $ERROR === "b" ) ) { st_NaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p5 . obj ) ; } if ( ! ( $ERROR . e === $ERROR ) ) { parseInt$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + p5 . parseFloat ) ; } if ( ! ( st_eval . p1 === $ERROR ) ) { $ERROR$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . value ) ; } if ( ! ( f . Infinity === st_eval ) ) { st_NaN$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p2 . undefined ) ; } if ( ! ( isFinite !== Infinity ) ) { myObj$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( NaN === "obj_NaN" ) ) { p3$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_p2 !== myObj ) ) { p3$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( value !== st_p1 ) ) { p2$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( isNaN !== e ) ) { e$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( isNaN !== p1 ) ) { p1$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( Infinity !== st_eval ) ) { st_parseFloat$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { p4 ; p5$ERROR ( '#18: value is not defined' ) ; } catch ( $ERROR ) { } if ( ! ( myObj . value === "value" ) ) { p1$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + st_NaN . parseFloat ) ; }