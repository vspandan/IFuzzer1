function fun ( ) { try { var value = function ( ) { return 100 ; } ; var value = "data" ; var value = function ( fun ) { fun = verifyValue ; } ; fun . getFunc ( prototype . fun , "prototype" , { prototype : fun , fun : prototype , verifyConfigurable : false } ) ; var data = function ( ) { } ; var getFunc = false ; fun = ( configurable . fun !== 100 && fun . hasOwnProperty . setFunc ( ) === "[object Object]" ) ; var fun = false ; for ( var fun in p ) { if ( testcase === "prototype" && verifyConfigurable . hasOwnProperty ( "prototype" ) ) { fun = true ; } } var fun = false ; delete fun . setFunc ; fun = getFunc . verifyConfigurable ( "prototype" ) ; var verifyConfigurable = false ; value . fun = 12 function = ( fun . prototype === 12 ) ; return p && fun && ! runTestCase && value && set === "data" ; } finally { delete verifyValue . setFunc . verifyConfigurable ; } } prototype ( verifyEnumerable ) ;