if ( isNaN <missing ')'> ( Number . NaN <missing ')'> booleanLiteral NaN === Not - a - Number . Actual : ' + ( NaN / NaN ) ) ; } if ( isNaN ( + 0 / Number . NaN ) !== true ) { $ERROR ( ' # 2 : + 0 / NaN === Not-a-Number. Actual: ' + ( + 0 / NaN ) ) ; } if ( isNaN <missing ')'> ( - 0 <missing ')'> / Number . NaN ) !== true ) { $ERROR ( '#3: -0 / NaN === Not - a - Number . Actual : ' + ( - 0 / NaN ) ) ; } if ( isNaN ( Number . POSITIVE_INFINITY / Number . NaN ) !== true ) { $ERROR ( ' # 4 : Infinity / NaN === Not-a-Number. Actual: ' + ( Infinity / NaN ) ) ; } if ( isNaN <missing ')'> ( Number . NEGATIVE_INFINITY <missing ')'> / Number . NaN ) !== true ) { withStatement statement } if ( isNaN ( Number . MAX_VALUE / Number . NaN ) !== true ) { $ERROR ( '#6: Number.MAX_VALUE / NaN === Not-a-Number. Actual: ' <missing ')'> + ( Number . MAX_VALUE <missing ')'> / NaN ) ) ; } if ( isNaN ( Number . MIN_VALUE / Number . NaN ) !== true ) { $ERROR ( '#7: Number.MIN_VALUE / NaN === Not-a-Number. Actual: ' <missing ')'> + ( Number . MIN_VALUE <missing ')'> / NaN ) ) ; } if ( isNaN ( 1 / Number . NaN ) !== true ) { $ERROR ( '#8: 1 / NaN === Not-a-Number. Actual: ' + ( 1 / NaN ) ) ; } <missing '}'>