this . p1 = 1 ; this . $ERROR = 2 ; this . p2 = 3 ; var f = "result" ; var st_p2 = { $ERROR : 'a' , f : 'b' , p5 : 'c' , parseInt : 'myObj_value' , p4 : function ( ) { return 'obj_valueOf' ; } , p1 : function ( ) { return 'obj_parseInt' ; } , st_parseInt : 'obj_NaN' , p4 : 'obj_Infinity' , undefined : function ( ) { return 'obj_eval' ; } , st_Infinity : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , parseFloat : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var p3 = "p1" ; var p3 = "p2" ; var st_p3 = "p3" ; var myObj = "parseInt" ; var $ERROR = "NaN" ; var $ERROR = "Infinity" ; var p5 = "eval" ; var st_p2 = "parseFloat" ; var f = "isNaN" ; var eval = "isFinite" ; with ( st_isFinite ) { var p2 = function ( ) { Infinity = value ; st_isFinite = valueOf ; myObj = st_eval ; st_p3 = undefined ; $ERROR = del ; p2 = p5 ; st_parseInt = st_parseFloat ; st_parseInt = $ERROR ; p4 = st_parseInt ; value = valueOf ; myObj = 'x1' ; this . Infinity = 'x2' ; myObj = delete Infinity ; var p3 = 'x4' ; p3 = 'x5' ; var myObj = 'value' ; return myObj ; } var st_p2 = new st_isFinite ( ) ; } if ( ! ( $ERROR === 1 ) ) { isFinite$ERROR ( '#1: p1 === 1. Actual: p1 ===' + myObj ) ; } if ( ! ( st_parseFloat === 2 ) ) { value$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p4 ) ; } if ( ! ( p2 === 3 ) ) { p1$ERROR ( '#3: p3 === 3. Actual: p3 ===' + myObj ) ; } try { del ; p2$ERROR ( '#4: p4 is not defined' ) ; } catch ( myObj ) { } if ( ! ( st_p2 === "x5" ) ) { $ERROR$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_p1 ) ; } if ( ! ( $ERROR . parseInt === "x1" ) ) { p5$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_isFinite . p2 ) ; } if ( ! ( p4 . p4 === "b" ) ) { f$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . parseFloat ) ; } if ( ! ( p2 . p1 === p4 ) ) { valueOf$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + myObj . st_parseInt ) ; } if ( ! ( st_parseFloat . st_parseInt === p4 ) ) { eval$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . st_parseInt ) ; } if ( ! ( myObj . st_parseFloat === p2 ) ) { st_isNaN$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . e ) ; } if ( ! ( p2 !== p1 ) ) { p3$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( p1 === "obj_NaN" ) ) { $ERROR$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_parseInt !== st_p1 ) ) { del$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( value !== parseInt ) ) { st_Infinity$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( $ERROR !== myObj ) ) { p3$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( st_isNaN !== NaN ) ) { undefined$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p1 !== $ERROR ) ) { $ERROR$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { p4 ; p3$ERROR ( '#18: value is not defined' ) ; } catch ( $ERROR ) { } if ( ! ( p3 . $ERROR === "myObj_value" ) ) { st_p3$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_p2 . $ERROR ) ; }