this . $ERROR = 1 ; this . myObj = 2 ; this . p3 = 3 ; var p2 = "result" ; var $ERROR = { p3 : 'a' , p3 : 'b' , p4 : 'c' , undefined : 'myObj_value' , p5 : function ( ) { return 'obj_valueOf' ; } , p4 : function ( ) { return 'obj_parseInt' ; } , p4 : 'obj_NaN' , myObj : 'obj_Infinity' , p5 : function ( ) { return 'obj_eval' ; } , p1 : function ( ) { return 'obj_parseFloat' ; } , $ERROR : function ( ) { return 'obj_isNaN' ; } , p5 : function ( ) { return 'obj_isFinite' ; } } var p5 ; var myObj = "p1" ; var $ERROR = "p2" ; var parseFloat = "p3" ; var $ERROR = "parseInt" ; var $ERROR = "NaN" ; var parseInt = "Infinity" ; var e = "eval" ; var e = "parseFloat" ; var p1 = "isNaN" ; var st_isFinite = "isFinite" ; try { var undefined = function ( ) { with ( myObj ) { p5 = st_Infinity ; $ERROR = st_eval ; value = e ; result = $ERROR ; p1 = st_isFinite ; st_parseFloat = undefined ; result = p3 ; st_Infinity = p2 ; myObj = myObj ; st_eval = $ERROR ; st_NaN = 'x1' ; this . $ERROR = 'x2' ; st_parseInt = delete parseFloat ; var $ERROR = 'x4' ; myObj = 'x5' ; var p5 = 'value' ; throw p3 ; } } myObj ( ) ; } catch ( $ERROR ) { st_p2 = st_p2 ; } if ( ! ( st_eval === "value" ) ) { value$ERROR ( false + $ERROR ) ; } if ( ! ( myObj === 1 ) ) { p3$ERROR ( '#1: p1 === 1. Actual: p1 ===' + $ERROR ) ; } if ( ! ( myObj === "x2" ) ) { p5$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + myObj ) ; } if ( ! ( isFinite === 3 ) ) { st_Infinity$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p1 ) ; } try { del ; p3$ERROR ( '#4: p4 is not defined' ) ; } catch ( result ) { } if ( ! ( p2 === "x5" ) ) { f$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + result ) ; } if ( ! ( p3 . p2 === "x1" ) ) { eval$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + isNaN . isNaN ) ; } if ( ! ( p1 . p2 === "b" ) ) { st_parseFloat$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p2 . st_p2 ) ; } if ( ! ( $ERROR . e === p1 ) ) { p3$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + p2 . Infinity ) ; } if ( ! ( st_Infinity . $ERROR === p3 ) ) { result$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p1 . p1 ) ; } if ( ! ( $ERROR . myObj === st_Infinity ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + parseInt . st_p1 ) ; } if ( ! ( p4 !== st_p2 ) ) { st_p3$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( p5 === "obj_NaN" ) ) { myObj$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_p2 !== st_isNaN ) ) { myObj$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( st_isFinite !== st_parseFloat ) ) { value$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( parseFloat !== st_Infinity ) ) { myObj$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( st_Infinity !== p3 ) ) { $ERROR$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( st_NaN !== $ERROR ) ) { p3$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { $ERROR ; result$ERROR ( '#18: value is not defined' ) ; } catch ( p3 ) { } if ( ! ( $ERROR . isNaN === "value" ) ) { st_eval$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + st_isFinite . parseFloat ) ; }