function testcase ( ) { function temp function ( x , y ) { return y - x ; } { function ( ) <missing '{'> a . byteOffset == 0 ) ; check ( function ( ) <missing '{'> a . buffer <missing '}'> ) ; check ( function ( ) <missing '{'> a . buffer . byteLength == 80 ) ; var b = new Uint8Array ( a . buffer , 4 , 4 ) ; check ( function ( ) <missing '{'> b ) ; check ( function ( ) <missing '{'> b . length == 4 ) ; check ( function ( ) <missing '{'> b . byteLength == 4 ) ; check ( function ( ) <missing '{'> a . buffer == b . buffer <missing '}'> ) ; b [ 0 ] = 0xaa ; b [ 1 ] = 0xbb ; b [ 2 ] = 0xcc ; b [ 3 ] = 0xdd ; check ( function ( ) <missing '{'> a [ 0 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 1 ] != 0 ) ; check ( function ( ) <missing '{'> a [ 2 ] == 0 ) ; buf = new ArrayBuffer ( 4 ) ; check ( function ( ) <missing '{'> ( new Int8Array ( buf ) ) . length == 4 ) ; check ( function ( ) <missing '{'> ( new Uint8Array ( buf ) ) . length == 4 ) ; check ( function ( ) <missing '{'> ( new Int16Array ( buf ) ) . length == 2 ) ; check ( function ( ) <missing '{'> ( new Uint16Array ( buf ) ) . length == 2 ) ; check ( function ( ) <missing '{'> ( new Int32Array ( buf ) ) . length == 1 ) ; check ( function ( ) <missing '{'> ( new Uint32Array ( buf ) ) . length == 1 ) ; check ( function ( ) <missing '{'> ( new Float32Array ( buf ) ) . length == 1 ) ; checkThrows ( function ( ) <missing '{'> ( new Float64Array ( buf ) ) ) ; buf2 = new ArrayBuffer ( 8 ) ; check ( function ( ) <missing '{'> ( new Float64Array ( buf2 ) ) . length == 1 ) ; buf = new ArrayBuffer ( 5 ) ; check ( function ( ) <missing '{'> buf ) ; check ( function ( ) <missing '{'> buf . byteLength == 5 ) ; check ( function ( ) <missing '{'> new Int32Array ( buf , 0 , 1 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Int32Array ( buf , 0 ) <missing '}'> ) ; check ( function ( ) <missing '{'> new Int8Array ( buf , 0 ) <missing '}'> ) ; check ( function ( ) <missing '{'> ( new Int8Array ( buf , 3 ) ) . byteLength == 2 ) ; checkThrows ( function ( ) <missing '{'> new Int8Array ( buf , 500 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Int8Array ( buf , 0 , 50 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( buf , 500 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( buf , 0 , 50 ) <missing '}'> ) ; var sl = a . subarray ( 5 , 10 ) ; check ( function ( ) <missing '{'> sl . length == 5 ) ; check ( function ( ) <missing '{'> sl . buffer == a . buffer <missing '}'> ) ; check ( function ( ) <missing '{'> sl . byteLength == 20 ) ; check ( function ( ) <missing '{'> sl . byteOffset == 20 ) ; check ( function ( ) <missing '{'> a . subarray ( 5 , 5 ) . length == 0 ) ; check ( function ( ) <missing '{'> a . subarray ( - 5 ) . length == 5 ) ; check ( function ( ) <missing '{'> a . subarray ( - 100 ) . length == 20 ) ; check ( function ( ) <missing '{'> a . subarray ( 0 , 2 ) . length == 2 ) ; check ( function ( ) <missing '{'> a . subarray ( ) . length == a . length <missing '}'> ) ; check ( function ( ) <missing '{'> a . subarray ( - 7 , - 5 ) . length == 2 ) ; check ( function ( ) <missing '{'> a . subarray ( - 5 , - 7 ) . length == 0 ) ; check ( function ( ) <missing '{'> a . subarray ( 15 ) . length == 5 ) ; a = new Uint8Array ( [ 0xaa , 0xbb , 0xcc ] ) ; check ( function ( ) <missing '{'> a . length == 3 ) ; check ( function ( ) <missing '{'> a . byteLength == 3 ) ; check ( function ( ) <missing '{'> a [ 1 ] == 0xbb ) ; checkThrows ( function ( ) <missing '{'> new Int32Array ( [ 0xaa , "foo" , 0xbb ] ) , TODO ) ; checkThrows ( function ( ) <missing '{'> new Int32Array ( - 100 ) <missing '}'> ) ; a = new Uint8Array ( 3 ) ; check ( function ( ) <missing '{'> ( a [ 0 ] = "10" ) && ( a [ 0 ] == 10 ) ) ; a = new Uint8ClampedArray ( 4 ) ; a [ 0 ] = 128 ; a [ 1 ] = 512 ; a [ 2 ] = - 123.723 ; a [ 3 ] = "foopy" ; check ( function ( ) <missing '{'> a [ 0 ] == 128 ) ; check ( function ( ) <missing '{'> a [ 1 ] == 255 ) ; check ( function ( ) <missing '{'> a [ 2 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 3 ] == 0 ) ; var x = Array ( 5 ) ; x [ 0 ] = "hello" ; x [ 1 ] = { } ; x [ 3 ] = undefined ; x [ 4 ] = true ; a = new Uint8Array ( x ) ; check ( function ( ) <missing '{'> a [ 0 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 1 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 2 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 3 ] == 0 ) ; check ( function ( ) <missing '{'> a [ 4 ] == 1 ) ; a = new Float32Array ( x ) ; check ( function ( ) <missing '{'> ! ( a [ 0 ] == a [ 0 ] ) ) ; check ( function ( ) <missing '{'> ! ( a [ 1 ] == a [ 1 ] ) ) ; check ( function ( ) <missing '{'> ! ( a [ 2 ] == a [ 2 ] ) ) ; check ( function ( ) <missing '{'> ! ( a [ 3 ] == a [ 3 ] ) ) ; check ( function ( ) <missing '{'> a [ 4 ] == 1 ) ; var empty = new Int32Array ( 0 ) ; a = new Int32Array ( 9 ) ; empty . set ( [ ] ) ; empty . set ( [ ] , 0 ) ; empty . set ( empty ) ; checkThrows ( function ( ) <missing '{'> empty . set ( [ 1 ] ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> empty . set ( [ 1 ] , 0 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> empty . set ( [ 1 ] , 1 ) <missing '}'> ) ; a . set ( [ ] ) ; a . set ( [ ] , 3 ) ; a . set ( [ ] , 9 ) ; a . set ( a ) ; a . set ( empty ) ; a . set ( empty , 3 ) ; a . set ( empty , 9 ) ; a . set ( Array . prototype ) ; checkThrows ( function ( ) <missing '{'> a . set ( empty , 100 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 0 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 0x7fffffff ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 0xffffffff ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 6 ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( new Array ( 0x7fffffff ) ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> a . set ( [ 1 , 2 , 3 ] , 2147483647 ) <missing '}'> ) ; a . set ( ArrayBuffer . prototype ) ; a . set ( Int16Array . prototype ) ; a . set ( Int32Array . prototype ) ; a . set ( [ 1 , 2 , 3 ] ) ; a . set ( [ 4 , 5 , 6 ] , 3 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 1 && a [ 1 ] == 2 && a [ 2 ] == 3 && a [ 3 ] == 4 && a [ 4 ] == 5 && a [ 5 ] == 6 && a [ 6 ] == 0 && a [ 7 ] == 0 && a [ 8 ] == 0 ) ; b = new Float32Array ( [ 7 , 8 , 9 ] ) ; a . set ( b , 0 ) ; a . set ( b , 3 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 7 && a [ 1 ] == 8 && a [ 2 ] == 9 && a [ 3 ] == 7 && a [ 4 ] == 8 && a [ 5 ] == 9 && a [ 6 ] == 0 && a [ 7 ] == 0 && a [ 8 ] == 0 ) ; a . set ( a . subarray ( 0 , 3 ) , 6 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 7 && a [ 1 ] == 8 && a [ 2 ] == 9 && a [ 3 ] == 7 && a [ 4 ] == 8 && a [ 5 ] == 9 && a [ 6 ] == 7 && a [ 7 ] == 8 && a [ 8 ] == 9 ) ; a . set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) ; a . set ( a . subarray ( 0 , 6 ) , 3 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 1 && a [ 1 ] == 2 && a [ 2 ] == 3 && a [ 3 ] == 1 && a [ 4 ] == 2 && a [ 5 ] == 3 && a [ 6 ] == 4 && a [ 7 ] == 5 && a [ 8 ] == 6 ) ; a . set ( a . subarray ( 3 , 9 ) , 0 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 1 && a [ 1 ] == 2 && a [ 2 ] == 3 && a [ 3 ] == 4 && a [ 4 ] == 5 && a [ 5 ] == 6 && a [ 6 ] == 4 && a [ 7 ] == 5 && a [ 8 ] == 6 ) ; a . subarray ( 0 , 3 ) . set ( a . subarray ( 3 , 6 ) , 0 ) ; check ( function ( ) <missing '{'> a [ 0 ] == 4 && a [ 1 ] == 5 && a [ 2 ] == 6 && a [ 3 ] == 4 && a [ 4 ] == 5 && a [ 5 ] == 6 && a [ 6 ] == 4 && a [ 7 ] == 5 && a [ 8 ] == 6 ) ; a = new ArrayBuffer ( 0x10 ) ; checkThrows ( function ( ) <missing '{'> new Uint32Array ( buffer , 4 , 0x3FFFFFFF ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( null ) <missing '}'> ) ; a = new Uint8Array ( 0x100 ) ; checkThrows ( function ( ) <missing '{'> Uint32Array . prototype . subarray . apply ( a , [ 0 , 0x100 ] ) <missing '}'> ) ; check ( function ( ) <missing '{'> new Int32Array ( ArrayBuffer . prototype ) . length == 0 ) ; check ( function ( ) <missing '{'> new Int32Array ( Int32Array . prototype ) . length == 0 ) ; check ( function ( ) <missing '{'> new Int32Array ( Float64Array . prototype ) . length == 0 ) ; check ( function ( ) <missing '{'> Int32Array . BYTES_PER_ELEMENT == 4 ) ; check ( function ( ) <missing '{'> ( new Int32Array ( 4 ) ) . BYTES_PER_ELEMENT == 4 ) ; check ( function ( ) <missing '{'> ( new Int32Array ( ) ) . BYTES_PER_ELEMENT == 4 ) ; check ( function ( ) <missing '{'> ( new Int32Array ( 0 ) ) . BYTES_PER_ELEMENT == 4 ) ; check ( function ( ) <missing '{'> Int16Array . BYTES_PER_ELEMENT == Uint16Array . BYTES_PER_ELEMENT <missing '}'> ) ; check ( function ( ) <missing '{'> ( new Float32Array ( Math . sqrt ( 4 ) ) ) . length == 2 ) ; check ( function ( ) <missing '{'> ( new Float32Array ( { length : 10 } ) ) . length == 10 ) ; check ( function ( ) <missing '{'> ( new Float32Array ( { } ) ) . length == 0 ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( "3" ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( null ) <missing '}'> ) ; checkThrows ( function ( ) <missing '{'> new Float32Array ( undefined ) <missing '}'> ) ; check ( function ( ) <missing '{'> ( new Int32Array ( [ NaN ] ) [ 0 ] ) == 0 ) ; check ( function ( ) { var q = new Float32Array ( [ NaN ] ) [ 0 ] ; return q != q ; } ) ; print ( "done" ) ; reportCompare ( 0 , TestFailCount , "typed array tests" ) ; exitFunc ( 'test' ) ; }} try { foo . = 41 ; return false ; } catch ( e ) { return e instanceof TypeError ; } } runTestCase ( testcase ) ;