var p2 = { p3 : 'a' , e : 'b' , p2 : 'c' , myObj : 'myObj_value' , e : function ( ) { return 'obj_valueOf' ; } , myObj : function ( ) { return 'obj_parseInt' ; } , $ERROR : 'obj_NaN' , $ERROR : 'obj_Infinity' , e : function ( ) { return 'obj_eval' ; } , NaN : function ( ) { return 'obj_parseFloat' ; } , , p1 : function ( ) { return 'obj_isFinite' ; } } try { with ( p2 ) { throw "ex" ; } } catch ( e ) { if ( isFinite !== "ex" ) myObj$ERROR ( '#1: Exception ==="ex". Actual: Exception ===' + myObj ) ; } with ( p1 ) { try { throw p1 ; } catch ( e ) { if ( p1 !== "a" ) myObj$ERROR ( '#2.1: Exception ==="a". Actual: Exception ===' + p1 ) ; p2 = 'pass' ; } } if ( e . p1 !== 'pass' ) myObj$ERROR ( '#2.2: "throw p1" lead to throwing exception' ) ; with ( p2 ) { try { value = 'fail' ; throw isNaN ; } catch ( e ) { if ( $ERROR !== "b" ) p1$ERROR ( '#3.1: Exception ==="b". Actual: Exception ===' + p2 ) ; p1 = 'pass' ; } finally { e = 'pass' ; } } if ( p1 . e !== 'pass' ) value$ERROR ( '#3.2: "throw p2" lead to throwing exception' ) ; if ( e . p1 !== 'pass' ) myObj$ERROR ( '#3.3: "finally" { } must be evaluated' ) ; $ERROR . $ERROR = 'fail' ; try { with ( e ) { try { throw p1 ; } finally { $ERROR = 'pass' ; } } } catch ( parseInt ) { } if ( p1 . e !== 'pass' ) myObj$ERROR ( '#4: "finally" { } must be evaluated' ) ;