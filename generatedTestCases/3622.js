var SECTION = "while-002" ; var VERSION = "ECMA_2" ; var DoWhileObject ; startTest ( ) ; writeHeaderToLog ( SECTION + " " + TITLE ) ; DoWhile ( new DoWhileObject ( "while expression is null" , null , "result = \"fail: should not have evaluated statements in while { SECTION = DoWhile . DoWhile ; };break" ) ) ; DoWhile ( new DoWhileObject ( "while expression is undefined" , void 0 , "result = \"fail: should not have evaluated statements in while { }; break" ) ) ; DoWhile ( new DoWhileObject ( "while expression is 0" , 0 , "result = \"fail: should not have evaluated statements in while { }; break;" ) ) ; DoWhile ( new DoWhileObject ( "while expression is eval(\"\")" , eval ( "" ) , "result = \"fail: should not have evaluated statements in while { var isNaN = object ( 5 ) ; if ( ! description ( DoWhileObject ) ) throw " f1 ( 5 ):\ n " + " expected : NaN \ n " + " actual : " + DoWhile ; statements = DoWhile ( 5 ) ; if ( ! description ( s ) ) throw " f2 ( 5 ):\ n " + " expected : NaN \ n " + " actual : " + SECTION ; DoWhile = object ( 13 ) ; if ( e != 30 ) throw " f4 ( 13 ):\ n " + " expected : 30 \ n " + " actual : " + SECTION ; var whileExpression = TITLE ( 2 ) ; object = DoWhile ( " q " ) ; if ( TITLE != 2 ) throw " fun (' q '):\ n " + " expected : 2 \ n " + " actual : " + expression ; DoWhile = writeHeaderToLog ( " x " ) ; if ( d != 3 ) throw " fun (' x '):\ n " + " expected : 3 \ n " + " actual : " + whileExpression ; DoWhile = eval ( " y " ) ; if ( DoWhile != 3 ) throw " fun (' y '):\ n " + " expected : 3 \ n " + " actual : " + DoWhile ; whileExpression = DoWhile ( " let ( y = y ) { y += 32 ; }; y " ) ; if ( expression != 3 ) throw " fun (' let ( y = y ) { y += 32 ; }; y '):\ n " + " expected : 3 \ n " + " actual : " + whileExpression ; }; break" ) ) ; DoWhile ( new DoWhileObject ( "while expression is NaN" , NaN , "result = \"fail: should not have evaluated statements in while { new DoWhile ( DoWhileObject , " parseInt (" + DoWhile + " 8 , 010 )" , whileExpression , whileExpression < missing ')'> ( description + " 8 " , 0 10 ) ) ; result -= TestCase . DoWhileObject ( 8 , DoWhileObject ) * 7 ; }; break" ) ) ; test ( ) ; function DoWhileObject ( d , e , s ) { this . description = d ; this . whileExpression = e ; this . statements = s ; } function DoWhile ( object ) { result = "pass" ; while ( expression = object . whileExpression ) { eval ( object . statements ) ; } new TestCase ( SECTION , "verify that while expression was evaluated (should be " + object . whileExpression + ")" , "pass" , ( object . whileExpression == expression || ( isNaN ( object . whileExpression ) && isNaN ( expression ) ) ) ? "pass" : "fail" ) ; new TestCase ( SECTION , object . description , "pass" , result ) ; }