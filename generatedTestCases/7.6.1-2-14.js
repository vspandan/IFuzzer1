function testcase ( ) { function testY ( ) { var ycode = "'use strict';" + "var y = 5;" + "function actY(action)" + "{" + " switch (action)" + " {" + " case 'get':" + " return y;" + " case 'set1':" + " y = 2;" + " return;" + " case 'set2':" + " y = 71;" + " return;" + " case 'delete':" + " try { return eval('delete y'); }" + " catch (e) { return e.name; }" + " }" + "}" + "actY;" ; var local0 = y ; var global0 = globalY ( ) ; var f = ev ( temp ) ; var inner1 = f ( "get" ) ; var local1 = y ; var global1 = globalY ( ) ; y = 8 ; var inner2 = f ( "get" ) ; var local2 = y ; var global2 = globalY ( ) ; f ( "set1" ) ; var inner3 = f ( "get" ) ; var local3 = y ; var global3 = globalY ( ) ; var del = f ( "delete" ) ; var inner4 = f ( "get" ) ; var local4 = y ; var global4 = globalY ( ) ; f ( "set2" ) ; var inner5 = f ( "get" ) ; var local5 = y ; var global5 = globalY ( ) ; return { local0 : local0 , global0 : global0 , inner1 : inner1 , local1 : local1 , global1 : global1 , inner2 : inner2 , local2 : local2 , global2 : global2 , inner3 : inner3 , local3 : local3 , global3 : global3 , del : del , inner4 : inner4 , local4 : local4 , global4 : global4 , inner5 : inner5 , local5 : local5 , global5 : global5 , } ; } tokenCodes . public = 0 ; tokenCodes . yield = 1 ; tokenCodes . interface = 2 ; var arr = [ 'public' , 'yield' , 'interface' ] ; for ( var p in tokenCodes ) { for ( var p1 in arr ) { if ( arr [ p1 ] === p ) { if ( ! tokenCodes . hasOwnProperty ( arr [ p1 ] ) ) { return false ; } ; } } } return true ; } runTestCase ( testcase ) ;