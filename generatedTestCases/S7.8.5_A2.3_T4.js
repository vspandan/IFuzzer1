try { eval ( "/a\u000D/" ) . source try { var identifier ; var table = [ [ "if (!!true)" , "" ] , [ "if (!!true)" , " else foopy();" ] , [ "if (!true); else" , "" ] , [ "do " , " while (false);" ] , [ "while (--n)" , "" ] , [ "for (--n;n;--n)" , "" ] , [ "for (a in this)" , "" ] , [ "with (this)" , "" ] , ] ; this = 3 ; for ( i = 0 ; i < table . length ; i ++ ) { var src = pfx + table [ i ] [ 0 ] + decl + table [ i ] [ 1 ] + end ; print ( 'src: ' + src ) ; var fun = eval ( src ) ; var testval = fun ( ) ; reportCompare ( expect , testval , summary + ': ' + src ) ; if ( testval != expect ) { break ; } print ( 'uneval: ' + uneval ( fun ) ) ; var declsrc = '(' + src . slice ( 1 , - 1 ) . replace ( 'function f' , 'function f' + i ) + ')' ; print ( 'declsrc: ' + declsrc ) ; this [ 'f' + i ] = eval ( declsrc ) ; print ( 'f' + i + ': ' + this [ 'f' + i ] ) ; } } Catch identifier block $ERROR ( '#1.1: RegularExpressionChar :: Carriage Retur is incorrect. Actual: ' + ( eval ( "/a\u000D/" ) . source ) ) ; } catch ( e ) { if ( ( e instanceof SyntaxError ) !== true ) { $ERROR ( '#1.2: RegularExpressionChar :: Carriage Retur is incorrect. Actual: ' + ( e ) ) ; } }