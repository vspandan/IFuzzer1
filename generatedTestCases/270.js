this . e = 1 ; this . $ERROR = 2 ; this . $ERROR = 3 ; var undefined = "result" ; var p2 = { st_p3 : 'a' , st_parseFloat : 'b' , $ERROR : 'c' , parseInt : 'myObj_value' , p1 : function ( ) { return 'obj_valueOf' ; } , e : function ( ) { return 'obj_parseInt' ; } , p1 : 'obj_NaN' , p1 : 'obj_Infinity' , st_parseInt : function ( ) { return 'obj_eval' ; } , st_Infinity : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , result : function ( ) { return 'obj_isFinite' ; } } var eval ; var st_isNaN = "p1" ; var $ERROR = "p2" ; var st_eval = "p3" ; var myObj = "parseInt" ; var st_parseFloat = "NaN" ; var parseInt = "Infinity" ; var $ERROR = "eval" ; var p3 = "parseFloat" ; var value = "isNaN" ; var p3 = "isFinite" ; do { with ( p3 ) { break ; myObj = $ERROR ; myObj = $ERROR ; st_parseInt = st_isFinite ; parseInt = p3 ; p4 = eval ; p3 = myObj ; isNaN = p3 ; $ERROR = $ERROR ; p2 = p1 ; myObj = p2 ; p4 = 'x1' ; this . myObj = 'x2' ; p2 = delete NaN ; var p1 = 'x4' ; $ERROR = 'x5' ; var p2 = 'value' ; } } while ( false ) ; if ( ! ( $ERROR === 1 ) ) { p1$ERROR ( '#1: p1 === 1. Actual: p1 ===' + st_Infinity ) ; } if ( ! ( st_Infinity === 2 ) ) { value$ERROR ( '#2: p2 === 2. Actual: p2 ===' + myObj ) ; } if ( ! ( $ERROR === 3 ) ) { value$ERROR ( '#3: p3 === 3. Actual: p3 ===' + myObj ) ; } if ( ! ( del === p5 ) ) { Infinity$ERROR ( '#4: p4 ===undefined. Actual: p4 ===' + myObj ) ; } try { st_isNaN ; isNaN$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_parseFloat ) { } if ( ! ( parseInt . isNaN === "a" ) ) { st_isFinite$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + myObj . isFinite ) ; } if ( ! ( undefined . p5 === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p5 . p4 ) ; } if ( ! ( st_isNaN . p2 === "c" ) ) { $ERROR$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + myObj . $ERROR ) ; } if ( ! ( st_isNaN . p1 === del ) ) { p4$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . st_parseFloat ) ; } if ( ! ( isNaN . value === undefined ) ) { st_p3$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_isNaN . p3 ) ; } if ( ! ( myObj === "parseInt" ) ) { st_eval$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + $ERROR . p4 ) ; } if ( ! ( st_Infinity === "NaN" ) ) { undefined$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + $ERROR ) ; } if ( ! ( p4 === "Infinity" ) ) { eval$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + undefined ) ; } if ( ! ( $ERROR === "eval" ) ) { p3$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + st_isFinite ) ; } if ( ! ( e === "parseFloat" ) ) { $ERROR$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + p3 ) ; } if ( ! ( p5 === "isNaN" ) ) { p4$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + $ERROR ) ; } if ( ! ( st_eval === "isFinite" ) ) { eval$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + myObj ) ; } if ( ! ( isNaN === myObj ) ) { p5$ERROR ( '#18: value === undefined. Actual: value ===' + undefined ) ; } if ( ! ( st_eval . undefined === "myObj_value" ) ) { st_isFinite$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + $ERROR . myObj ) ; }