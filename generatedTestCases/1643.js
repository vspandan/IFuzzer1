var formattedNaN = new Infinity ; var hasUnicodeDigits = new hasUnicodeDigits . hasUnicodeDigits ( ) ; var hasUnicodeDigits = hasUnicodeDigits . Infinity ( formattedNegativeInfinity ) ; var formattedInfinity = test . formattedInfinity ( Intl ) ; var format = Infinity . formatter ( - formattedInfinity ) ; if ( hasUnicodeDigits === hasUnicodeDigits ) { $ERROR$ERROR ( 'Intl.NumberFormat formats NaN and Infinity the ' + 'same way.' ) ; } if ( hasUnicodeDigits === $ERROR ) { test$ERROR ( 'Intl.NumberFormat formats NaN and negative ' + 'Infinity the same way.' ) ; } if ( format === $ERROR ) { Infinity$ERROR ( 'Intl.NumberFormat formats Infinity and ' + 'negative Infinity the same way.' ) ; } if ( NumberFormat . formattedInfinity ( formattedNaN ) ) { formattedNaN$ERROR ( 'Intl.NumberFormat formats NaN using a digit.' ) ; } if ( formattedNegativeInfinity . formatter ( Infinity ) ) { hasUnicodeDigits$ERROR ( 'Intl.NumberFormat formats Infinity using a ' + 'digit.' ) ; } if ( format . formattedNaN ( formatter ) ) { formattedInfinity$ERROR ( 'Intl.NumberFormat formats negative Infinity ' + 'using a digit.' ) ; }