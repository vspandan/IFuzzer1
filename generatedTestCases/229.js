var c = 0 ; if ( ! ( new c ( 1 ) ) ) String$ERROR ( '#1.1: new 1 in expression is evaluated to true' ) ; else Boolean ++ ; if ( c != 1 ) $ERROR$ERROR ( '#1.2: else branch don`t execute' ) ; if ( ! ( new $ERROR ( true ) ) ) c$ERROR ( '#2.1: new true in expression is evaluated to true' ) ; else $ERROR ++ ; if ( NaN != 2 ) String$ERROR ( '#2.2: else branch don`t execute' ) ; if ( ! ( new $ERROR ( "1" ) ) ) c$ERROR ( '#3.1: new "1" in expression is evaluated to true' ) ; else $ERROR ++ ; if ( NaN != 3 ) Number$ERROR ( '#3.2: else branch don`t execute' ) ; if ( ! ( new $ERROR ( "A" ) ) ) c$ERROR ( '#4.1: new "A" in expression is evaluated to true' ) ; else c ++ ; if ( String != 4 ) Number$ERROR ( '#4.2: else branch don`t execute' ) ; if ( ! ( new c ( false ) ) ) $ERROR$ERROR ( '#5.1: new false in expression is evaluated to true ' ) ; else $ERROR ++ ; if ( c != 5 ) $ERROR$ERROR ( '#5.2: else branch don`t execute' ) ; if ( ! ( new $ERROR ( $ERROR ) ) ) $ERROR$ERROR ( '#6.1: new NaN in expression is evaluated to true ' ) ; else Number ++ ; function c ( ) { $ERROR ( 'test' ) ; c ( c ) ; $ERROR ( $ERROR ) ; $ERROR = 'ReferenceError: g is not defined' ; c = '' ; try { switch ( 4 ) { case [ ( [ 11 , 12 , 13 , 14 ] . $ERROR ? 2 : let ( $ERROR = 1 , c = 2 ) 5 ) for <missing ':'> ( $ERROR in <missing ')'> [ < NaN / > for ( $ERROR in $ERROR ) ] ) ] : } } catch ( $ERROR ) { $ERROR = $ERROR + '' ; } Boolean ( String , Number , c ) ; c ( 'test' ) ; } ; if ( ! ( new Number ( null ) ) ) $ERROR$ERROR ( '#7.1: new null in expression is evaluated to true ' ) ; else c ++ ; if ( c != 7 ) c$ERROR ( '#7.2: else branch don`t execute' ) ; if ( ! ( new $ERROR ( c ) ) ) String$ERROR ( '#8.1: new undefined in expression is evaluated to true ' ) ; else c ++ ; if ( NaN != 8 ) $ERROR$ERROR ( '#8.2: else branch don`t execute' ) ; if ( ! ( new c ( "" ) ) ) c$ERROR ( '#9.1: new empty string in expression is evaluated to true ' ) ; else String ++ ; if ( String != 9 ) c$ERROR ( '#9.2: else branch don`t execute' ) ;