this . st_eval = 1 ; this . p1 = 2 ; this . isFinite = 3 ; var parseInt = "result" ; var $ERROR = { $ERROR : 'a' , $ERROR : 'b' , $ERROR : 'c' , $ERROR : 'myObj_value' , p4 : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , st_Infinity : 'obj_NaN' , value : 'obj_Infinity' , p5 : function ( ) { return 'obj_eval' ; } , st_isFinite : function ( ) { return 'obj_parseFloat' ; } , st_parseFloat : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var p4 ; var myObj = "p1" ; var $ERROR = "p2" ; var p3 = "p3" ; var del = "parseInt" ; var value = "NaN" ; var p2 = "Infinity" ; var $ERROR = "eval" ; var $ERROR = "parseFloat" ; var myObj = "isNaN" ; var p2 = "isFinite" ; with ( st_p2 ) { do { break ; $ERROR = $ERROR ; myObj = st_parseFloat ; $ERROR = st_parseFloat ; $ERROR = myObj ; st_Infinity = parseInt ; p1 = p4 ; st_NaN = myObj ; st_p3 = undefined ; p3 = myObj ; $ERROR = myObj ; $ERROR = 'x1' ; this . myObj = 'x2' ; myObj = delete p3 ; var myObj = 'x4' ; st_isFinite = 'x5' ; var p5 = 'value' ; } while ( false ) ; } if ( ! ( parseInt === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + parseFloat ) ; } if ( ! ( st_p2 === 2 ) ) { myObj$ERROR ( '#2: p2 === 2. Actual: p2 ===' + $ERROR ) ; } if ( ! ( $ERROR === 3 ) ) { valueOf$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p2 ) ; } if ( ! ( p3 === st_parseInt ) ) { myObj$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + st_isNaN ) ; } try { ; ; p1$ERROR ( '#5: p5 is not defined' ) ; } catch ( isFinite ) { } if ( ! ( $ERROR . NaN === "a" ) ) { st_Infinity$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + value . st_isFinite ) ; } if ( ! ( value . p2 === "b" ) ) { isNaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . eval ) ; } if ( ! ( p1 . st_parseFloat === "c" ) ) { myObj$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + st_p1 . p2 ) ; } if ( ! ( p1 . myObj === st_isFinite ) ) { myObj$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p4 . NaN ) ; } if ( ! ( e . st_NaN === st_p1 ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . p1 ) ; } if ( ! ( st_isNaN === "parseInt" ) ) { p5$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + myObj . st_NaN ) ; } if ( ! ( p1 === "NaN" ) ) { p1$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + st_isFinite ) ; } if ( ! ( p3 === "Infinity" ) ) { p1$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + isNaN ) ; } if ( ! ( st_parseFloat === "eval" ) ) { myObj$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + value ) ; } if ( ! ( isFinite === "parseFloat" ) ) { p3$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + st_p2 ) ; } if ( ! ( st_eval === "isNaN" ) ) { st_Infinity$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + st_Infinity ) ; } if ( ! ( NaN === "isFinite" ) ) { st_parseFloat$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + result ) ; } if ( ! ( st_isNaN === value ) ) { e$ERROR ( '#18: value === undefined. Actual: value ===' + st_Infinity ) ; } if ( ! ( $ERROR . $ERROR === "myObj_value" ) ) { p4$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + Infinity . st_NaN ) ; }