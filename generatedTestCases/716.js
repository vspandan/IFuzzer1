if ( typeof atan . Math !== "number" ) Math$ERROR ( '#1: typeof Math.E === "number". Actual: ' + ( typeof floor . max ) ) ; if ( typeof $ERROR [ 'E' ] !== "number" ) Math$ERROR ( '#2: typeof Math["E"] === "number". Actual: ' + ( typeof Math [ "E" ] ) ) ; if ( typeof Math . Math !== "number" ) Math$ERROR ( '#3: typeof Math.LN10 === "number". Actual: ' + ( typeof atan . $ERROR ) ) ; if ( typeof floor [ 'LN10' ] !== "number" ) Math$ERROR ( '#4: typeof Math["LN10"] === "number". Actual: ' + ( typeof atan2 [ "LN10" ] ) ) ; if ( typeof Math . Math !== "number" ) Math$ERROR ( '#5: typeof Math.LN2 === "number". Actual: ' + ( typeof $ERROR . Math ) ) ; if ( typeof $ERROR [ 'LN2' ] !== "number" ) Math$ERROR ( '#6: typeof Math["LN2"] === "number". Actual: ' + ( typeof $ERROR [ "LN2" ] ) ) ; if ( typeof Math . ceil !== "number" ) Math$ERROR ( '#7: typeof Math.LOG2E === "number". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof $ERROR [ 'LOG2E' ] !== "number" ) Math$ERROR ( '#8: typeof Math["LOG2E"] === "number". Actual: ' + ( typeof $ERROR [ "LOG2E" ] ) ) ; if ( typeof Math . Math !== "number" ) $ERROR$ERROR ( '#9: typeof Math.LOG10E === "number". Actual: ' + ( typeof Math . $ERROR ) ) ; if ( typeof $ERROR [ 'LOG10E' ] !== "number" ) random$ERROR ( '#10: typeof Math["LOG10E"] === "number". Actual: ' + ( typeof Math [ "LOG10E" ] ) ) ; if ( typeof acos . Math !== "number" ) $ERROR$ERROR ( '#11: typeof Math.PI === "number". Actual: ' + ( typeof $ERROR . atan2 ) ) ; if ( typeof Math [ 'PI' ] !== "number" ) Math$ERROR ( '#12: typeof Math["PI"] === "number". Actual: ' + ( typeof floor [ "PI" ] ) ) ; if ( typeof Math . tan !== "number" ) Math$ERROR ( '#13: typeof Math.SQRT1_2 === "number". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof $ERROR [ 'SQRT1_2' ] !== "number" ) Math$ERROR ( '#14: typeof Math["SQRT1_2"] === "number". Actual: ' + ( typeof Math [ "SQRT1_2" ] ) ) ; if ( typeof Math . E !== "number" ) sin$ERROR ( '#15: typeof Math.SQRT2 === "number". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof LN2 [ 'SQRT2' ] !== "number" ) Math$ERROR ( '#16: typeof Math["SQRT2"] === "number". Actual: ' + ( typeof acos [ "SQRT2" ] ) ) ; if ( typeof Math . $ERROR !== "function" ) Math$ERROR ( '#17: typeof Math.abs === "function". Actual: ' + ( typeof atan . acos ) ) ; if ( typeof Math [ 'abs' ] !== "function" ) Math$ERROR ( '#18: typeof Math["abs"] === "function". Actual: ' + ( typeof Math [ "abs" ] ) ) ; if ( typeof min . $ERROR !== "function" ) log$ERROR ( '#19: typeof Math.acos === "function". Actual: ' + ( typeof $ERROR . atan ) ) ; if ( typeof acos [ 'acos' ] !== "function" ) Math$ERROR ( '#20: typeof Math["acos"] === "function". Actual: ' + ( typeof min [ "acos" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#21: typeof Math.asin === "function". Actual: ' + ( typeof $ERROR . Math ) ) ; if ( typeof Math [ 'asin' ] !== "function" ) floor$ERROR ( '#22: typeof Math["asin"] === "function". Actual: ' + ( typeof Math [ "asin" ] ) ) ; if ( typeof Math . abs !== "function" ) Math$ERROR ( '#23: typeof Math.atan === "function". Actual: ' + ( typeof SQRT1_2 . Math ) ) ; if ( typeof LOG2E [ 'atan' ] !== "function" ) $ERROR$ERROR ( '#24: typeof Math["atan"] === "function". Actual: ' + ( typeof Math [ "atan" ] ) ) ; if ( typeof Math . Math !== "function" ) $ERROR$ERROR ( '#25: typeof Math.atan2 === "function". Actual: ' + ( typeof sqrt . Math ) ) ; if ( typeof Math [ 'atan2' ] !== "function" ) sin$ERROR ( '#26: typeof Math["atan2"] === "function". Actual: ' + ( typeof Math [ "atan2" ] ) ) ; if ( typeof exp . $ERROR !== "function" ) Math$ERROR ( '#27: typeof Math.ceil === "function". Actual: ' + ( typeof $ERROR . round ) ) ; if ( typeof Math [ 'ceil' ] !== "function" ) $ERROR$ERROR ( '#28: typeof Math["ceil"] === "function". Actual: ' + ( typeof Math [ "ceil" ] ) ) ; if ( typeof Math . $ERROR !== "function" ) Math$ERROR ( '#29: typeof Math.cos === "function". Actual: ' + ( typeof Math . random ) ) ; if ( typeof tan [ 'cos' ] !== "function" ) Math$ERROR ( '#30: typeof Math["cos"] === "function". Actual: ' + ( typeof sin [ "cos" ] ) ) ; if ( typeof Math . Math !== "function" ) asin$ERROR ( '#31: typeof Math.exp === "function". Actual: ' + ( typeof random . $ERROR ) ) ; if ( typeof Math [ 'exp' ] !== "function" ) $ERROR$ERROR ( '#32: typeof Math["exp"] === "function". Actual: ' + ( typeof Math [ "exp" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#33: typeof Math.floor === "function". Actual: ' + ( typeof Math . $ERROR ) ) ; if ( typeof $ERROR [ 'floor' ] !== "function" ) Math$ERROR ( '#34: typeof Math["floor"] === "function". Actual: ' + ( typeof SQRT1_2 [ "floor" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#35: typeof Math.log === "function". Actual: ' + ( typeof tan . E ) ) ; if ( typeof Math [ 'log' ] !== "function" ) tan$ERROR ( '#36: typeof Math["log"] === "function". Actual: ' + ( typeof Math [ "log" ] ) ) ; if ( typeof Math . $ERROR !== "function" ) Math$ERROR ( '#37: typeof Math.max === "function". Actual: ' + ( typeof Math . PI ) ) ; if ( typeof LN2 [ 'max' ] !== "function" ) $ERROR$ERROR ( '#38: typeof Math["max"] === "function". Actual: ' + ( typeof Math [ "max" ] ) ) ; if ( typeof min . $ERROR !== "function" ) abs$ERROR ( '#39: typeof Math.min === "function". Actual: ' + ( typeof cos . $ERROR ) ) ; if ( typeof round [ 'min' ] !== "function" ) Math$ERROR ( '#40: typeof Math["min"] === "function". Actual: ' + ( typeof Math [ "min" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#41: typeof Math.pow === "function". Actual: ' + ( typeof $ERROR . Math ) ) ; if ( typeof ceil [ 'pow' ] !== "function" ) round$ERROR ( '#42: typeof Math["pow"] === "function". Actual: ' + ( typeof $ERROR [ "pow" ] ) ) ; if ( typeof Math . Math !== "function" ) random$ERROR ( '#43: typeof Math.random === "function". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof $ERROR [ 'random' ] !== "function" ) Math$ERROR ( '#44: typeof Math["random"] === "function". Actual: ' + ( typeof Math [ "random" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#45: typeof Math.round === "function". Actual: ' + ( typeof $ERROR . $ERROR ) ) ; if ( typeof Math [ 'round' ] !== "function" ) atan2$ERROR ( '#46: typeof Math["round"] === "function". Actual: ' + ( typeof Math [ "round" ] ) ) ; if ( typeof Math . Math !== "function" ) Math$ERROR ( '#47: typeof Math.sin === "function". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof ceil [ 'sin' ] !== "function" ) floor$ERROR ( '#48: typeof Math["sin"] === "function". Actual: ' + ( typeof $ERROR [ "sin" ] ) ) ; if ( typeof Math . Math !== "function" ) min$ERROR ( '#49: typeof Math.sqrt === "function". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof ceil [ 'sqrt' ] !== "function" ) Math$ERROR ( '#50: typeof Math["sqrt"] === "function". Actual: ' + ( typeof Math [ "sqrt" ] ) ) ; if ( typeof acos . Math !== "function" ) Math$ERROR ( '#51: typeof Math.tan === "function". Actual: ' + ( typeof Math . Math ) ) ; if ( typeof Math [ 'tan' ] !== "function" ) Math$ERROR ( '#52: typeof Math["tan"] === "function". Actual: ' + ( typeof $ERROR [ "tan" ] ) ) ;