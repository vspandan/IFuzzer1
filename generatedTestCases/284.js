this . p3 = 1 ; this . undefined = 2 ; this . p5 = 3 ; var st_Infinity = "result" ; var parseFloat = { p1 : 'a' , myObj : 'b' , result : 'c' , $ERROR : 'myObj_value' , st_eval : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , eval : 'obj_NaN' , e : 'obj_Infinity' , parseInt : function ( ) { return 'obj_eval' ; } , NaN : function ( ) { return 'obj_parseFloat' ; } , NaN : function ( ) { return 'obj_isNaN' ; } , myObj : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var p3 = "p1" ; var parseInt = "p2" ; var e = "p3" ; var e = "parseInt" ; var myObj = "NaN" ; var result = "Infinity" ; var result = "eval" ; var Infinity = "parseFloat" ; var parseFloat = "isNaN" ; var e = "isFinite" ; try { with ( value ) { st_p2 ( "'use strict'; " + eval + ": while (false);" ) ; st_parseInt = "no error" ; } p2 ( ) ; } catch ( $ERROR ) { isNaN = value ; } if ( ! ( result === "value" ) ) { st_isNaN$ERROR ( '#0: result === "value". Actual: result ===' + result ) ; } if ( ! ( st_parseInt === 1 ) ) { result$ERROR ( '#1: p1 === 1. Actual: p1 ===' + e ) ; } if ( ! ( st_p3 === "x2" ) ) { st_NaN$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + isNaN ) ; } if ( ! ( p2 === 3 ) ) { valueOf$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } try { parseInt ; p3$ERROR ( '#4: p4 is not defined' ) ; } catch ( parseInt ) { } if ( ! ( p3 === "x5" ) ) { $ERROR$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_NaN ) ; } if ( ! ( $ERROR . st_NaN === "x1" ) ) { st_parseFloat$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + Infinity . isFinite ) ; } if ( ! ( p4 . st_parseInt === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_parseFloat . p1 ) ; } if ( ! ( $ERROR . del === st_eval ) ) { myObj$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + p3 . value ) ; } if ( ! ( st_isFinite . parseInt === isFinite ) ) { isFinite$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + isFinite . st_isFinite ) ; } if ( ! ( st_parseFloat . parseFloat === myObj ) ) { undefined$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + valueOf . st_isNaN ) ; } if ( ! ( $ERROR !== isFinite ) ) { p1$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( undefined === "obj_NaN" ) ) { e$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( del !== NaN ) ) { st_eval$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( parseInt !== p1 ) ) { result$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_Infinity !== p3 ) ) { p3$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( value !== f ) ) { st_p3$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( st_NaN !== eval ) ) { st_NaN$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { p2 ; p3$ERROR ( '#18: value is not defined' ) ; } catch ( p2 ) { } if ( ! ( value . isFinite === "myObj_value" ) ) { st_eval$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + NaN . st_NaN ) ; }