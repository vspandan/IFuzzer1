this . value = 1 ; this . st_Infinity = 2 ; this . p4 = 3 ; var Infinity = "result" ; var NaN = { e : 'a' , p1 : 'b' , parseFloat : 'c' , parseFloat : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , p1 : function ( ) { return 'obj_parseInt' ; } , Infinity : 'obj_NaN' , e : 'obj_Infinity' , p2 : function ( ) { return 'obj_eval' ; } , result : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , st_p1 : function ( ) { return 'obj_isFinite' ; } } var undefined ; var p1 = "p1" ; var p1 = "p2" ; var p1 = "p3" ; var myObj = "parseInt" ; var p4 = "NaN" ; var undefined = "Infinity" ; var result = "eval" ; var p3 = "parseFloat" ; var p4 = "isNaN" ; var myObj = "isFinite" ; try { do { with ( myObj ) { undefined = st_isFinite ; isFinite = myObj ; p5 = isFinite ; st_eval = $ERROR ; st_eval = result ; $ERROR = isNaN ; p1 = undefined ; $ERROR = st_eval ; myObj = p4 ; st_parseInt = myObj ; isFinite = 'x1' ; this . p3 = 'x2' ; st_p3 = delete p1 ; var st_Infinity = 'x4' ; valueOf = 'x5' ; var myObj = 'value' ; throw $ERROR ; } } while ( false ) ; } catch ( $ERROR ) { $ERROR = parseInt ; } if ( ! ( result === "value" ) ) { Infinity$ERROR ( '#0: result === "value". Actual: result ===' + p1 ) ; } if ( ! ( myObj === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + NaN ) ; } if ( ! ( isNaN === "x2" ) ) { p2$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + isNaN ) ; } if ( ! ( p3 === 3 ) ) { myObj$ERROR ( '#3: p3 === 3. Actual: p3 ===' + value ) ; } if ( ! ( eval === "x4" ) ) { p1$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + st_parseInt ) ; } if ( ! ( p1 === "x5" ) ) { st_isNaN$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + $ERROR ) ; } if ( ! ( myObj . st_parseFloat === "x1" ) ) { value$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + $ERROR . p4 ) ; } if ( ! ( result . result === "b" ) ) { st_NaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + value . st_isNaN ) ; } if ( ! ( st_parseFloat . st_eval === eval ) ) { p4$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_isNaN . result ) ; } if ( ! ( value . p3 === Infinity ) ) { NaN$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . p2 ) ; } if ( ! ( value . $ERROR === p2 ) ) { p4$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + $ERROR . st_p1 ) ; } if ( ! ( st_eval !== st_parseFloat ) ) { undefined$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( st_eval === "obj_NaN" ) ) { p4$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p1 !== $ERROR ) ) { p4$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( parseFloat !== $ERROR ) ) { $ERROR$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( $ERROR !== st_p3 ) ) { undefined$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== p4 ) ) { st_parseInt$ERROR ( function ( ) { return typeof p5 ; } ) ; } if ( ! ( isNaN !== undefined ) ) { myObj$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( st_p1 === p4 ) ) { $ERROR$ERROR ( '#18: value === undefined. Actual: value ===' + st_parseInt ) ; } if ( ! ( p2 . st_p2 === "value" ) ) { myObj$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + parseInt . $ERROR ) ; }