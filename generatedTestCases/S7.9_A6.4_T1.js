var UBound = 0 ; var BUGNUMBER = '' ; var summary = 'Ensuring normal function call of Error (ECMA-262 Ed.3 15.11.1.1)' ; var status = '' ; var statusitems = [ ] ; var actual = '' ; var actualvalues = [ ] ; var expect = '' ; var expectedvalues = [ ] ; var EMPTY_STRING = '' ; var EXPECTED_FORMAT = 0 ; function otherScope ( msg ) { return Error ( msg ) ; } status = inSection ( 1 ) ; var err1 = Error ( 'msg1' ) ; actual = examineThis ( err1 , 'msg1' ) ; expect = EXPECTED_FORMAT ; addThis ( ) ; status = inSection ( 2 ) ; var err2 = otherScope ( 'msg2' ) ; actual = examineThis ( err2 , 'msg2' ) ; expect = EXPECTED_FORMAT ; addThis ( ) ; status = inSection ( 3 ) ; var err3 = otherScope ( ) ; actual = examineThis ( err3 , EMPTY_STRING ) ; expect = EXPECTED_FORMAT ; addThis ( ) ; status = inSection ( 4 ) ; var err4 = eval ( "Error('msg4')" ) ; actual = examineThis ( err4 , 'msg4' ) ; expect = EXPECTED_FORMAT ; addThis ( ) ; test ( ) ; function examineThis ( err , msg ) { var pattern = err . name + '\\s*:?\\s*' + msg ; return err . toString ( ) . search ( RegExp ( pattern ) ) ; } function addThis ( ) { statusitems [ UBound ] = status ; actualvalues [ UBound ] = actual ; expectedvalues [ UBound ] = expect ; UBound ++ ; } function test ( ) { enterFunc ( 'test' ) ; printBugNumber ( BUGNUMBER ) ; printStatus ( summary ) ; for ( var i = 0 ; i < UBound ; i ++ ) { reportCompare ( expectedvalues [ i ] , actualvalues [ i ] , statusitems [ i ] ) ; } exitFunc ( 'test' ) ; } enterFunc ( 'test' ) ; printBugNumber ( BUGNUMBER ) ; printStatus ( summary ) ; jit ( true ) ; Array . prototype [ 1 ] = 2 ; Array . prototype . __defineSetter__ ( 32 , function ( ) { print ( "Hello from arbitrary JS" ) ; } ) ; Array . prototype . __defineGetter__ ( 32 , function ( ) { return 11 ; } ) ; function f ( ) { var a = [ ] ; for ( var i = 0 ; i != 10 ; ++ i ) { a [ 1 << i ] = 9999 ; } return a ; } f ( ) ; jit ( false ) ; reportCompare ( expect , actual , summary ) ; exitFunc ( 'test' ) ;