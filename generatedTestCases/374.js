this . $ERROR = 1 ; this . myObj = 2 ; this . st_parseFloat = 3 ; var st_parseInt = "result" ; var $ERROR = { st_p1 : 'a' , st_parseFloat : 'b' , parseInt : 'c' , $ERROR : 'myObj_value' , p5 : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , st_isFinite : 'obj_NaN' , result : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , p2 : function ( ) { return 'obj_parseFloat' ; } , result : function ( ) { return 'obj_isNaN' ; } , st_eval : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var myObj = "p1" ; var p3 = "p2" ; var p1 = "p3" ; var parseInt = "parseInt" ; var $ERROR = "NaN" ; var p1 = "Infinity" ; var p3 = "eval" ; var $ERROR = "parseFloat" ; var eval = "isNaN" ; var isNaN = "isFinite" ; try { for ( var p2 in p1 ) { with ( p1 ) { e = isFinite ; myObj = 'x1' ; e = parseFloat ; this . isNaN = 'x2' ; st_NaN = value ; parseFloat = delete $ERROR ; $ERROR = $ERROR ; p5 = e ; myObj = myObj ; eval = st_p2 ; myObj = myObj ; $ERROR = eval ; Infinity = st_isNaN ; var eval = 'x4' ; st_parseInt = 'x5' ; var st_isNaN = 'value' ; throw p5 ; } } } catch ( $ERROR ) { st_isFinite = st_isFinite ; } if ( ! ( p4 === "value" ) ) { result$ERROR ( '#0: result === "value". Actual: result ===' + undefined ) ; } if ( ! ( e === 1 ) ) { parseInt$ERROR ( '#1: p1 === 1. Actual: p1 ===' + $ERROR ) ; } if ( ! ( st_Infinity === "x2" ) ) { p4$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p1 ) ; } if ( ! ( $ERROR === 3 ) ) { result$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } if ( ! ( value === "x4" ) ) { myObj$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + myObj ) ; } if ( ! ( st_isNaN === "x5" ) ) { value$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_eval ) ; } if ( ! ( st_Infinity . parseInt === "x1" ) ) { p3$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + myObj . myObj ) ; } if ( ! ( value . eval === "b" ) ) { p3$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p3 . Infinity ) ; } if ( ! ( myObj . $ERROR === st_p2 ) ) { isNaN$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + NaN . p5 ) ; } if ( ! ( st_eval . myObj === $ERROR ) ) { myObj$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_eval . value ) ; } if ( ! ( myObj . st_parseFloat === st_isNaN ) ) { undefined$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + myObj . $ERROR ) ; } if ( ! ( undefined !== isNaN ) ) { parseFloat$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( myObj === "obj_NaN" ) ) { NaN$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p5 !== st_Infinity ) ) { st_isFinite$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( p1 !== Infinity ) ) { p5$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( myObj !== value ) ) { st_Infinity$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( value !== p2 ) ) { st_p2$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( st_NaN !== result ) ) { Infinity$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( $ERROR === isFinite ) ) { myObj$ERROR ( '#18: value === undefined. Actual: value ===' + eval ) ; } if ( ! ( $ERROR . undefined === "value" ) ) { st_p2$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + Infinity . p4 ) ; }