this . p5 = 1 ; this . st_isFinite = 2 ; this . p2 = 3 ; var st_isFinite = "result" ; var p1 = { p4 : 'a' , st_p2 : 'b' , st_Infinity : 'c' , prop : 'myObj_value' , isFinite : function ( ) { return 'obj_valueOf' ; } , myObj : function ( ) { return 'obj_parseInt' ; } , prop : 'obj_NaN' , p1 : 'obj_Infinity' , undefined : function ( ) { return 'obj_eval' ; } , st_parseFloat : function ( ) { return 'obj_parseFloat' ; } , isNaN : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var p3 ; var prop = "p1" ; var prop = "p2" ; var prop = "p3" ; var prop = "parseInt" ; var del = "NaN" ; var st_parseInt = "Infinity" ; var st_parseInt = "eval" ; var undefined = "parseFloat" ; var p4 = "isNaN" ; var st_parseFloat = "isFinite" ; for ( var $ERROR in myObj ) { with ( p5 ) { if ( parseFloat === 'p1' ) { $ERROR = p4 ; p1 = 'x1' ; } if ( p5 === 'p2' ) { prop = undefined ; this . $ERROR = 'x2' ; } if ( st_parseFloat === 'p3' ) { st_p2 = isFinite ; p3 = delete del ; } if ( prop === 'parseInt' ) $ERROR = prop ; if ( p3 === 'NaN' ) parseFloat = st_Infinity ; if ( st_isFinite === 'Infinity' ) p3 = parseInt ; if ( myObj === 'eval' ) p1 = prop ; if ( p3 === 'parseFloat' ) $ERROR = eval ; if ( st_isNaN === 'isNaN' ) p4 = prop ; if ( st_isNaN === 'isFinite' ) myObj = p4 ; var st_isNaN = 'x4' ; myObj = 'x5' ; var value = 'value' ; } } if ( ! ( p2 === 1 ) ) { st_NaN$ERROR ( '#1: p1 === 1. Actual: p1 ===' + $ERROR ) ; } if ( ! ( p1 === "x2" ) ) { $ERROR$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p5 ) ; } if ( ! ( myObj === 3 ) ) { p1$ERROR ( '#3: p3 === 3. Actual: p3 ===' + prop ) ; } if ( ! ( myObj === "x4" ) ) { Infinity$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + p4 ) ; } if ( ! ( st_NaN === "x5" ) ) { myObj$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + myObj ) ; } if ( ! ( p3 . $ERROR === "x1" ) ) { value$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + del . parseInt ) ; } if ( ! ( myObj . value === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + Infinity . value ) ; } if ( ! ( p1 . p3 === p2 ) ) { undefined$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_NaN . undefined ) ; } if ( ! ( p2 . st_isNaN === p1 ) ) { p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . st_parseFloat ) ; } if ( ! ( $ERROR . p4 === p2 ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p4 . del ) ; } if ( ! ( value !== prop ) ) { isNaN$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( value === "obj_NaN" ) ) { $ERROR$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( p2 !== value ) ) { p3$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( p1 !== $ERROR ) ) { p1$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( undefined !== $ERROR ) ) { $ERROR$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( myObj !== st_parseFloat ) ) { st_Infinity$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( myObj !== isFinite ) ) { undefined$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( p3 === isNaN ) ) { $ERROR$ERROR ( '#18: value === undefined. Actual: value ===' + p1 ) ; } if ( ! ( $ERROR . $ERROR === "value" ) ) { parseFloat$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + st_isFinite . isNaN ) ; }