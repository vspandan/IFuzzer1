this . st_NaN = 1 ; this . p3 = 2 ; this . p2 = 3 ; var p2 = "result" ; var $ERROR = { myObj : 'a' , value : 'b' , $ERROR : 'c' , $ERROR : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , st_NaN : function ( ) { return 'obj_parseInt' ; } , value : 'obj_NaN' , del : 'obj_Infinity' , st_parseInt : function ( ) { return 'obj_eval' ; } , st_isFinite : function ( ) { return 'obj_parseFloat' ; } , st_p1 : function ( ) { return 'obj_isNaN' ; } , p5 : function ( ) { return 'obj_isFinite' ; } } var st_isNaN ; var eval = "p1" ; var $ERROR = "p2" ; var st_p2 = "p3" ; var $ERROR = "parseInt" ; var NaN = "NaN" ; var $ERROR = "Infinity" ; var p4 = "eval" ; var p2 = "parseFloat" ; var $ERROR = "isNaN" ; var p4 = "isFinite" ; with ( myObj ) { var myObj = function ( ) { p4 = st_p1 ; Infinity = $ERROR ; st_NaN = $ERROR ; $ERROR = myObj ; $ERROR = st_isFinite ; parseFloat = isNaN ; st_isFinite = value ; myObj = p1 ; st_eval = p1 ; st_NaN = parseFloat ; myObj = 'x1' ; this . st_p1 = 'x2' ; p4 = delete p1 ; var e = 'x4' ; p2 = 'x5' ; var st_parseInt = 'value' ; } } p3 ( ) ; if ( ! ( $ERROR === 1 ) ) { value$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p2 ) ; } if ( ! ( isNaN === "x2" ) ) { undefined$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + myObj ) ; } if ( ! ( st_NaN === 3 ) ) { isNaN$ERROR ( '#3: p3 === 3. Actual: p3 ===' + st_isNaN ) ; } try { st_eval ; myObj$ERROR ( '#4: p4 doesn\'t exists' ) ; } catch ( isNaN ) { } if ( ! ( st_p1 === "x5" ) ) { valueOf$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + p2 ) ; } if ( ! ( eval . NaN === "x1" ) ) { st_p2$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + $ERROR . st_parseFloat ) ; } if ( ! ( myObj . undefined === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p3 . parseFloat ) ; } if ( ! ( p5 . p2 === $ERROR ) ) { $ERROR$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + p1 . Infinity ) ; } if ( ! ( p3 . st_p2 === p1 ) ) { st_eval$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p1 . isFinite ) ; } if ( ! ( eval . $ERROR === $ERROR ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p2 . $ERROR ) ; } if ( ! ( value !== p2 ) ) { st_p3$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( st_isNaN === "obj_NaN" ) ) { $ERROR$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_parseInt !== st_isNaN ) ) { $ERROR$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( p4 !== del ) ) { p5$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( parseInt !== p2 ) ) { myObj$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( myObj !== st_p3 ) ) { $ERROR$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p2 !== isNaN ) ) { parseInt$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { st_NaN ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( $ERROR ) { } if ( ! ( p5 . p4 === "myObj_value" ) ) with ( eval )