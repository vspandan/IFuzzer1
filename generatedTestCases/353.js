this . myObj = 1 ; this . p1 = 2 ; this . result = 3 ; var p3 = "result" ; var p2 = { myObj : 'a' , myObj : 'b' , st_p1 : 'c' , st_isFinite : 'myObj_value' , value : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , p2 : 'obj_NaN' , st_NaN : 'obj_Infinity' , p1 : function ( ) { return 'obj_eval' ; } , Infinity : function ( ) { return 'obj_parseFloat' ; } , st_isNaN : function ( ) { return 'obj_isNaN' ; } , value : function ( ) { return 'obj_isFinite' ; } } var value ; var myObj = "p1" ; var p3 = "p2" ; var del = "p3" ; var value = "parseInt" ; var myObj = "NaN" ; var st_parseInt = "Infinity" ; var myObj = "eval" ; var st_parseFloat = "parseFloat" ; var st_NaN = "isNaN" ; var p5 = "isFinite" ; with ( p2 ) { var st_parseFloat = function ( ) { st_NaN = st_p2 ; p2 = $ERROR ; st_isFinite = st_isFinite ; st_parseFloat = $ERROR ; st_isNaN = $ERROR ; myObj = p1 ; st_NaN = eval ; st_isFinite = p1 ; p3 = st_p1 ; myObj = p2 ; $ERROR = 'x1' ; this . parseInt = 'x2' ; st_eval = delete $ERROR ; var result = 'x4' ; p3 = 'x5' ; var p3 = 'value' ; return p1 ; } } p5 = $ERROR ( ) ; if ( ! ( f === "value" ) ) { st_eval$ERROR ( '#0: result === "value". Actual: result ===' + p4 ) ; } if ( ! ( st_eval === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + isNaN ) ; } if ( ! ( st_isFinite === "x2" ) ) { result$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p2 ) ; } if ( ! ( p3 === 3 ) ) { valueOf$ERROR ( '#3: p3 === 3. Actual: p3 ===' + result ) ; } try { $ERROR ; st_Infinity$ERROR ( '#4: p4 doesn\'t exists' ) ; } catch ( p5 ) { } if ( ! ( isFinite === "x5" ) ) { isNaN$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + del ) ; } if ( ! ( $ERROR . p2 === "x1" ) ) { myObj$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + p1 . p3 ) ; } if ( ! ( p4 . p5 === "b" ) ) { eval$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + new parseInt . st_eval ) ; } if ( ! ( st_isNaN . parseInt === value ) ) { e$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_Infinity . p4 ) ; } if ( ! ( p1 . p5 === value ) ) { isFinite$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + value . p2 ) ; } if ( ! ( st_p3 . p3 === result ) ) { undefined$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_eval . p4 ) ; } if ( ! ( e !== value ) ) { st_parseFloat$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( myObj === "obj_NaN" ) ) { value$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( isFinite !== NaN ) ) { $ERROR$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( parseInt !== isFinite ) ) { valueOf$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( p4 !== p5 ) ) { st_NaN$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( result !== p1 ) ) { undefined$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( myObj !== st_p3 ) ) { p2$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { myObj ; st_parseInt$ERROR ( '#18: value is not defined' ) ; } catch ( p4 ) { } if ( ! ( undefined . $ERROR === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + parseInt . value ) ; }