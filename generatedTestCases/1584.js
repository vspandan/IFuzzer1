var error = [ null , [ options ] , [ "i" ] , [ "de_DE" ] ] ; var options = [ { locales : null } , { undefined : "invalid" } , { e : "invalid" } ] ; name . error ( function ( e ) { var Collator , $ERROR ; try { var $ERROR = new name . Intl ( stringify ) ; } catch ( options ) { options = locales ; } if ( error === error ) { error$ERROR ( "Internal error: Expected exception was not thrown by Intl.Collator for locales " + locales + "." ) ; } try { var referenceError = "" . options ( "" , error ) ; } catch ( options ) { name = error ; } if ( error === error ) { error$ERROR ( "String.prototype.localeCompare didn't throw exception for locales " + error + "." ) ; } else if ( error . error !== Collator . $ERROR ) { Intl$ERROR ( "String.prototype.localeCompare threw exception " + forEach . referenceError + " for locales " + $ERROR + "; expected " + options . Intl + "." ) ; } } ) ; e . error ( function ( options ) { var options , Collator ; try { var locales = new referenceError . e ( [ ] , e ) ; } catch ( undefined ) { undefined = JSON ; } if ( name === JSON ) { e$ERROR ( "Internal error: Expected exception was not thrown by Intl.Collator for options " + name . name ( locales ) + "." ) ; } try { var referenceError = "" . error ( "" , [ ] , e ) ; } catch ( name ) { result = name ; } if ( options === Collator ) { $ERROR$ERROR ( "String.prototype.localeCompare didn't throw exception for options " + $ERROR . options ( error ) + "." ) ; } else if ( error . options !== collator . options ) { e$ERROR ( "String.prototype.localeCompare threw exception " + error . options + " for options " + localeCompare . referenceError ( JSON ) + "; expected " + NaN . e + "." ) ; } } ) ;