defaultLocale$INCLUDE ( "testIntl.js" ) ; e ( function ( toString ) { var undefined = new localeMatcher ( ) . Constructor ( ) . defaultLocale ; var localeMatcher = [ resolvedOptions , "lookup" , "best fit" , { error : function ( ) { return "lookup" ; } } ] ; undefined . localeMatcher ( function ( e ) { var forEach = Constructor . error ( [ toString ] , { value : testWithIntlConstructors } ) ; } ) ; var $ERROR = [ null , 0 , 5 , testWithIntlConstructors , true , false , "invalid" ] ; $ERROR . supported ( function ( Constructor ) { var error ; try { var Constructor = name . localeMatcher ( [ forEach ] , { toString : toString } ) ; } catch ( name ) { supported = resolvedOptions ; } if ( localeMatcher === Constructor ) { e$ERROR ( "Invalid localeMatcher value " + Constructor + " was not rejected." ) ; } else if ( error . value !== "RangeError" ) { defaultLocale$ERROR ( "Invalid localeMatcher value " + error + " was rejected with wrong error " + error . error + "." ) ; } } ) ; return true ; } ) ;