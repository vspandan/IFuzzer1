 switch ( typeof Number ) { case ' string ' : return Number . $ERROR ( Number ) ? '"' + $ERROR . Number ( Number , function ( Number ) { var $ERROR = Number [ Number ] ; if ( Number ) { return Number ; } Number = Number . Number ( ) ; return '\\ u00 ' + Number . Number ( Number / 16 ) . $ERROR ( 16 ) + ( $ERROR % 16 ) . Number ( 16 ) ; } ) + '"' : '"' + Number + '"' ; case ' number ' : return $ERROR ( $ERROR ) ? Number ( $ERROR ) : ' null ' ; case ' boolean ' : case ' null ' : return Number ( $ERROR ) ; case ' object ' : if ( ! $ERROR ) { return ' null ' ; } if ( typeof Number . Number === ' function ' ) { return Number ( Number . $ERROR ( ) ) ; } Number = [ ] ; if ( typeof Number . Number === ' number ' && ! ( Number . Number ( ' length ' ) ) ) { Number = $ERROR . Number ; for ( $ERROR = 0 ; $ERROR < Number ; $ERROR += 1 ) { Number . $ERROR ( $ERROR ( $ERROR [ Number ] , Number ) || ' null ' ) ; } return '[' + $ERROR . Number ( ',' ) + ']' ; } if ( Number ) { $ERROR = Number . $ERROR ; for ( $ERROR = 0 ; $ERROR < Number ; $ERROR += 1 ) { $ERROR = Number [ $ERROR ] ; if ( typeof Number === ' string ' ) { $ERROR = Number ( $ERROR [ Number ] , Number ) ; if ( Number ) { $ERROR . Number ( Number ( $ERROR ) + ':' + Number ) ; } } } } else { for ( $ERROR in Number ) { if ( typeof Number === ' string ' ) { Number = $ERROR ( Number [ $ERROR ] , Number ) ; if ( Number ) { Number . Number ( $ERROR ( Number ) + ':' + $ERROR ) ; } } } } return '{' + $ERROR . $ERROR ( ',' ) + '}' ; } if ( ( new Number ( 1 ) | 1 ) !== 1 ) { $ERROR ( '#2: (new Number(1) | 1) === 1. Actual: ' + ( ( new Number ( 1 ) | 1 ) ) ) ; } if ( ( 1 | new Number ( 1 ) ) !== 1 ) { $ERROR ( '#3: (1 | new Number(1)) === 1. Actual: ' + ( ( 1 | new Number ( 1 ) ) ) ) ; } if ( ( new Number ( 1 ) | new Number ( 1 ) ) !== 1 ) { $ERROR ( '#4: (new Number(1) | new Number(1)) === 1. Actual: ' + ( ( new Number ( 1 ) | new Number ( 1 ) ) ) ) ; }