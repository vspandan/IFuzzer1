this . p4 = 1 ; this . st_parseInt = 2 ; this . result = 3 ; var st_parseInt = "result" ; var p1 = { $ERROR : 'a' , st_p3 : 'b' , st_parseInt : 'c' , eval : 'myObj_value' , p3 : function ( ) { return 'obj_valueOf' ; } , NaN : function ( ) { return 'obj_parseInt' ; } , p1 : 'obj_NaN' , st_isNaN : 'obj_Infinity' , value : function ( ) { return 'obj_eval' ; } , p3 : function ( ) { return 'obj_parseFloat' ; } , isFinite : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var p4 ; var p2 = "p1" ; var eval = "p2" ; var st_eval = "p3" ; var p2 = "parseInt" ; var p5 = "NaN" ; var st_isFinite = "Infinity" ; var p4 = "eval" ; var st_isFinite = "parseFloat" ; var p1 = "isNaN" ; var $ERROR = "isFinite" ; var isFinite = function ( ) { with ( result ) { return $ERROR ; p2 = parseFloat ; st_NaN = st_isFinite ; value = $ERROR ; f = Infinity ; $ERROR = p1 ; myObj = e ; st_Infinity = st_Infinity ; $ERROR = st_isNaN ; myObj = p2 ; st_isFinite = myObj ; st_NaN = 'x1' ; this . st_Infinity = 'x2' ; st_isFinite = delete $ERROR ; var p3 = 'x4' ; $ERROR = 'x5' ; var st_isNaN = 'value' ; } } st_isNaN = parseInt ( ) ; if ( ! ( myObj === "myObj_value" ) ) { NaN$ERROR ( '#0: result === "myObj_value". Actual: result ===' + $ERROR ) ; } if ( ! ( p1 === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + undefined ) ; } if ( ! ( Infinity === 2 ) ) { p5$ERROR ( '#2: p2 === 2. Actual: p2 ===' + st_isNaN ) ; } if ( ! ( st_Infinity === 3 ) ) { st_p3$ERROR ( '#3: p3 === 3. Actual: p3 ===' + myObj ) ; } try { p1 ; st_Infinity$ERROR ( '#4: p4 is not defined' ) ; } catch ( myObj ) { } try { $ERROR ; value$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_eval ) { } if ( ! ( $ERROR . $ERROR === "a" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + $ERROR . st_p2 ) ; } if ( ! ( valueOf . $ERROR === "b" ) ) { $ERROR$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + value . undefined ) ; } if ( ! ( st_isFinite . p4 === "c" ) ) { st_parseInt$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p2 . st_Infinity ) ; } if ( ! ( st_p2 . st_parseFloat === st_parseFloat ) ) { myObj$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . p4 ) ; } if ( ! ( st_p2 . p1 === myObj ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + isFinite . valueOf ) ; } if ( ! ( $ERROR === "parseInt" ) ) { st_isNaN$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + p3 . parseFloat ) ; } if ( ! ( st_Infinity ) ) { e$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + f ) ; } if ( ! ( $ERROR === "Infinity" ) ) { $ERROR$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + p3 ) ; } if ( ! ( parseFloat === "eval" ) ) { p4$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + st_p1 ) ; } if ( ! ( parseInt === "parseFloat" ) ) { isFinite$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + p4 ) ; } if ( ! ( e === "isNaN" ) ) { p3$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + $ERROR ) ; } if ( ! ( st_isFinite === "isFinite" ) ) { Infinity$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + st_Infinity ) ; } try { st_eval ; value$ERROR ( '#18: value is not defined' ) ; } catch ( st_parseFloat ) { } if ( ! ( p4 . myObj === "myObj_value" ) ) { st_parseFloat$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + del . st_parseInt ) ; }