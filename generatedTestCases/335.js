this . st_Infinity = 1 ; this . st_parseInt = 2 ; this . st_Infinity = 3 ; var Infinity = "result" ; var p3 = { myObj : 'a' , p5 : 'b' , myObj : 'c' , st_p2 : 'myObj_value' , p2 : function ( ) { return 'obj_valueOf' ; } , value : function ( ) { return 'obj_parseInt' ; } , st_isFinite : 'obj_NaN' , e : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , value : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , myObj : function ( ) { return 'obj_isFinite' ; } } var undefined ; var p4 = "p1" ; var f = "p2" ; var p5 = "p3" ; var $ERROR = "parseInt" ; var p1 = "NaN" ; var myObj = "Infinity" ; var st_isFinite = "eval" ; var eval = "parseFloat" ; var e = "isNaN" ; var eval = "isFinite" ; try { var st_p3 = function ( ) { with ( myObj ) { throw $ERROR ; st_isNaN = p5 ; p5 = p1 ; Infinity = st_eval ; p1 = st_parseInt ; parseInt = p3 ; del = st_eval ; value = p5 ; result = Infinity ; st_parseInt = $ERROR ; del = p2 ; isFinite = 'x1' ; this . st_Infinity = 'x2' ; myObj = delete myObj ; var st_parseFloat = 'x4' ; myObj = 'x5' ; var $ERROR = 'value' ; } } var p2 = new undefined ( ) ; } catch ( f ) { myObj = NaN ; } if ( ! ( p3 === "myObj_value" ) ) { $ERROR$ERROR ( '#0: result === "myObj_value". Actual: result ===' + $ERROR ) ; } if ( ! ( st_isFinite === 1 ) ) { result$ERROR ( '#1: p1 === 1. Actual: p1 ===' + $ERROR ) ; } if ( ! ( st_isFinite === 2 ) ) { p3$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p1 ) ; } if ( ! ( parseInt === 3 ) ) { $ERROR$ERROR ( '#3: p3 === 3. Actual: p3 ===' + $ERROR ) ; } try { p1 ; f$ERROR ( '#4: p4 is not defined' ) ; } catch ( $ERROR ) { } try { $ERROR ; st_parseInt$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_parseFloat ) { } if ( ! ( myObj . NaN === "a" ) ) { undefined$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + parseFloat . $ERROR ) ; } if ( ! ( st_isFinite . p2 === "b" ) ) { result$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p3 . p3 ) ; } if ( ! ( st_parseInt . st_eval === "c" ) ) { myObj ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p1 . $ERROR ) ; } if ( ! ( st_Infinity . $ERROR === p4 ) ) { st_parseFloat$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p3 . st_parseInt ) ; } if ( ! ( myObj . p2 === p2 ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + value . $ERROR ) ; } if ( ! ( p4 === "parseInt" ) ) { p1$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + myObj . myObj ) ; } if ( ! ( p1 === "NaN" ) ) { p1$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + st_isNaN ) ; } if ( ! ( $ERROR === "Infinity" ) ) { st_p3$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + e ) ; } if ( ! ( result === "eval" ) ) { p5$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + $ERROR ) ; } if ( ! ( e === "parseFloat" ) ) { $ERROR$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( st_eval === "isNaN" ) ) { value$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + p2 ) ; } if ( ! ( st_p2 === "isFinite" ) ) { $ERROR$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + myObj ) ; } try { $ERROR ; st_isNaN$ERROR ( '#18: value is not defined' ) ; } catch ( st_eval ) { } if ( ! ( $ERROR . p1 === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_p3 . st_parseInt ) ; }