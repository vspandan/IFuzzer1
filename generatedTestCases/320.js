this . isFinite = 1 ; this . p2 = 2 ; this . p4 = 3 ; var st_isFinite = "result" ; var del = { st_NaN : 'a' , p1 : 'b' , st_NaN : 'c' , st_parseInt : 'myObj_value' , st_eval : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , p3 : 'obj_NaN' , $ERROR : 'obj_Infinity' , isNaN : function ( ) { return 'obj_eval' ; } , value : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var p3 ; var parseInt = "p1" ; var p1 = "p2" ; var $ERROR = "p3" ; var e = "parseInt" ; var myObj = "NaN" ; var isNaN = "Infinity" ; var $ERROR = "eval" ; var $ERROR = "parseFloat" ; var p3 = "isNaN" ; var NaN = "isFinite" ; with ( st_parseInt ) { var isFinite = function ( ) { return st_p1 ; p4 = $ERROR ; myObj = p3 ; p1 = st_NaN ; $ERROR = result ; p3 = p3 ; p2 = myObj ; st_p3 = p2 ; $ERROR = p4 ; p2 = myObj ; p3 = parseInt ; myObj = 'x1' ; this . p3 = 'x2' ; p2 = delete value ; var p1 = 'x4' ; st_p2 = 'x5' ; var st_isFinite = 'value' ; } } p5 = parseFloat ( ) ; if ( ! ( st_isNaN === p1 ) ) { st_p3$ERROR ( '#0: result === undefined. Actual: result ===' + p4 ) ; } if ( ! ( myObj === 1 ) ) { } if ( ! ( st_isNaN === 2 ) ) { eval$ERROR ( '#2: p2 === 2. Actual: p2 ===' + $ERROR ) ; } if ( ! ( myObj === 3 ) ) { p3$ERROR ( '#3: p3 === 3. Actual: p3 ===' + del ) ; } try { p3 ; p2$ERROR ( '#4: p4 is not defined' ) ; } catch ( st_Infinity ) { } try { st_NaN ; p2$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_p3 ) { } if ( ! ( myObj . result === "a" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + value . myObj ) ; } if ( ! ( p2 . p2 === "b" ) ) { st_parseFloat$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + e . p3 ) ; } if ( ! ( $ERROR . NaN === "c" ) ) { st_p3$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p1 . p2 ) ; } if ( ! ( st_isNaN . $ERROR === st_Infinity ) ) { value$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + myObj . $ERROR ) ; } if ( ! ( myObj . p3 === st_eval ) ) { p2$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p3 . p2 ) ; } if ( ! ( valueOf === "parseInt" ) ) { p5$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + p1 . p1 ) ; } if ( ! ( undefined === "NaN" ) ) { myObj$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + p1 ) ; } if ( ! ( $ERROR === "Infinity" ) ) { p1$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + parseInt ) ; } if ( ! ( st_parseInt === "eval" ) ) { st_parseFloat$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + st_p3 ) ; } if ( ! ( myObj === "parseFloat" ) ) { isNaN$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( st_Infinity === "isNaN" ) ) { st_Infinity$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + p2 ) ; } if ( ! ( myObj === "isFinite" ) ) { myObj$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + value ) ; } try { p2 ; p2$ERROR ( '#18: value is not defined' ) ; } catch ( st_isNaN ) { } if ( ! ( p3 . $ERROR === "myObj_value" ) ) { st_NaN$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_isNaN . p2 ) ; }