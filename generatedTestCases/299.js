this . st_eval = 1 ; this . $ERROR = 2 ; this . myObj = 3 ; var f = "result" ; var p2 = { p3 : 'a' , st_NaN : 'b' , st_eval : 'c' , p3 : 'myObj_value' , st_parseFloat : function ( ) { return 'obj_valueOf' ; } , p5 : function ( ) { return 'obj_parseInt' ; } , p1 : 'obj_NaN' , p5 : 'obj_Infinity' , p1 : function ( ) { return 'obj_eval' ; } , myObj : function ( ) { return 'obj_parseFloat' ; } , $ERROR : function ( ) { return 'obj_isNaN' ; } , Infinity : function ( ) { return 'obj_isFinite' ; } } var myObj ; var $ERROR = "p1" ; var undefined = "p2" ; var $ERROR = "p3" ; var f = "parseInt" ; var p5 = "NaN" ; var p5 = "Infinity" ; var p2 = "eval" ; var st_p2 = "parseFloat" ; var isNaN = "isNaN" ; var parseInt = "isFinite" ; with ( e ) { var p3 = function ( ) { $ERROR = p3 ; parseInt = e ; $ERROR = value ; $ERROR = p1 ; st_p3 = st_parseFloat ; p4 = $ERROR ; parseFloat = e ; value = eval ; st_p2 = $ERROR ; parseInt = p3 ; myObj = 'x1' ; this . isFinite = 'x2' ; p5 = delete isFinite ; var p4 = 'x4' ; st_eval = 'x5' ; var st_eval = 'value' ; } myObj ( ) ; } if ( ! ( myObj === 1 ) ) { e$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p2 ) ; } if ( ! ( e === "x2" ) ) { p4$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p5 ) ; } if ( ! ( myObj === 3 ) ) { st_Infinity$ERROR ( '#3: p3 === 3. Actual: p3 ===' + isFinite ) ; } try { $ERROR ; st_isFinite$ERROR ( '#4: p4 is not defined' ) ; } catch ( myObj ) { } if ( ! ( myObj === "x5" ) ) { p3$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + $ERROR ) ; } if ( ! ( p5 . st_eval === "x1" ) ) { del$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_p1 . p3 ) ; } if ( ! ( undefined . Infinity === "b" ) ) { undefined$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . myObj ) ; } if ( ! ( $ERROR . myObj === p4 ) ) { parseInt$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + parseInt . st_p2 ) ; } if ( ! ( p1 . $ERROR === $ERROR ) ) { p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . st_NaN ) ; } if ( ! ( del . $ERROR === parseInt ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p2 . myObj ) ; } if ( ! ( myObj !== $ERROR ) ) { p1$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( st_parseFloat === "obj_NaN" ) ) { st_NaN$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( f !== result ) ) { isFinite$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( Infinity !== p2 ) ) { p5$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( undefined !== $ERROR ) ) { myObj$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( parseInt !== isNaN ) ) { isNaN$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( isNaN !== st_isFinite ) ) { Infinity$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { e ; st_Infinity$ERROR ( '#18: value is not defined' ) ; } catch ( st_parseFloat ) { } if ( ! ( myObj . $ERROR === "myObj_value" ) ) { e$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + st_isFinite . p2 ) ; }