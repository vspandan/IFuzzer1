this . parseFloat = 1 ; this . p2 = 2 ; this . parseFloat = 3 ; var p4 = "result" ; var st_Infinity = { p5 : 'a' , st_isFinite : 'b' , p4 : 'c' , eval : 'myObj_value' , p1 : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , undefined : 'obj_NaN' , myObj : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , $ERROR : function ( ) { return 'obj_parseFloat' ; } , parseInt : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var st_parseInt ; var p3 = "p1" ; var st_NaN = "p2" ; var $ERROR = "p3" ; var p3 = "parseInt" ; var st_eval = "NaN" ; var p2 = "Infinity" ; var st_Infinity = "eval" ; var p1 = "parseFloat" ; var e = "isNaN" ; var p1 = "isFinite" ; try { var p1 = function ( ) { with ( st_parseInt ) { result = parseInt ; st_parseFloat = st_NaN ; myObj = p2 ; st_eval = e ; NaN = st_NaN ; p2 = Infinity ; parseFloat = result ; myObj = p1 ; p5 = isNaN ; p4 = $ERROR ; st_parseInt = 'x1' ; this . myObj = 'x2' ; p2 = delete eval ; var st_p2 = 'x4' ; p5 = 'x5' ; var result = 'value' ; throw p2 ; } } var st_p3 = new myObj ( ) ; } catch ( st_eval ) { isFinite = myObj ; } if ( ! ( p5 === "value" ) ) { undefined$ERROR ( '#0: result === "value". Actual: result ===' + f ) ; } if ( ! ( undefined === 1 ) ) { eval$ERROR ( '#1: p1 === 1. Actual: p1 ===' + eval ) ; } if ( ! ( myObj === 2 ) ) { st_p3$ERROR ( '#2: p2 === 2. Actual: p2 ===' + f ) ; } try { parseInt ; myObj$ERROR ( '#4: p4 is not defined' ) ; } catch ( st_p1 ) { } if ( ! ( e === "x5" ) ) { st_NaN$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + myObj ) ; } if ( ! ( result . del === "x1" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + myObj . del ) ; } if ( ! ( st_NaN . $ERROR === "b" ) ) { f$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . $ERROR ) ; } if ( ! ( st_p1 . isFinite === parseFloat ) ) { myObj$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + $ERROR . $ERROR ) ; } if ( ! ( p5 . st_parseFloat === st_eval ) ) { NaN$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + parseInt . undefined ) ; } if ( ! ( p1 . $ERROR === st_parseFloat ) ) { eval$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p3 . eval ) ; } if ( ! ( p2 !== value ) ) { myObj$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( myObj === "obj_NaN" ) ) { value$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( valueOf !== p3 ) ) { st_p1$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( st_eval !== p2 ) ) { myObj$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_Infinity !== $ERROR ) ) { $ERROR$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( isFinite !== isNaN ) ) { parseFloat$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( st_eval !== p4 ) ) { isFinite$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { st_Infinity ; undefined$ERROR ( '#18: value is not defined' ) ; } catch ( isFinite ) { } if ( ! ( isNaN . p3 === "value" ) ) { NaN$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + myObj . undefined ) ; }