this . st_NaN = 1 ; this . st_Infinity = 2 ; this . st_parseFloat = 3 ; var myObj = "result" ; var st_p2 = { p3 : 'a' , p1 : 'b' , p3 : 'c' , st_p3 : 'myObj_value' , st_NaN : function ( ) { return 'obj_valueOf' ; } , p2 : function ( ) { return 'obj_parseInt' ; } , eval : 'obj_NaN' , p2 : 'obj_Infinity' , myObj : function ( ) { return 'obj_eval' ; } , p2 : function ( ) { return 'obj_parseFloat' ; } , st_parseInt : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var obj = "p1" ; var $ERROR = "p2" ; var st_isNaN = "p3" ; var p5 = "parseInt" ; var st_parseInt = "NaN" ; var value = "Infinity" ; var parseInt = "eval" ; var parseInt = "parseFloat" ; var myObj = "isNaN" ; var del = "isFinite" ; try { with ( st_Infinity ) { var myObj = function ( ) { throw p3 ; p1 = $ERROR ; f = e ; parseInt = $ERROR ; myObj = p1 ; st_p3 = st_Infinity ; p2 = e ; p3 = $ERROR ; parseInt = del ; p4 = p2 ; del = result ; p5 = 'x1' ; this . p2 = 'x2' ; p1 = delete st_p3 ; var st_parseFloat = 'x4' ; p4 = 'x5' ; var st_isNaN = 'value' ; } var obj = new $ERROR ( ) ; } } catch ( Infinity ) { $ERROR = st_isNaN ; } if ( ! ( p2 === p3 ) ) { $ERROR$ERROR ( '#0: result === undefined. Actual: result ===' + p3 ) ; } if ( ! ( parseInt === 1 ) ) { p5$ERROR ( '#1: p1 === 1. Actual: p1 ===' + st_Infinity ) ; } if ( ! ( myObj === 2 ) ) { $ERROR$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p4 ) ; } if ( ! ( p2 === 3 ) ) { st_isNaN$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p5 ) ; } try { e ; myObj$ERROR ( '#4: p4 is not defined' ) ; } catch ( myObj ) { } try { st_isFinite ; st_isFinite$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_p1 ) { } if ( ! ( p1 . $ERROR === "a" ) ) { st_NaN$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + p3 . $ERROR ) ; } if ( ! ( st_eval . $ERROR === "b" ) ) { p2$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . st_parseInt ) ; } if ( ! ( f . st_eval === "c" ) ) { $ERROR$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + result . myObj ) ; } if ( ! ( undefined . parseInt === myObj ) ) { $ERROR$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + myObj . st_parseInt ) ; } if ( ! ( $ERROR . st_p1 === st_isNaN ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + value . p5 ) ; } if ( ! ( myObj === "parseInt" ) ) { $ERROR$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + myObj . e ) ; } if ( ! ( $ERROR === "NaN" ) ) { result$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + st_parseInt ) ; } if ( ! ( myObj === "Infinity" ) ) { st_NaN$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + myObj ) ; } if ( ! ( st_isFinite === "eval" ) ) { $ERROR$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + isNaN ) ; } if ( ! ( $ERROR === "parseFloat" ) ) { p5$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + obj ) ; } if ( ! ( e === "isNaN" ) ) { undefined$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + value ) ; } if ( ! ( parseInt === "isFinite" ) ) { $ERROR$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + isFinite ) ; } try { p4 ; $ERROR$ERROR ( '#18: value is not defined' ) ; } catch ( st_p2 ) { } if ( ! ( $ERROR . myObj === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + del . p1 ) ; }