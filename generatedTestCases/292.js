this . p4 = 1 ; this . myObj = 2 ; this . p3 = 3 ; var result = "result" ; var st_p1 = { valueOf : 'a' , Infinity : 'b' , myObj : 'c' , myObj : 'myObj_value' , p5 : function ( ) { return 'obj_valueOf' ; } , st_NaN : function ( ) { return 'obj_parseInt' ; } , $ERROR : 'obj_NaN' , myObj : 'obj_Infinity' , st_p1 : function ( ) { return 'obj_eval' ; } , parseInt : function ( ) { return 'obj_parseFloat' ; } , del : function ( ) { return 'obj_isNaN' ; } , e : function ( ) { return 'obj_isFinite' ; } } var st_p2 ; var myObj = "p1" ; var myObj = "p2" ; var $ERROR = "p3" ; var myObj = "parseInt" ; var st_p3 = "NaN" ; var st_NaN = "Infinity" ; var st_isNaN = "eval" ; var p2 = "parseFloat" ; var eval = "isNaN" ; var p4 = "isFinite" ; try { var st_NaN = function ( ) { with ( $ERROR ) { throw p1 ; myObj = e ; myObj = p5 ; p3 = value ; $ERROR = st_isNaN ; $ERROR = eval ; $ERROR = eval ; p3 = st_NaN ; parseInt = isFinite ; st_isFinite = st_p1 ; p5 = p1 ; st_Infinity = 'x1' ; this . st_p2 = 'x2' ; p1 = delete p1 ; var $ERROR = 'x4' ; value = 'x5' ; var st_NaN = 'value' ; } } myObj ( ) ; } catch ( NaN ) { p2 = st_Infinity ; } if ( ! ( st_NaN === "myObj_value" ) ) { st_NaN$ERROR ( '#0: result === "myObj_value". Actual: result ===' + value ) ; } if ( ! ( $ERROR === 2 ) ) { $ERROR$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p2 ) ; } if ( ! ( st_p2 === 3 ) ) { value$ERROR ( '#3: p3 === 3. Actual: p3 ===' + st_parseFloat ) ; } try { $ERROR ; st_isFinite$ERROR ( '#4: p4 is not defined' ) ; } catch ( p1 ) { } try { st_Infinity ; p4$ERROR ( '#5: p5 is not defined' ) ; } catch ( st_eval ) { } if ( ! ( Infinity . st_NaN === "a" ) ) { eval$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + p2 . p4 ) ; } if ( ! ( p4 . myObj === "b" ) ) { st_parseFloat$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p2 . isNaN ) ; } if ( ! ( p4 . e === "c" ) ) { e$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + p1 . st_parseInt ) ; } if ( ! ( st_NaN . del === result ) ) { st_Infinity$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + value . p2 ) ; } if ( ! ( st_parseInt . p3 === st_Infinity ) ) { myObj$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_Infinity . p3 ) ; } if ( ! ( $ERROR === "parseInt" ) ) { myObj$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + st_p1 . result ) ; } if ( ! ( result === "NaN" ) ) { st_Infinity$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + $ERROR ) ; } if ( ! ( Infinity === "Infinity" ) ) { myObj$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + del ) ; } if ( ! ( st_isNaN === "eval" ) ) { st_parseFloat$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + myObj ) ; } if ( ! ( p2 === "parseFloat" ) ) { myObj$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + isFinite ) ; } if ( ! ( st_p3 === "isNaN" ) ) { p2$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + myObj ) ; } if ( ! ( st_eval === "isFinite" ) ) { st_isFinite$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + st_parseInt ) ; } try { myObj ; st_p3$ERROR ( '#18: value is not defined' ) ; } catch ( st_isNaN ) { } if ( ! ( eval . undefined === "myObj_value" ) ) { st_Infinity$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + $ERROR . $ERROR ) ; }