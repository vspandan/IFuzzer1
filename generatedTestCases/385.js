this . p1 = 1 ; this . st_parseInt = 2 ; this . eval = 3 ; var p3 = "result" ; var e = { myObj : 'a' , NaN : 'b' , p3 : 'c' , eval : 'myObj_value' , p2 : function ( ) { return 'obj_valueOf' ; } , st_parseFloat : function ( ) { return 'obj_parseInt' ; } , value : 'obj_NaN' , st_eval : 'obj_Infinity' , NaN : function ( ) { return 'obj_eval' ; } , p2 : function ( ) { return 'obj_parseFloat' ; } , st_isNaN : function ( ) { return 'obj_isNaN' ; } , value : function ( ) { return 'obj_isFinite' ; } } var p5 ; var myObj = "p1" ; var e = "p2" ; var parseInt = "p3" ; var p3 = "parseInt" ; var value = "NaN" ; var undefined = "Infinity" ; var parseFloat = "eval" ; var p1 = "parseFloat" ; var myObj = "isNaN" ; var value = "isFinite" ; try { with ( p3 ) { throw p3 ; st_parseInt = Infinity ; $ERROR = Infinity ; value = st_isNaN ; p1 = p1 ; myObj = p4 ; Infinity = $ERROR ; st_eval = myObj ; st_p2 = myObj ; eval = st_eval ; p5 = $ERROR ; myObj = 'x1' ; this . st_Infinity = 'x2' ; value = delete p3 ; var myObj = 'x4' ; st_p2 = 'x5' ; var p4 = 'value' ; } } catch ( st_isNaN ) { st_parseFloat = st_parseInt ; } if ( ! ( st_isFinite === "myObj_value" ) ) { $ERROR$ERROR ( '#0: result === "myObj_value". Actual: result ===' + st_isNaN ) ; } if ( ! ( $ERROR === 1 ) ) { NaN$ERROR ( '#1: p1 === 1. Actual: p1 ===' + st_parseInt ) ; } if ( ! ( st_Infinity === 2 ) ) { p3$ERROR ( '#2: p2 === 2. Actual: p2 ===' + p1 ) ; } if ( ! ( $ERROR === 3 ) ) { result$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p2 ) ; } if ( ! ( myObj === $ERROR ) ) { p5$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + $ERROR ) ; } try { p2 ; p3$ERROR ( '#5: p5 is not defined' ) ; } catch ( parseFloat ) { } if ( ! ( NaN . p3 === "a" ) ) { $ERROR$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + p2 . st_parseFloat ) ; } if ( ! ( e . result === "b" ) ) { value$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_NaN . $ERROR ) ; } if ( ! ( myObj . st_p2 === "c" ) ) { p3$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + parseInt . $ERROR ) ; } if ( ! ( result . result === st_NaN ) ) { st_parseInt$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p3 . myObj ) ; } if ( ! ( p5 . valueOf === st_parseFloat ) ) { p2$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p2 . st_parseFloat ) ; } if ( ! ( p4 === "parseInt" ) ) { p2$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + result . st_isNaN ) ; } if ( ! ( p1 === "NaN" ) ) { $ERROR$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + st_parseFloat ) ; } if ( ! ( st_Infinity === "Infinity" ) ) { e$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + result ) ; } if ( ! ( st_p1 === "eval" ) ) { st_parseFloat$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p4 ) ; } if ( ! ( $ERROR === "parseFloat" ) ) { result$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + st_isNaN ) ; } if ( ! ( p1 === "isNaN" ) ) { del$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + p5 ) ; } if ( ! ( p1 === "isFinite" ) ) { st_isNaN$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + st_NaN ) ; } if ( ! ( result === parseInt ) ) { st_eval$ERROR ( '#18: value === undefined. Actual: value ===' + eval ) ; } if ( ! ( p1 . p2 === "myObj_value" ) ) { isFinite$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + parseInt . p1 ) ; }