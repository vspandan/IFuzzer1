this . e = 1 ; this . st_isNaN = 2 ; this . myObj = 3 ; var result = "result" ; var result = { st_parseFloat : 'a' , del : 'b' , p3 : 'c' , $ERROR : 'myObj_value' , p3 : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , isFinite : 'obj_NaN' , p1 : 'obj_Infinity' , myObj : function ( ) { return 'obj_eval' ; } , myObj : function ( ) { return 'obj_parseFloat' ; } , p1 : function ( ) { return 'obj_isNaN' ; } , eval : function ( ) { return 'obj_isFinite' ; } } var p5 ; var p2 = "p1" ; var isFinite = "p2" ; var value = "p3" ; var myObj = "parseInt" ; var isNaN = "NaN" ; var st_parseFloat = "Infinity" ; var value = "eval" ; var st_eval = "parseFloat" ; var st_parseInt = "isNaN" ; var result = "isFinite" ; try { var parseInt = function ( ) { continue ; Infinity = undefined ; p3 = p3 ; result = undefined ; p4 = p5 ; myObj = valueOf ; $ERROR = myObj ; p3 = p3 ; result = st_Infinity ; $ERROR = $ERROR ; p1 = st_isNaN ; e = 'x1' ; this . $ERROR = 'x2' ; myObj = delete st_eval ; var e = 'x4' ; st_NaN = 'x5' ; var st_isFinite = 'value' ; } with ( result ) { st_NaN ( ) ; } } catch ( result ) { $ERROR = Infinity ; } if ( ! ( st_Infinity === eval ) ) { myObj$ERROR ( '#0: result === undefined. Actual: result ===' + st_Infinity ) ; } if ( ! ( st_NaN === 1 ) ) { p4$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p5 ) ; } if ( ! ( st_parseInt === 2 ) ) { p1$ERROR ( '#2: p2 === 2. Actual: p2 ===' + st_NaN ) ; } if ( ! ( st_parseInt === 3 ) ) { st_isFinite$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p4 ) ; } try { st_eval ; myObj$ERROR ( '#4: p4 doesn\'t exists' ) ; } catch ( p2 ) { } try { st_eval ; st_parseFloat$ERROR ( '#5: p5 is not defined' ) ; } catch ( isNaN ) { } if ( ! ( myObj . $ERROR === "a" ) ) { st_NaN$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + $ERROR . myObj ) ; } if ( ! ( myObj . p2 === "b" ) ) { isNaN$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + myObj . p2 ) ; } if ( ! ( myObj . st_p2 === "c" ) ) { undefined$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + st_eval . st_eval ) ; } if ( ! ( p2 . $ERROR === st_isNaN ) ) { $ERROR$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_Infinity . e ) ; } if ( ! ( valueOf . $ERROR === myObj ) ) { parseFloat$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + f . $ERROR ) ; } if ( ! ( p3 === "parseInt" ) ) { parseFloat$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + p4 . e ) ; } if ( ! ( isNaN === "NaN" ) ) { parseInt$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + p1 ) ; } if ( ! ( myObj === "Infinity" ) ) { p2$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + $ERROR ) ; } if ( ! ( $ERROR === "eval" ) ) { $ERROR$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + p2 ) ; } if ( ! ( $ERROR === "parseFloat" ) ) { p3$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + isNaN ) ; } if ( ! ( p2 === "isNaN" ) ) { st_p3$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + myObj ) ; } if ( ! ( p1 === "isFinite" ) ) { p3$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + p2 ) ; } try { $ERROR ; st_p1$ERROR ( '#18: value is not defined' ) ; } catch ( p3 ) { } if ( ! ( $ERROR . p2 === "myObj_value" ) ) { myObj$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + value . p3 ) ; }