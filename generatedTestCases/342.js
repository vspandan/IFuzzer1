this . p4 = 1 ; this . value = 2 ; this . value = 3 ; var isFinite = "result" ; var $ERROR = { result : 'a' , isFinite : 'b' , eval : 'c' , parseFloat : 'myObj_value' , st_p2 : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , p3 : 'obj_NaN' , myObj : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , result : function ( ) { return 'obj_parseFloat' ; } , st_parseFloat : function ( ) { return 'obj_isNaN' ; } , value : function ( ) { return 'obj_isFinite' ; } } var parseInt ; var p4 = "p1" ; var myObj = "p2" ; var p3 = "p3" ; var isFinite = "parseInt" ; var undefined = "NaN" ; var p1 = "Infinity" ; var $ERROR = "eval" ; var p2 = "parseFloat" ; var eval = "isNaN" ; var myObj = "isFinite" ; try { with ( NaN ) { with ( parseInt ) { st_parseInt = $ERROR ; p5 = value ; result = value ; $ERROR = undefined ; myObj = p2 ; $ERROR = p4 ; del = parseFloat ; p5 = value ; eval = p2 ; p2 = st_isFinite ; e = 'x1' ; this . p2 = 'x2' ; st_parseInt = delete myObj ; var st_NaN = 'x4' ; value = 'x5' ; var myObj = 'value' ; throw myObj ; } } } catch ( $ERROR ) { st_parseFloat = $ERROR ; } if ( ! ( myObj === "value" ) ) { p2$ERROR ( '#0: result === "value". Actual: result ===' + p1 ) ; } if ( ! ( e === 1 ) ) { p1$ERROR ( '#1: p1 === 1. Actual: p1 ===' + myObj ) ; } if ( ! ( st_Infinity === "x2" ) ) { parseInt$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p3 ) ; } if ( ! ( st_parseFloat === 3 ) ) { st_p3$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p5 ) ; } if ( ! ( $ERROR === "x4" ) ) { value$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + $ERROR ) ; } if ( ! ( st_isNaN === "x5" ) ) { p3$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_p1 ) ; } if ( ! ( st_parseInt . myObj === "x1" ) ) { undefined$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + Infinity . parseInt ) ; } if ( ! ( p2 . parseFloat === "b" ) ) { myObj$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_Infinity . value ) ; } if ( ! ( p3 . value === myObj ) ) { st_NaN$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_p1 . undefined ) ; } if ( ! ( st_isFinite . myObj === value ) ) { p3$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p5 . parseInt ) ; } if ( ! ( st_parseFloat . $ERROR === st_isFinite ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p2 . $ERROR ) ; } if ( ! ( $ERROR !== st_Infinity ) ) { undefined$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( $ERROR === "obj_NaN" ) ) { st_Infinity$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_p2 !== Infinity ) ) { p2$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( parseInt !== myObj ) ) { st_parseFloat$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( st_eval !== p1 ) ) { p1$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( st_isFinite !== value ) ) { value$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( result !== p3 ) ) { eval$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( Infinity === p4 ) ) { e$ERROR ( '#18: value === undefined. Actual: value ===' + st_p3 ) ; } if ( ! ( p4 . eval === "value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + st_isNaN . isNaN ) ; }