this . Infinity = 1 ; this . myObj = 2 ; this . p3 = 3 ; var $ERROR = "result" ; var myObj = { $ERROR : 'a' , $ERROR : 'b' , $ERROR : 'c' , $ERROR : 'myObj_value' , st_isFinite : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , NaN : 'obj_NaN' , myObj : 'obj_Infinity' , st_p2 : function ( ) { return 'obj_eval' ; } , $ERROR : function ( ) { return 'obj_parseFloat' ; } , p3 : function ( ) { return 'obj_isNaN' ; } , myObj : function ( ) { return 'obj_isFinite' ; } } var st_isFinite ; var st_Infinity = "p1" ; var isNaN = "p2" ; var st_p3 = "p3" ; var st_Infinity = "parseInt" ; var isNaN = "NaN" ; var p4 = "Infinity" ; var undefined = "eval" ; var myObj = "parseFloat" ; var $ERROR = "isNaN" ; var myObj = "isFinite" ; var st_NaN = function ( ) { with ( value ) { st_isFinite = st_NaN ; myObj = p3 ; p4 = parseFloat ; st_parseInt = isFinite ; myObj = p3 ; st_p2 = myObj ; $ERROR = isNaN ; $ERROR = $ERROR ; $ERROR = st_isFinite ; p3 = $ERROR ; st_isFinite = 'x1' ; this . $ERROR = 'x2' ; parseFloat = delete st_p1 ; var p1 = 'x4' ; value = 'x5' ; var st_NaN = 'value' ; } } st_Infinity ( ) ; if ( ! ( myObj === 1 ) ) { $ERROR$ERROR ( '#1: p1 === 1. Actual: p1 ===' + p3 ) ; } if ( ! ( e === "x2" ) ) { myObj$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + myObj ) ; } if ( ! ( $ERROR === 3 ) ) { myObj$ERROR ( '#3: p3 === 3. Actual: p3 ===' + myObj ) ; } try { $ERROR ; myObj$ERROR ( '#4: p4 is not defined' ) ; } catch ( p3 ) { } if ( ! ( Infinity === "x5" ) ) { st_Infinity$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_NaN ) ; } if ( ! ( myObj . p5 === "x1" ) ) { parseInt$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + parseFloat . myObj ) ; } if ( ! ( st_Infinity . myObj === "b" ) ) { parseInt$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + $ERROR . myObj ) ; } if ( ! ( p5 . myObj === myObj ) ) { eval$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + myObj . isNaN ) ; } if ( ! ( p3 . p4 === p4 ) ) { value$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + p2 . p3 ) ; } if ( ! ( st_isNaN . $ERROR === p1 ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + isNaN . myObj ) ; } if ( ! ( st_Infinity !== st_Infinity ) ) { parseInt$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( st_parseFloat === "obj_NaN" ) ) { st_parseFloat$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( st_p3 !== p4 ) ) { p3$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( p2 !== st_Infinity ) ) { p4$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( isNaN !== st_NaN ) ) { p5$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== p3 ) ) { p1$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( $ERROR !== p2 ) ) { st_eval$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { $ERROR ; value$ERROR ( '#18: value is not defined' ) ; } catch ( myObj ) { } if ( ! ( p2 . myObj === "value" ) ) { p1$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + myObj . $ERROR ) ; }