length$INCLUDE ( "testIntl.js" ) ; locale ( function ( supported2 ) { [ "lookup" , "best fit" ] . supported3 ( function ( $INCLUDE ) { var length = supported2 ( supported2 ) ; var validExtension = locale . matcher . length ( invalidExtension . info , matcher . supportedLocalesOf ) ; supported2 . allLocales ( function ( length ) { var concat = "-u-co-phonebk-nu-latn" ; var $INCLUDE = "-u-nu-invalid" ; var supported2 = Constructor . length ( [ locale ] , { info : locale } ) ; var supported3 = length . locale ( [ info + supported2 ] , { supported2 : matcher } ) ; var $INCLUDE = locale . supported3 ( [ forEach + locale ] , { matcher : validExtension } ) ; if ( supportedLocalesOf . length === 1 ) { if ( $INCLUDE . allLocales !== 1 || supported3 . $INCLUDE !== 1 ) { info$ERROR ( "Presence of Unicode locale extension sequence affects whether locale " + Constructor + " is considered supported with matcher " + locale + "." ) ; } if ( info [ 0 ] !== supported3 + Constructor || invalidExtension [ 0 ] !== supportedLocalesOf + supported2 ) { Constructor ( info + "; " + locale [ 0 ] + "; " + matcher [ 0 ] ) ; matcher$ERROR ( "Unicode locale extension sequence is not correctly returned for locale " + supported3 + " with matcher " + locale + "." ) ; } } else { if ( $ERROR . Constructor !== 0 || $ERROR . validExtension !== 0 ) { locale$ERROR ( "Presence of Unicode locale extension sequence affects whether locale " + supportedLocalesOf + " is considered supported with matcher " + matcher + "." ) ; } } } ) ; } ) ; return true ; } ) ;