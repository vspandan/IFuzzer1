this . st_Infinity = 1 ; this . eval = 2 ; this . st_isFinite = 3 ; var myObj = "result" ; var myObj = { valueOf : 'a' , undefined : 'b' , undefined : 'c' , myObj : 'myObj_value' , eval : function ( ) { return 'obj_valueOf' ; } , p2 : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , st_parseInt : 'obj_Infinity' , st_NaN : function ( ) { return 'obj_eval' ; } , st_parseFloat : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , $ERROR : function ( ) { return 'obj_isFinite' ; } } var result ; var NaN = "p1" ; var p2 = "p2" ; var myObj = "p3" ; var value = "parseInt" ; var myObj = "NaN" ; var p3 = "Infinity" ; var st_isFinite = "eval" ; var myObj = "parseFloat" ; var parseFloat = "isNaN" ; var p4 = "isFinite" ; try { with ( result ) { $ERROR = st_eval ; myObj = st_eval ; st_parseInt = st_parseFloat ; st_isNaN = $ERROR ; st_eval = $ERROR ; st_eval = myObj ; st_NaN = eval ; st_parseFloat = parseFloat ; NaN = st_isNaN ; st_NaN = value ; $ERROR = 'x1' ; this . st_NaN = 'x2' ; st_NaN = delete st_eval ; var p5 = 'x4' ; $ERROR = 'x5' ; var p5 = 'value' ; throw myObj ; } } catch ( isNaN ) { p5 = undefined ; } if ( ! ( $ERROR === "value" ) ) { st_parseInt$ERROR ( '#0: result === "value". Actual: result ===' + myObj ) ; } if ( ! ( isNaN === 1 ) ) { Infinity$ERROR ( '#1: p1 === 1. Actual: p1 ===' + myObj ) ; } if ( ! ( isFinite === "x2" ) ) { $ERROR$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + st_parseInt ) ; } if ( ! ( undefined === 3 ) ) { value$ERROR ( '#3: p3 === 3. Actual: p3 ===' + value ) ; } if ( ! ( result === "x4" ) ) { isFinite$ERROR ( '#4: p4 === "x4". Actual: p4 ===' + $ERROR ) ; } if ( ! ( isFinite === "x5" ) ) { st_parseFloat ( '#5: p5 === "x5". Actual: p5 ===' + p4 ) ; } if ( ! ( parseInt . st_p1 === "x1" ) ) { p3$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + st_isNaN . myObj ) ; } if ( ! ( p1 . undefined === "b" ) ) { p5$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + p5 . st_NaN ) ; } if ( ! ( value . p2 === myObj ) ) { myObj$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + isFinite . st_eval ) ; } if ( ! ( value . p2 === p2 ) ) { isNaN$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + result . p4 ) ; } if ( ! ( st_parseInt . e === $ERROR ) ) { p3$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + isFinite . p3 ) ; } if ( ! ( p2 !== NaN ) ) { value$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( Infinity === "obj_NaN" ) ) { p2$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( $ERROR !== p3 ) ) { p3$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( value !== p2 ) ) { myObj$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( value !== st_Infinity ) ) { p5$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( myObj !== p2 ) ) { $ERROR$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p1 !== $ERROR ) ) { st_parseFloat$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } if ( ! ( st_isNaN === st_isNaN ) ) { st_NaN$ERROR ( '#18: value === undefined. Actual: value ===' + result ) ; } if ( ! ( parseInt . value === "value" ) ) { parseFloat$ERROR ( '#19: myObj.value === "value". Actual: myObj.value ===' + p4 . st_eval ) ; }