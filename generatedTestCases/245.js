var value = { e : 'a' , isNaN : 'b' , e : 'c' , NaN : 'myObj_value' , e : function ( ) { return 'obj_valueOf' ; } , isNaN : function ( ) { return 'obj_parseInt' ; } , p1 : 'obj_NaN' , e : 'obj_Infinity' , $ERROR : function ( ) { return 'obj_eval' ; } , myObj : function ( ) { return 'obj_parseFloat' ; } , e : function ( ) { return 'obj_isNaN' ; } , e : function ( ) { return 'obj_isFinite' ; } , e : 7 } try { throw valueOf ; } catch ( e ) { if ( value . p1 !== "a" ) p1$ERROR ( '#1: e.p1 === "a". Actual: e.p1 ===' + isFinite . e ) ; if ( $ERROR . parseFloat !== 'myObj_value' ) p1$ERROR ( '#2: e.p1 === \'myObj_value\'. Actual: e.p1 ===' + myObj . valueOf ) ; if ( p1 . myObj ( ) !== 'obj_eval' ) p2$ERROR ( '#3: e.p1 === \'obj_eval\'. Actual: e.p1 ===' + eval . isFinite ) ; } eval . eval = 6 try { throw e ; } catch ( myObj ) { } if ( e . $ERROR !== 6 ) e$ERROR ( '#4: Handling of catch must be correct' ) ;