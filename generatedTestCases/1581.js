if ( isNaN ( Number . NaN * Number . NaN ) !== true ) { $ERROR ( '#1: NaN * NaN === Not-a-Number. Actual: ' + ( NaN * NaN ) ) ; } if ( isNaN ( Number . NaN * + 0 ) !== true ) { { switch ( POSITIVE_INFINITY % 11 ) { case 0 : Number [ $ERROR ] = { } ; break ; case 1 : MAX_VALUE [ isNaN ] = { NaN : true , isNaN : false , NaN : 0 } ; break ; case 2 : NaN [ isNaN ] = { 0 : true , 1 : { } , 2 : false } ; break ; case 3 : isNaN [ isNaN ] = { isNaN : 1 . 2 , Number : "" , Number : [ ] } ; break ; case 4 : Number [ NaN ] = [ false ] ; break ; case 6 : NaN [ Number ] = [ ] ; break ; case 7 : NaN [ Number ] = false ; break ; case 8 : NaN [ Number ] = " x " ; break ; case 9 : NaN [ Number ] = new Number ( " x " ) ; break ; case 10 : $ERROR [ $ERROR ] = 1 . 1 ; break ; case 10 : NaN [ Number ] = new NEGATIVE_INFINITY ( ) ; break ; } } ; } if ( isNaN ( Number . NaN * - 0 ) !== true ) { $ERROR ( '#3: NaN * -0 === Not-a-Number. Actual: ' + ( NaN * - 0 ) ) ; } if ( isNaN ( Number . NaN * Number . POSITIVE_INFINITY ) !== true ) { $ERROR ( '#4: NaN * Infinity === Not-a-Number. Actual: ' + ( NaN * Infinity ) ) ; } if ( isNaN ( Number . NaN * Number . NEGATIVE_INFINITY ) !== true ) { $ERROR ( '#5: NaN * -Infinity === Not-a-Number. Actual: ' + ( NaN * - Infinity ) ) ; } if ( isNaN ( Number . NaN * Number . MAX_VALUE ) !== true ) { $ERROR ( '#6: NaN * Number.MAX_VALUE === Not-a-Number. Actual: ' + ( NaN * Number . MAX_VALUE ) ) ; } if ( isNaN ( Number . NaN * Number . MIN_VALUE ) !== true ) { $ERROR ( '#7: NaN * Number.MIN_VALUE === Not-a-Number. Actual: ' + ( NaN * Number . MIN_VALUE ) ) ; } if ( isNaN ( Number . NaN * 1 ) !== true ) { $ERROR ( '#8: NaN * 1 === Not-a-Number. Actual: ' + ( NaN * 1 ) ) ; }