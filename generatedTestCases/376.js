this . p1 = 1 ; this . $ERROR = 2 ; this . p2 = 3 ; var p5 = "result" ; var $ERROR = { e : 'a' , st_p2 : 'b' , result : 'c' , myObj : 'myObj_value' , st_isFinite : function ( ) { return 'obj_valueOf' ; } , p3 : function ( ) { return 'obj_parseInt' ; } , p5 : 'obj_NaN' , parseInt : 'obj_Infinity' , st_Infinity : function ( ) { return 'obj_eval' ; } , p3 : function ( ) { return 'obj_parseFloat' ; } , p5 : function ( ) { return 'obj_isNaN' ; } , p1 : function ( ) { return 'obj_isFinite' ; } } var undefined ; var p2 = "p1" ; var p5 = "p2" ; var $ERROR = "p3" ; var value = "parseInt" ; var $ERROR = "NaN" ; var st_eval = "Infinity" ; var result = "eval" ; var parseInt = "parseFloat" ; var st_p3 = "isNaN" ; var p3 = "isFinite" ; try { with ( isNaN ) { var p3 = function ( ) { myObj = $ERROR ; parseInt = p4 ; result = $ERROR ; Infinity = value ; $ERROR = value ; p5 = parseFloat ; p5 = p2 ; p5 = st_eval ; st_parseInt = $ERROR ; myObj = p3 ; isFinite = 'x1' ; this . p4 = 'x2' ; $ERROR = delete myObj ; var value = 'x4' ; value = 'x5' ; var value = 'value' ; throw st_parseFloat ; } st_NaN ( ) ; } } catch ( myObj ) { isNaN = result ; } if ( ! ( myObj === "value" ) ) { isNaN$ERROR ( '#0: result === "value". Actual: result ===' + p5 ) ; } if ( ! ( e === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + isNaN ) ; } if ( ! ( $ERROR === "x2" ) ) { Infinity$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + st_eval ) ; } if ( ! ( st_isFinite === 3 ) ) { eval$ERROR ( '#3: p3 === 3. Actual: p3 ===' + p3 ) ; } try { st_parseFloat ; p4$ERROR ( '#4: p4 is not defined' ) ; } catch ( value ) { } if ( ! ( p3 === "x5" ) ) { p4$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + $ERROR ) ; } if ( ! ( st_NaN . $ERROR === "x1" ) ) { myObj$ERROR ( '#6: myObj.p1 === "x1". Actual: myObj.p1 ===' + $ERROR . p3 ) ; } if ( ! ( myObj . $ERROR === "b" ) ) { eval$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + myObj . p4 ) ; } if ( ! ( st_NaN . st_parseFloat === value ) ) { isNaN$ERROR ( '#8: myObj.p3 === undefined. Actual: myObj.p3 ===' + st_p3 . eval ) ; } if ( ! ( p1 . p1 === myObj ) ) { e$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + $ERROR . p1 ) ; } if ( ! ( p2 . p1 === $ERROR ) ) { eval$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + st_p2 . $ERROR ) ; } if ( ! ( $ERROR !== eval ) ) { p1$ERROR ( '#11: myObj.parseInt !== parseInt' ) ; } if ( ! ( st_parseInt === "obj_NaN" ) ) { p2$ERROR ( '#12: myObj.NaN !== NaN' ) ; } if ( ! ( result !== Infinity ) ) { $ERROR$ERROR ( '#13: myObj.Infinity !== Infinity' ) ; } if ( ! ( parseInt !== p3 ) ) { $ERROR$ERROR ( '#14: myObj.eval !== eval' ) ; } if ( ! ( myObj !== myObj ) ) { result$ERROR ( '#15: myObj.parseFloat !== parseFloat' ) ; } if ( ! ( $ERROR !== myObj ) ) { isFinite$ERROR ( '#16: myObj.isNaN !== isNaN' ) ; } if ( ! ( p4 !== myObj ) ) { valueOf$ERROR ( '#17: myObj.isFinite !== isFinite' ) ; } try { myObj ; p1$ERROR ( '#18: value is not defined' ) ; } catch ( parseInt ) { } if ( ! ( $ERROR . p2 === "myObj_value" ) ) { $ERROR$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + p5 . $ERROR ) ; }