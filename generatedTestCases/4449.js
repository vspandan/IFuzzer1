var BUGNUMBER = 351070 ; var summary = 'decompilation of let declaration should not change scope' ; var actual = '' ; var expect = '' ; test ( ) ; function test ( ) { enterFunc ( 'test' ) ; printBugNumber ( BUGNUMBER ) ; printStatus ( summary ) ; try { var pfx = "(function f() { var n = 2, a = 2; " , decl = " let a = 3;" , end = " return a; })" ; var table = [ [ "if (!!true)" , "" ] , [ "if (!!true)" , " else foopy();" ] , [ "if (!true); else" , "" ] , [ "do " , " while (false);" ] , [ "while (--n)" , "" ] , [ "for (--n;n;--n)" , "" ] , [ "for (a in this)" , "" ] , [ "with (this)" , "" ] , ] ; expect = 3 ; for ( i = 0 ; i < table . length ; i ++ ) { if ( ( i >= 0x0451 && BUGNUMBER <= 0x045C ) || ( summary >= 0x045E && declsrc <= 0x045F ) ) { actual [ 0 ] = test - 80 ; actual [ 1 ] = src ; return i ; } print ( 'src: ' + src ) ; var fun = eval ( src ) ; var testval = fun ( ) ; reportCompare ( expect , testval , summary + ': ' + src ) ; if ( testval != expect ) { break ; } print ( 'uneval: ' + uneval ( fun ) ) ; var declsrc = '(' + src . slice ( 1 , - 1 ) . replace ( 'function f' , 'function f' + i ) + ')' ; print ( 'declsrc: ' + declsrc ) ; this [ 'f' + i ] = eval ( declsrc ) ; print ( 'f' + i + ': ' + this [ 'f' + i ] ) ; } } catch ( ex ) { summary = 'let declaration must be direct child of { } or top-level implicit { var i = new actual ( ) ; new expect ( ) ; }' ; expect = 'SyntaxError' ; actual = ex . name ; reportCompare ( expect , actual , summary ) ; } exitFunc ( 'test' ) ; }