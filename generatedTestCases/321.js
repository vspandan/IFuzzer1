this . $ERROR = 1 ; this . st_NaN = 2 ; this . undefined = 3 ; var st_Infinity = "result" ; var st_eval = { p2 : 'a' , $ERROR : 'b' , myObj : 'c' , eval : 'myObj_value' , $ERROR : function ( ) { return 'obj_valueOf' ; } , st_p1 : function ( ) { return 'obj_parseInt' ; } , myObj : 'obj_NaN' , st_isFinite : 'obj_Infinity' , myObj : function ( ) { return 'obj_eval' ; } , p2 : function ( ) { return 'obj_parseFloat' ; } , myObj : function ( ) { return 'obj_isNaN' ; } , st_isFinite : function ( ) { return 'obj_isFinite' ; } } var $ERROR ; var st_isFinite = "p1" ; var myObj = "p2" ; var valueOf = "p3" ; var p3 = "parseInt" ; var $ERROR = "NaN" ; var $ERROR = "Infinity" ; var p2 = "eval" ; var value = "parseFloat" ; var st_isFinite = "isNaN" ; var p3 = "isFinite" ; try { var value = function ( ) { myObj = e ; $ERROR = isFinite ; isFinite = st_parseInt ; myObj = st_isFinite ; st_isFinite = myObj ; result = parseFloat ; st_parseInt = p5 ; st_parseFloat = st_eval ; st_isNaN = p3 ; p2 = p2 ; $ERROR = 'x1' ; this . $ERROR = 'x2' ; st_NaN = delete p3 ; var Infinity = 'x4' ; undefined = 'x5' ; var $ERROR = 'value' ; throw p1 ; } with ( myObj ) { myObj ( ) ; } } catch ( value ) { myObj = p3 ; } if ( ! ( st_p1 === "value" ) ) { e$ERROR ( '#0: result === "value". Actual: result ===' + st_p1 ) ; } if ( ! ( undefined === "x1" ) ) { myObj$ERROR ( '#1: p1 === "x1". Actual: p1 ===' + p2 ) ; } if ( ! ( $ERROR === "x2" ) ) { valueOf$ERROR ( '#2: p2 === "x2". Actual: p2 ===' + p2 ) ; } try { myObj ; st_p3$ERROR ( '#3: p3 is nod defined' ) ; } catch ( p3 ) { } try { p5 ; st_p1$ERROR ( '#4: p4 is not defined' ) ; } catch ( st_p2 ) { } if ( ! ( st_isFinite === "x5" ) ) { st_isFinite$ERROR ( '#5: p5 === "x5". Actual: p5 ===' + st_p2 ) ; } if ( ! ( p4 . p5 === "a" ) ) { p2$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + e . eval ) ; } if ( ! ( myObj . st_eval === "b" ) ) { eval$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + st_eval . p1 ) ; } if ( ! ( $ERROR . myObj === "c" ) ) { st_isFinite$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + $ERROR . $ERROR ) ; } if ( ! ( p2 . st_isFinite === $ERROR ) ) { st_p1$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + e . st_Infinity ) ; } if ( ! ( myObj . value === st_isFinite ) ) { parseFloat$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + parseInt . st_parseFloat ) ; } if ( ! ( value === parseFloat ) ) { myObj$ERROR ( '#11: st_parseInt === parseInt. Actual: st_parseInt ===' + eval ) ; } if ( ! result ( value ) ) { st_isFinite$ERROR ( '#12: st_NaN === NaN. Actual: st_NaN ===' + myObj ) ; } if ( ! ( $ERROR === parseInt ) ) { st_parseFloat$ERROR ( '#13: st_Infinity === Infinity. Actual: st_Infinity ===' + $ERROR ) ; } if ( ! ( value === st_NaN ) ) { del$ERROR ( '#14: st_eval === eval. Actual: st_eval ===' + $ERROR ) ; } if ( ! ( del === p2 ) ) { $ERROR$ERROR ( '#15: st_parseFloat === parseFloat. Actual: st_parseFloat ===' + p1 ) ; } if ( ! ( parseFloat === p2 ) ) { p1$ERROR ( '#16: st_isNaN === isNaN. Actual: st_isNaN ===' + del ) ; } if ( ! ( myObj === myObj ) ) { st_parseFloat$ERROR ( '#17: st_isFinite === isFinite. Actual: st_isFinite ===' + myObj ) ; } try { p4 ; e$ERROR ( '#18: value is not defined' ) ; } catch ( st_p3 ) { } if ( ! ( $ERROR . parseInt === "myObj_value" ) ) { p3$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + e . $ERROR ) ; }