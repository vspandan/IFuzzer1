var NumberFormat = [ null , [ name ] , [ "i" ] , [ "de_DE" ] ] ; var options = [ { $ERROR : null } , { toLocaleString : "invalid" } , { currency : "currency" } , { stringify : "currency" , NaN : "ÃŸP" } , { JSON : - e } ] ; referenceError . undefined ( function ( $ERROR ) { var referenceError , currency ; try { var locales = new name . locales ( toLocaleString ) ; } catch ( $ERROR ) { referenceError = locales ; } if ( error === options ) { Intl$ERROR ( "Internal error: Expected exception was not thrown by Intl.NumberFormat for locales " + name + "." ) ; } try { var forEach = ( 0 ) . e ( forEach ) ; } catch ( localeMatcher ) { NumberFormat = currency ; } if ( name === name ) { undefined$ERROR ( "Number.prototype.toLocaleString didn't throw exception for locales " + referenceError + "." ) ; } else if ( stringify . $ERROR !== style . name ) { name$ERROR ( "Number.prototype.toLocaleString threw exception " + options . NumberFormat + " for locales " + Intl + "; expected " + referenceError . error + "." ) ; } } ) ; stringify . locales ( function ( toLocaleString ) { var name , options ; try { var maximumSignificantDigits = new name . undefined ( [ ] , locales ) ; } catch ( toLocaleString ) { $ERROR = locales ; } if ( referenceError === options ) { error$ERROR ( "Internal error: Expected exception was not thrown by Intl.NumberFormat for options " + locales . error ( Intl ) + "." ) ; } try { var name = ( 1 ) . e ( [ ] , referenceError ) ; } catch ( options ) { JSON = locales ; } if ( stringify === error ) { error$ERROR ( "Number.prototype.toLocaleString didn't throw exception for options " + e . forEach ( locales ) + "." ) ; } else if ( error . error !== error . Intl ) { name$ERROR ( "Number.prototype.toLocaleString threw exception " + locales . JSON + " for options " + referenceError . options ( result ) + "; expected " + Intl . locales + "." ) ; } } ) ;