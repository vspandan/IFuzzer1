this . $ERROR = 1 ; this . p4 = 2 ; this . parseFloat = 3 ; var p3 = "result" ; var p1 = { prop : 'a' , p4 : 'b' , st_parseFloat : 'c' , myObj : 'myObj_value' , myObj : function ( ) { return 'obj_valueOf' ; } , $ERROR : function ( ) { return 'obj_parseInt' ; } , p4 : 'obj_NaN' , $ERROR : 'obj_Infinity' , st_parseFloat : function ( ) { return 'obj_eval' ; } , undefined : function ( ) { return 'obj_parseFloat' ; } , st_eval : function ( ) { return 'obj_isNaN' ; } , p2 : function ( ) { return 'obj_isFinite' ; } } var st_eval ; var st_NaN = "p1" ; var $ERROR = "p2" ; var value = "p3" ; var del = "parseInt" ; var myObj = "NaN" ; var $ERROR = "Infinity" ; var p2 = "eval" ; var p2 = "parseFloat" ; var p3 = "isNaN" ; var parseInt = "isFinite" ; with ( p1 ) { for ( var p5 in p2 ) { break ; if ( st_isFinite === 'p1' ) { st_Infinity = st_parseInt ; $ERROR = 'x1' ; } if ( p1 === 'p2' ) { parseFloat = p1 ; this . Infinity = 'x2' ; } if ( myObj === 'p3' ) { myObj = p2 ; parseInt = delete st_isNaN ; } if ( parseInt === 'parseInt' ) myObj = st_parseFloat ; if ( $ERROR === 'NaN' ) p3 = $ERROR ; if ( st_p1 === 'Infinity' ) myObj = p4 ; if ( value === 'eval' ) p4 = p2 ; if ( p3 === 'parseFloat' ) parseInt = myObj ; if ( $ERROR === 'isNaN' ) p5 = $ERROR ; if ( prop === 'isFinite' ) p3 = st_eval ; var eval = 'x4' ; parseFloat = 'x5' ; var myObj = 'value' ; } } if ( ! ( p1 === 1 ) ) { myObj$ERROR ( '#1: p1 === 1. Actual: p1 ===' + st_parseFloat ) ; } if ( ! ( st_Infinity === 2 ) ) { prop$ERROR ( '#2: p2 === 2. Actual: p2 ===' + st_parseInt ) ; } if ( ! function ( ) { return this ( ) ; } ) { st_Infinity$ERROR ( '#3: p3 === 3. Actual: p3 ===' + Infinity ) ; } if ( ! ( $ERROR === st_p1 ) ) { prop$ERROR ( '#4: p4 === undefined. Actual: p4 ===' + $ERROR ) ; } try { st_isNaN ; prop$ERROR ( '#5: p5 is not defined' ) ; } catch ( $ERROR ) { } if ( ! ( st_p1 . st_parseInt === "a" ) ) { prop$ERROR ( '#6: myObj.p1 === "a". Actual: myObj.p1 ===' + st_eval . undefined ) ; } if ( ! ( st_isFinite . isFinite === "b" ) ) { st_isFinite$ERROR ( '#7: myObj.p2 === "b". Actual: myObj.p2 ===' + isFinite . undefined ) ; } if ( ! ( p1 . $ERROR === "c" ) ) { parseFloat$ERROR ( '#8: myObj.p3 === "c". Actual: myObj.p3 ===' + value . p2 ) ; } if ( ! ( myObj . prop === NaN ) ) { st_Infinity$ERROR ( '#9: myObj.p4 === undefined. Actual: myObj.p4 ===' + st_isNaN . isFinite ) ; } if ( ! ( undefined . p1 === prop ) ) { $ERROR$ERROR ( '#10: myObj.p5 === undefined. Actual: myObj.p5 ===' + p1 . st_NaN ) ; } if ( ! ( undefined === "parseInt" ) ) { st_parseFloat$ERROR ( '#11: myObj.parseInt === "parseInt". Actual: myObj.parseInt ===' + value . st_eval ) ; } if ( ! ( NaN === "NaN" ) ) { st_parseFloat$ERROR ( '#12: st_NaN === "NaN". Actual: st_NaN ===' + prop ) ; } if ( ! ( isFinite === "Infinity" ) ) { undefined$ERROR ( '#13: st_Infinity === "Infinity". Actual: st_Infinity ===' + prop ) ; } if ( ! ( undefined === "eval" ) ) { myObj$ERROR ( '#14: st_eval === "eval". Actual: st_eval ===' + st_NaN ) ; } if ( ! ( prop === "parseFloat" ) ) { p5$ERROR ( '#15: st_parseFloat === "parseFloat". Actual: st_parseFloat ===' + $ERROR ) ; } if ( ! ( st_isFinite === "isNaN" ) ) { NaN$ERROR ( '#16: st_isNaN === "isNaN". Actual: st_isNaN ===' + prop ) ; } if ( ! ( p1 === "isFinite" ) ) { myObj$ERROR ( '#17: st_isFinite === "isFinite". Actual: st_isFinite ===' + p3 ) ; } if ( ! ( p5 === p5 ) ) { st_NaN$ERROR ( '#18: value === undefined. Actual: value ===' + myObj ) ; } if ( ! ( st_eval . Infinity === "myObj_value" ) ) { result$ERROR ( '#19: myObj.value === "myObj_value". Actual: myObj.value ===' + myObj . myObj ) ; }