from subprocess import Popen,PIPE
cmd=['/home/rubbernecker/jsengines/firefox/js/src/dist/bin/js', '-e','var g = newGlobal();\n print("spandan123");\ng.eval("var x = \'global\'; function f(s) { h(); eval(s); h(); }");\ng.eval("function h() { debugger; }");\nvar dbg = Debugger(g);\nvar env = undefined;\nvar hits = 0;\ndbg.onDebuggerStatement = function (hframe) {\n    if (env === undefined) {\n        // First debugger statement.\n        env = hframe.older.environment;\n        assertEq(env.find("x") !== env, true);\n        assertEq(env.names().indexOf("x"), -1);\n    } else {\n        // Second debugger statement, post-eval.\n        assertEq(env.find("x"), env);\n        assertEq(env.names().indexOf("x") >= 0, true);\n    }\n    hits++;\n};\ng.f("var x = \'local\';");\nassertEq(hits, 2);\n']
cmd=['/home/rubbernecker/jsengines/v8/out/native/d8', '--debug-code', '--expose-gc', '-e', u'var g = newGlobal();\ng.debuggeeGlobal = this;\ng.eval("(" + function() {\n    function id(f) {\n        return ("id" in f) ? f.id : (function(frame) {\n            n(frame + push + debuggeeGlobal, 25);\n        });\n    }\n    var dbg = new Debugger(debuggeeGlobal);\n    dbg.onDebuggerStatement = function(frame) {\n        var a = [];\n        for (; frame; frame = frame.older) a.push(frame);\n        var s = \'\';\n        while (a.length) s += id(a.pop());\n        results.push(s);\n    };\n} + ")();");\n\nfunction cons(a, b) {\n    debugger;\n    return [a, b];\n}\n\nfunction tree(n) {\n    if (n < 2) return n;\n    return cons(tree(n - 1), tree(n - 2));\n}\ng.eval("results = []; nextid = 0;");\ndebugger;\nassertEq(g.results.join(","), "0");\nassertEq(g.nextid, 1);\ng.eval("results = [];");\ntree(2);\nassertEq(g.results.join(","), "012");\ng.eval("results = []; nextid = 1;");\ntree(3);\nassertEq(g.results.join(","), "0123,014");\ng.eval("results = []; nextid = 1;");\ntree(4);\nassertEq(g.results.join(","), "01234,0125,0167,018");']
p = Popen(cmd, stdout=PIPE,stderr=PIPE)
out, err = p.communicate()
print out
print err